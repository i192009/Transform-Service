// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: AccountService.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceClient interface {
	// ticket登录
	LoginByTicket(ctx context.Context, in *LoginByTicketRequest, opts ...grpc.CallOption) (*UserLoginReply, error)
	// 根据账户名/手机号/邮箱查询账户
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountReply, error)
	// 根据账户名/手机号/邮箱查询账户，并根据参数修改账户信息
	GetOrCreateAccount(ctx context.Context, in *C2S_GetOrCreateAccount_Req, opts ...grpc.CallOption) (*S2C_GetAccount_Rpn, error)
	// 条件查询账户列表
	QueryAccounts(ctx context.Context, in *C2S_AccountQuery_Req, opts ...grpc.CallOption) (*S2C_Accounts_Rpn, error)
	CreateAccount(ctx context.Context, in *C2S_CreateAccount_Req, opts ...grpc.CallOption) (*S2C_CreateAccount_Rpn, error)
	// 预埋未注册账户回调
	// 预埋成功时返回邀请码
	// 注册账户登录时携带邀请码，将触发对应回调事件
	// 回调时将在body中向回调地址返回账户基本信息
	SetRegisterCallback(ctx context.Context, in *RegCallbackRequest, opts ...grpc.CallOption) (*RegCallbackReply, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) LoginByTicket(ctx context.Context, in *LoginByTicketRequest, opts ...grpc.CallOption) (*UserLoginReply, error) {
	out := new(UserLoginReply)
	err := c.cc.Invoke(ctx, "/account.AccountService/LoginByTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountReply, error) {
	out := new(GetAccountReply)
	err := c.cc.Invoke(ctx, "/account.AccountService/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetOrCreateAccount(ctx context.Context, in *C2S_GetOrCreateAccount_Req, opts ...grpc.CallOption) (*S2C_GetAccount_Rpn, error) {
	out := new(S2C_GetAccount_Rpn)
	err := c.cc.Invoke(ctx, "/account.AccountService/GetOrCreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) QueryAccounts(ctx context.Context, in *C2S_AccountQuery_Req, opts ...grpc.CallOption) (*S2C_Accounts_Rpn, error) {
	out := new(S2C_Accounts_Rpn)
	err := c.cc.Invoke(ctx, "/account.AccountService/QueryAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) CreateAccount(ctx context.Context, in *C2S_CreateAccount_Req, opts ...grpc.CallOption) (*S2C_CreateAccount_Rpn, error) {
	out := new(S2C_CreateAccount_Rpn)
	err := c.cc.Invoke(ctx, "/account.AccountService/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) SetRegisterCallback(ctx context.Context, in *RegCallbackRequest, opts ...grpc.CallOption) (*RegCallbackReply, error) {
	out := new(RegCallbackReply)
	err := c.cc.Invoke(ctx, "/account.AccountService/SetRegisterCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations must embed UnimplementedAccountServiceServer
// for forward compatibility
type AccountServiceServer interface {
	// ticket登录
	LoginByTicket(context.Context, *LoginByTicketRequest) (*UserLoginReply, error)
	// 根据账户名/手机号/邮箱查询账户
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountReply, error)
	// 根据账户名/手机号/邮箱查询账户，并根据参数修改账户信息
	GetOrCreateAccount(context.Context, *C2S_GetOrCreateAccount_Req) (*S2C_GetAccount_Rpn, error)
	// 条件查询账户列表
	QueryAccounts(context.Context, *C2S_AccountQuery_Req) (*S2C_Accounts_Rpn, error)
	CreateAccount(context.Context, *C2S_CreateAccount_Req) (*S2C_CreateAccount_Rpn, error)
	// 预埋未注册账户回调
	// 预埋成功时返回邀请码
	// 注册账户登录时携带邀请码，将触发对应回调事件
	// 回调时将在body中向回调地址返回账户基本信息
	SetRegisterCallback(context.Context, *RegCallbackRequest) (*RegCallbackReply, error)
	mustEmbedUnimplementedAccountServiceServer()
}

// UnimplementedAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServiceServer struct {
}

func (UnimplementedAccountServiceServer) LoginByTicket(context.Context, *LoginByTicketRequest) (*UserLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByTicket not implemented")
}
func (UnimplementedAccountServiceServer) GetAccount(context.Context, *GetAccountRequest) (*GetAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedAccountServiceServer) GetOrCreateAccount(context.Context, *C2S_GetOrCreateAccount_Req) (*S2C_GetAccount_Rpn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrCreateAccount not implemented")
}
func (UnimplementedAccountServiceServer) QueryAccounts(context.Context, *C2S_AccountQuery_Req) (*S2C_Accounts_Rpn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAccounts not implemented")
}
func (UnimplementedAccountServiceServer) CreateAccount(context.Context, *C2S_CreateAccount_Req) (*S2C_CreateAccount_Rpn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedAccountServiceServer) SetRegisterCallback(context.Context, *RegCallbackRequest) (*RegCallbackReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRegisterCallback not implemented")
}
func (UnimplementedAccountServiceServer) mustEmbedUnimplementedAccountServiceServer() {}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s grpc.ServiceRegistrar, srv AccountServiceServer) {
	s.RegisterService(&AccountService_ServiceDesc, srv)
}

func _AccountService_LoginByTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginByTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).LoginByTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/LoginByTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).LoginByTicket(ctx, req.(*LoginByTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetOrCreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_GetOrCreateAccount_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetOrCreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/GetOrCreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetOrCreateAccount(ctx, req.(*C2S_GetOrCreateAccount_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_QueryAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_AccountQuery_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).QueryAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/QueryAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).QueryAccounts(ctx, req.(*C2S_AccountQuery_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_CreateAccount_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CreateAccount(ctx, req.(*C2S_CreateAccount_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_SetRegisterCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).SetRegisterCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/SetRegisterCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).SetRegisterCallback(ctx, req.(*RegCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountService_ServiceDesc is the grpc.ServiceDesc for AccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginByTicket",
			Handler:    _AccountService_LoginByTicket_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _AccountService_GetAccount_Handler,
		},
		{
			MethodName: "GetOrCreateAccount",
			Handler:    _AccountService_GetOrCreateAccount_Handler,
		},
		{
			MethodName: "QueryAccounts",
			Handler:    _AccountService_QueryAccounts_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _AccountService_CreateAccount_Handler,
		},
		{
			MethodName: "SetRegisterCallback",
			Handler:    _AccountService_SetRegisterCallback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "AccountService.proto",
}
