// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: PrivilegeService.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoleServiceClient is the client API for RoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleServiceClient interface {
	// 增加角色权限
	AddPrivileges(ctx context.Context, in *RoleModifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 移除角色权限
	RemovePrivileges(ctx context.Context, in *RoleModifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 查询角色权限
	GetRolePrivileges(ctx context.Context, in *GetRolePrivilegeRequest, opts ...grpc.CallOption) (*RolePrivilegesReply, error)
}

type roleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleServiceClient(cc grpc.ClientConnInterface) RoleServiceClient {
	return &roleServiceClient{cc}
}

func (c *roleServiceClient) AddPrivileges(ctx context.Context, in *RoleModifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/privilege.RoleService/AddPrivileges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) RemovePrivileges(ctx context.Context, in *RoleModifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/privilege.RoleService/RemovePrivileges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) GetRolePrivileges(ctx context.Context, in *GetRolePrivilegeRequest, opts ...grpc.CallOption) (*RolePrivilegesReply, error) {
	out := new(RolePrivilegesReply)
	err := c.cc.Invoke(ctx, "/privilege.RoleService/GetRolePrivileges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleServiceServer is the server API for RoleService service.
// All implementations must embed UnimplementedRoleServiceServer
// for forward compatibility
type RoleServiceServer interface {
	// 增加角色权限
	AddPrivileges(context.Context, *RoleModifyRequest) (*emptypb.Empty, error)
	// 移除角色权限
	RemovePrivileges(context.Context, *RoleModifyRequest) (*emptypb.Empty, error)
	// 查询角色权限
	GetRolePrivileges(context.Context, *GetRolePrivilegeRequest) (*RolePrivilegesReply, error)
	mustEmbedUnimplementedRoleServiceServer()
}

// UnimplementedRoleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoleServiceServer struct {
}

func (UnimplementedRoleServiceServer) AddPrivileges(context.Context, *RoleModifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPrivileges not implemented")
}
func (UnimplementedRoleServiceServer) RemovePrivileges(context.Context, *RoleModifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePrivileges not implemented")
}
func (UnimplementedRoleServiceServer) GetRolePrivileges(context.Context, *GetRolePrivilegeRequest) (*RolePrivilegesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolePrivileges not implemented")
}
func (UnimplementedRoleServiceServer) mustEmbedUnimplementedRoleServiceServer() {}

// UnsafeRoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleServiceServer will
// result in compilation errors.
type UnsafeRoleServiceServer interface {
	mustEmbedUnimplementedRoleServiceServer()
}

func RegisterRoleServiceServer(s grpc.ServiceRegistrar, srv RoleServiceServer) {
	s.RegisterService(&RoleService_ServiceDesc, srv)
}

func _RoleService_AddPrivileges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).AddPrivileges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/privilege.RoleService/AddPrivileges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).AddPrivileges(ctx, req.(*RoleModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_RemovePrivileges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).RemovePrivileges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/privilege.RoleService/RemovePrivileges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).RemovePrivileges(ctx, req.(*RoleModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_GetRolePrivileges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolePrivilegeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).GetRolePrivileges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/privilege.RoleService/GetRolePrivileges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).GetRolePrivileges(ctx, req.(*GetRolePrivilegeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleService_ServiceDesc is the grpc.ServiceDesc for RoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "privilege.RoleService",
	HandlerType: (*RoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPrivileges",
			Handler:    _RoleService_AddPrivileges_Handler,
		},
		{
			MethodName: "RemovePrivileges",
			Handler:    _RoleService_RemovePrivileges_Handler,
		},
		{
			MethodName: "GetRolePrivileges",
			Handler:    _RoleService_GetRolePrivileges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "PrivilegeService.proto",
}

// AuthorizationServiceClient is the client API for AuthorizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorizationServiceClient interface {
	// 增加授权用户
	AddAuthorizationUsers(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	// 删除授权用户
	RemoveAuthorizationUsers(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	// 删除资源在角色上的授权关系
	DeleteAuthorization(ctx context.Context, in *AuthorizationDeleteRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	// 全量设置授权关系
	SetAuthorization(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	// 删除资源
	DeleteResources(ctx context.Context, in *ResourceDeleteRequest, opts ...grpc.CallOption) (*ResourceDeleteReply, error)
	// 获取授权资源
	GetAuthorizedResource(ctx context.Context, in *AuthorizedResourceQueryRequest, opts ...grpc.CallOption) (*AuthorizedResourceReply, error)
	// 获取授权数据
	GetAuthorizedPrivilege(ctx context.Context, in *AuthorizedPrivilegeQueryRequest, opts ...grpc.CallOption) (*AuthorizedPrivilegeReply, error)
	// 获取授权数据
	GetAuthorizedUser(ctx context.Context, in *AuthorizedUserQueryRequest, opts ...grpc.CallOption) (*AuthorizedUserReply, error)
}

type authorizationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizationServiceClient(cc grpc.ClientConnInterface) AuthorizationServiceClient {
	return &authorizationServiceClient{cc}
}

func (c *authorizationServiceClient) AddAuthorizationUsers(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/privilege.AuthorizationService/AddAuthorizationUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) RemoveAuthorizationUsers(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/privilege.AuthorizationService/RemoveAuthorizationUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) DeleteAuthorization(ctx context.Context, in *AuthorizationDeleteRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/privilege.AuthorizationService/DeleteAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) SetAuthorization(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/privilege.AuthorizationService/SetAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) DeleteResources(ctx context.Context, in *ResourceDeleteRequest, opts ...grpc.CallOption) (*ResourceDeleteReply, error) {
	out := new(ResourceDeleteReply)
	err := c.cc.Invoke(ctx, "/privilege.AuthorizationService/DeleteResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) GetAuthorizedResource(ctx context.Context, in *AuthorizedResourceQueryRequest, opts ...grpc.CallOption) (*AuthorizedResourceReply, error) {
	out := new(AuthorizedResourceReply)
	err := c.cc.Invoke(ctx, "/privilege.AuthorizationService/GetAuthorizedResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) GetAuthorizedPrivilege(ctx context.Context, in *AuthorizedPrivilegeQueryRequest, opts ...grpc.CallOption) (*AuthorizedPrivilegeReply, error) {
	out := new(AuthorizedPrivilegeReply)
	err := c.cc.Invoke(ctx, "/privilege.AuthorizationService/GetAuthorizedPrivilege", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) GetAuthorizedUser(ctx context.Context, in *AuthorizedUserQueryRequest, opts ...grpc.CallOption) (*AuthorizedUserReply, error) {
	out := new(AuthorizedUserReply)
	err := c.cc.Invoke(ctx, "/privilege.AuthorizationService/GetAuthorizedUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationServiceServer is the server API for AuthorizationService service.
// All implementations must embed UnimplementedAuthorizationServiceServer
// for forward compatibility
type AuthorizationServiceServer interface {
	// 增加授权用户
	AddAuthorizationUsers(context.Context, *AuthorizationRequest) (*EmptyReply, error)
	// 删除授权用户
	RemoveAuthorizationUsers(context.Context, *AuthorizationRequest) (*EmptyReply, error)
	// 删除资源在角色上的授权关系
	DeleteAuthorization(context.Context, *AuthorizationDeleteRequest) (*EmptyReply, error)
	// 全量设置授权关系
	SetAuthorization(context.Context, *AuthorizationRequest) (*EmptyReply, error)
	// 删除资源
	DeleteResources(context.Context, *ResourceDeleteRequest) (*ResourceDeleteReply, error)
	// 获取授权资源
	GetAuthorizedResource(context.Context, *AuthorizedResourceQueryRequest) (*AuthorizedResourceReply, error)
	// 获取授权数据
	GetAuthorizedPrivilege(context.Context, *AuthorizedPrivilegeQueryRequest) (*AuthorizedPrivilegeReply, error)
	// 获取授权数据
	GetAuthorizedUser(context.Context, *AuthorizedUserQueryRequest) (*AuthorizedUserReply, error)
	mustEmbedUnimplementedAuthorizationServiceServer()
}

// UnimplementedAuthorizationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorizationServiceServer struct {
}

func (UnimplementedAuthorizationServiceServer) AddAuthorizationUsers(context.Context, *AuthorizationRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAuthorizationUsers not implemented")
}
func (UnimplementedAuthorizationServiceServer) RemoveAuthorizationUsers(context.Context, *AuthorizationRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAuthorizationUsers not implemented")
}
func (UnimplementedAuthorizationServiceServer) DeleteAuthorization(context.Context, *AuthorizationDeleteRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthorization not implemented")
}
func (UnimplementedAuthorizationServiceServer) SetAuthorization(context.Context, *AuthorizationRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAuthorization not implemented")
}
func (UnimplementedAuthorizationServiceServer) DeleteResources(context.Context, *ResourceDeleteRequest) (*ResourceDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResources not implemented")
}
func (UnimplementedAuthorizationServiceServer) GetAuthorizedResource(context.Context, *AuthorizedResourceQueryRequest) (*AuthorizedResourceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorizedResource not implemented")
}
func (UnimplementedAuthorizationServiceServer) GetAuthorizedPrivilege(context.Context, *AuthorizedPrivilegeQueryRequest) (*AuthorizedPrivilegeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorizedPrivilege not implemented")
}
func (UnimplementedAuthorizationServiceServer) GetAuthorizedUser(context.Context, *AuthorizedUserQueryRequest) (*AuthorizedUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorizedUser not implemented")
}
func (UnimplementedAuthorizationServiceServer) mustEmbedUnimplementedAuthorizationServiceServer() {}

// UnsafeAuthorizationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorizationServiceServer will
// result in compilation errors.
type UnsafeAuthorizationServiceServer interface {
	mustEmbedUnimplementedAuthorizationServiceServer()
}

func RegisterAuthorizationServiceServer(s grpc.ServiceRegistrar, srv AuthorizationServiceServer) {
	s.RegisterService(&AuthorizationService_ServiceDesc, srv)
}

func _AuthorizationService_AddAuthorizationUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).AddAuthorizationUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/privilege.AuthorizationService/AddAuthorizationUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).AddAuthorizationUsers(ctx, req.(*AuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_RemoveAuthorizationUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).RemoveAuthorizationUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/privilege.AuthorizationService/RemoveAuthorizationUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).RemoveAuthorizationUsers(ctx, req.(*AuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_DeleteAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).DeleteAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/privilege.AuthorizationService/DeleteAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).DeleteAuthorization(ctx, req.(*AuthorizationDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_SetAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).SetAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/privilege.AuthorizationService/SetAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).SetAuthorization(ctx, req.(*AuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_DeleteResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).DeleteResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/privilege.AuthorizationService/DeleteResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).DeleteResources(ctx, req.(*ResourceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_GetAuthorizedResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizedResourceQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).GetAuthorizedResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/privilege.AuthorizationService/GetAuthorizedResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).GetAuthorizedResource(ctx, req.(*AuthorizedResourceQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_GetAuthorizedPrivilege_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizedPrivilegeQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).GetAuthorizedPrivilege(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/privilege.AuthorizationService/GetAuthorizedPrivilege",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).GetAuthorizedPrivilege(ctx, req.(*AuthorizedPrivilegeQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_GetAuthorizedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizedUserQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).GetAuthorizedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/privilege.AuthorizationService/GetAuthorizedUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).GetAuthorizedUser(ctx, req.(*AuthorizedUserQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorizationService_ServiceDesc is the grpc.ServiceDesc for AuthorizationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorizationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "privilege.AuthorizationService",
	HandlerType: (*AuthorizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAuthorizationUsers",
			Handler:    _AuthorizationService_AddAuthorizationUsers_Handler,
		},
		{
			MethodName: "RemoveAuthorizationUsers",
			Handler:    _AuthorizationService_RemoveAuthorizationUsers_Handler,
		},
		{
			MethodName: "DeleteAuthorization",
			Handler:    _AuthorizationService_DeleteAuthorization_Handler,
		},
		{
			MethodName: "SetAuthorization",
			Handler:    _AuthorizationService_SetAuthorization_Handler,
		},
		{
			MethodName: "DeleteResources",
			Handler:    _AuthorizationService_DeleteResources_Handler,
		},
		{
			MethodName: "GetAuthorizedResource",
			Handler:    _AuthorizationService_GetAuthorizedResource_Handler,
		},
		{
			MethodName: "GetAuthorizedPrivilege",
			Handler:    _AuthorizationService_GetAuthorizedPrivilege_Handler,
		},
		{
			MethodName: "GetAuthorizedUser",
			Handler:    _AuthorizationService_GetAuthorizedUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "PrivilegeService.proto",
}
