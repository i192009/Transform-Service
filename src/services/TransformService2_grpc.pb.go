// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: TransformService2.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransformV2Client is the client API for TransformV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransformV2Client interface {
	CreateJob(ctx context.Context, in *C2S_CreateJobReq, opts ...grpc.CallOption) (*S2C_CreateJobRpn, error)
	GetJobInfo(ctx context.Context, in *C2S_GetJobInfoReq, opts ...grpc.CallOption) (*S2C_GetJobInfoRpn, error)
	CancelJob(ctx context.Context, in *C2S_CancelJobReq, opts ...grpc.CallOption) (*S2C_CancelJobRpn, error)
}

type transformV2Client struct {
	cc grpc.ClientConnInterface
}

func NewTransformV2Client(cc grpc.ClientConnInterface) TransformV2Client {
	return &transformV2Client{cc}
}

func (c *transformV2Client) CreateJob(ctx context.Context, in *C2S_CreateJobReq, opts ...grpc.CallOption) (*S2C_CreateJobRpn, error) {
	out := new(S2C_CreateJobRpn)
	err := c.cc.Invoke(ctx, "/TransformService2.TransformV2/CreateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transformV2Client) GetJobInfo(ctx context.Context, in *C2S_GetJobInfoReq, opts ...grpc.CallOption) (*S2C_GetJobInfoRpn, error) {
	out := new(S2C_GetJobInfoRpn)
	err := c.cc.Invoke(ctx, "/TransformService2.TransformV2/GetJobInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transformV2Client) CancelJob(ctx context.Context, in *C2S_CancelJobReq, opts ...grpc.CallOption) (*S2C_CancelJobRpn, error) {
	out := new(S2C_CancelJobRpn)
	err := c.cc.Invoke(ctx, "/TransformService2.TransformV2/CancelJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransformV2Server is the server API for TransformV2 service.
// All implementations must embed UnimplementedTransformV2Server
// for forward compatibility
type TransformV2Server interface {
	CreateJob(context.Context, *C2S_CreateJobReq) (*S2C_CreateJobRpn, error)
	GetJobInfo(context.Context, *C2S_GetJobInfoReq) (*S2C_GetJobInfoRpn, error)
	CancelJob(context.Context, *C2S_CancelJobReq) (*S2C_CancelJobRpn, error)
	mustEmbedUnimplementedTransformV2Server()
}

// UnimplementedTransformV2Server must be embedded to have forward compatible implementations.
type UnimplementedTransformV2Server struct {
}

func (UnimplementedTransformV2Server) CreateJob(context.Context, *C2S_CreateJobReq) (*S2C_CreateJobRpn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJob not implemented")
}
func (UnimplementedTransformV2Server) GetJobInfo(context.Context, *C2S_GetJobInfoReq) (*S2C_GetJobInfoRpn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobInfo not implemented")
}
func (UnimplementedTransformV2Server) CancelJob(context.Context, *C2S_CancelJobReq) (*S2C_CancelJobRpn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelJob not implemented")
}
func (UnimplementedTransformV2Server) mustEmbedUnimplementedTransformV2Server() {}

// UnsafeTransformV2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransformV2Server will
// result in compilation errors.
type UnsafeTransformV2Server interface {
	mustEmbedUnimplementedTransformV2Server()
}

func RegisterTransformV2Server(s grpc.ServiceRegistrar, srv TransformV2Server) {
	s.RegisterService(&TransformV2_ServiceDesc, srv)
}

func _TransformV2_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_CreateJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformV2Server).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransformService2.TransformV2/CreateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformV2Server).CreateJob(ctx, req.(*C2S_CreateJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransformV2_GetJobInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_GetJobInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformV2Server).GetJobInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransformService2.TransformV2/GetJobInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformV2Server).GetJobInfo(ctx, req.(*C2S_GetJobInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransformV2_CancelJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_CancelJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformV2Server).CancelJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransformService2.TransformV2/CancelJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformV2Server).CancelJob(ctx, req.(*C2S_CancelJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TransformV2_ServiceDesc is the grpc.ServiceDesc for TransformV2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransformV2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TransformService2.TransformV2",
	HandlerType: (*TransformV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJob",
			Handler:    _TransformV2_CreateJob_Handler,
		},
		{
			MethodName: "GetJobInfo",
			Handler:    _TransformV2_GetJobInfo_Handler,
		},
		{
			MethodName: "CancelJob",
			Handler:    _TransformV2_CancelJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "TransformService2.proto",
}

// TenantManagementClient is the client API for TenantManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TenantManagementClient interface {
	SetTenantConfig(ctx context.Context, in *C2S_SetTanentConfigReqT, opts ...grpc.CallOption) (*C2S_SetTanentConfigRpnT, error)
	SetDefaultTenantConfig(ctx context.Context, in *C2S_SetTanentConfigReqT, opts ...grpc.CallOption) (*C2S_SetTanentConfigRpnT, error)
}

type tenantManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewTenantManagementClient(cc grpc.ClientConnInterface) TenantManagementClient {
	return &tenantManagementClient{cc}
}

func (c *tenantManagementClient) SetTenantConfig(ctx context.Context, in *C2S_SetTanentConfigReqT, opts ...grpc.CallOption) (*C2S_SetTanentConfigRpnT, error) {
	out := new(C2S_SetTanentConfigRpnT)
	err := c.cc.Invoke(ctx, "/TransformService2.TenantManagement/SetTenantConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantManagementClient) SetDefaultTenantConfig(ctx context.Context, in *C2S_SetTanentConfigReqT, opts ...grpc.CallOption) (*C2S_SetTanentConfigRpnT, error) {
	out := new(C2S_SetTanentConfigRpnT)
	err := c.cc.Invoke(ctx, "/TransformService2.TenantManagement/SetDefaultTenantConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenantManagementServer is the server API for TenantManagement service.
// All implementations must embed UnimplementedTenantManagementServer
// for forward compatibility
type TenantManagementServer interface {
	SetTenantConfig(context.Context, *C2S_SetTanentConfigReqT) (*C2S_SetTanentConfigRpnT, error)
	SetDefaultTenantConfig(context.Context, *C2S_SetTanentConfigReqT) (*C2S_SetTanentConfigRpnT, error)
	mustEmbedUnimplementedTenantManagementServer()
}

// UnimplementedTenantManagementServer must be embedded to have forward compatible implementations.
type UnimplementedTenantManagementServer struct {
}

func (UnimplementedTenantManagementServer) SetTenantConfig(context.Context, *C2S_SetTanentConfigReqT) (*C2S_SetTanentConfigRpnT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTenantConfig not implemented")
}
func (UnimplementedTenantManagementServer) SetDefaultTenantConfig(context.Context, *C2S_SetTanentConfigReqT) (*C2S_SetTanentConfigRpnT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultTenantConfig not implemented")
}
func (UnimplementedTenantManagementServer) mustEmbedUnimplementedTenantManagementServer() {}

// UnsafeTenantManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenantManagementServer will
// result in compilation errors.
type UnsafeTenantManagementServer interface {
	mustEmbedUnimplementedTenantManagementServer()
}

func RegisterTenantManagementServer(s grpc.ServiceRegistrar, srv TenantManagementServer) {
	s.RegisterService(&TenantManagement_ServiceDesc, srv)
}

func _TenantManagement_SetTenantConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_SetTanentConfigReqT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManagementServer).SetTenantConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransformService2.TenantManagement/SetTenantConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManagementServer).SetTenantConfig(ctx, req.(*C2S_SetTanentConfigReqT))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantManagement_SetDefaultTenantConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_SetTanentConfigReqT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManagementServer).SetDefaultTenantConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransformService2.TenantManagement/SetDefaultTenantConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManagementServer).SetDefaultTenantConfig(ctx, req.(*C2S_SetTanentConfigReqT))
	}
	return interceptor(ctx, in, info, handler)
}

// TenantManagement_ServiceDesc is the grpc.ServiceDesc for TenantManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TenantManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TransformService2.TenantManagement",
	HandlerType: (*TenantManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetTenantConfig",
			Handler:    _TenantManagement_SetTenantConfig_Handler,
		},
		{
			MethodName: "SetDefaultTenantConfig",
			Handler:    _TenantManagement_SetDefaultTenantConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "TransformService2.proto",
}

// JobManagementClient is the client API for JobManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobManagementClient interface {
	AddJobType(ctx context.Context, in *C2S_AddJobTypeReqT, opts ...grpc.CallOption) (*S2C_AddJobTypeRpnT, error)
	RemoveJobType(ctx context.Context, in *C2S_RemoveJobTypeReqT, opts ...grpc.CallOption) (*S2C_RemoveJobTypeRpnT, error)
	SetJobType(ctx context.Context, in *C2S_SetJobTypeReqT, opts ...grpc.CallOption) (*S2C_SetJobTypeRpnT, error)
	GetJobType(ctx context.Context, in *C2S_GetJobTypeReqT, opts ...grpc.CallOption) (*C2S_GetJobTypeRpnT, error)
	QueryJobType(ctx context.Context, in *C2S_QueryJobTypeReqT, opts ...grpc.CallOption) (*C2S_QueryJobTypeRpnT, error)
	// Job Set Interfaces
	AddJobSet(ctx context.Context, in *C2S_AddJobSetReqT, opts ...grpc.CallOption) (*C2S_AddJobSetRpnT, error)
	RemoveJobSet(ctx context.Context, in *C2S_RemoveJobSetReqT, opts ...grpc.CallOption) (*C2S_RemoveJobSetRpnT, error)
	SetJobSet(ctx context.Context, in *C2S_SetJobSetReqT, opts ...grpc.CallOption) (*C2S_SetJobSetRpnT, error)
	GetJobSet(ctx context.Context, in *C2S_GetJobSetReqT, opts ...grpc.CallOption) (*C2S_GetJobSetRpnT, error)
	QueryJobSet(ctx context.Context, in *C2S_QueryJobSetReqT, opts ...grpc.CallOption) (*C2S_QueryJobSetRpnT, error)
	SetJobFixedArguments(ctx context.Context, in *C2S_SetJobFixedArgumentsReqT, opts ...grpc.CallOption) (*C2S_SetJobFixedArgumentsRpnT, error)
}

type jobManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewJobManagementClient(cc grpc.ClientConnInterface) JobManagementClient {
	return &jobManagementClient{cc}
}

func (c *jobManagementClient) AddJobType(ctx context.Context, in *C2S_AddJobTypeReqT, opts ...grpc.CallOption) (*S2C_AddJobTypeRpnT, error) {
	out := new(S2C_AddJobTypeRpnT)
	err := c.cc.Invoke(ctx, "/TransformService2.JobManagement/AddJobType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) RemoveJobType(ctx context.Context, in *C2S_RemoveJobTypeReqT, opts ...grpc.CallOption) (*S2C_RemoveJobTypeRpnT, error) {
	out := new(S2C_RemoveJobTypeRpnT)
	err := c.cc.Invoke(ctx, "/TransformService2.JobManagement/RemoveJobType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) SetJobType(ctx context.Context, in *C2S_SetJobTypeReqT, opts ...grpc.CallOption) (*S2C_SetJobTypeRpnT, error) {
	out := new(S2C_SetJobTypeRpnT)
	err := c.cc.Invoke(ctx, "/TransformService2.JobManagement/SetJobType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) GetJobType(ctx context.Context, in *C2S_GetJobTypeReqT, opts ...grpc.CallOption) (*C2S_GetJobTypeRpnT, error) {
	out := new(C2S_GetJobTypeRpnT)
	err := c.cc.Invoke(ctx, "/TransformService2.JobManagement/GetJobType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) QueryJobType(ctx context.Context, in *C2S_QueryJobTypeReqT, opts ...grpc.CallOption) (*C2S_QueryJobTypeRpnT, error) {
	out := new(C2S_QueryJobTypeRpnT)
	err := c.cc.Invoke(ctx, "/TransformService2.JobManagement/QueryJobType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) AddJobSet(ctx context.Context, in *C2S_AddJobSetReqT, opts ...grpc.CallOption) (*C2S_AddJobSetRpnT, error) {
	out := new(C2S_AddJobSetRpnT)
	err := c.cc.Invoke(ctx, "/TransformService2.JobManagement/AddJobSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) RemoveJobSet(ctx context.Context, in *C2S_RemoveJobSetReqT, opts ...grpc.CallOption) (*C2S_RemoveJobSetRpnT, error) {
	out := new(C2S_RemoveJobSetRpnT)
	err := c.cc.Invoke(ctx, "/TransformService2.JobManagement/RemoveJobSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) SetJobSet(ctx context.Context, in *C2S_SetJobSetReqT, opts ...grpc.CallOption) (*C2S_SetJobSetRpnT, error) {
	out := new(C2S_SetJobSetRpnT)
	err := c.cc.Invoke(ctx, "/TransformService2.JobManagement/SetJobSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) GetJobSet(ctx context.Context, in *C2S_GetJobSetReqT, opts ...grpc.CallOption) (*C2S_GetJobSetRpnT, error) {
	out := new(C2S_GetJobSetRpnT)
	err := c.cc.Invoke(ctx, "/TransformService2.JobManagement/GetJobSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) QueryJobSet(ctx context.Context, in *C2S_QueryJobSetReqT, opts ...grpc.CallOption) (*C2S_QueryJobSetRpnT, error) {
	out := new(C2S_QueryJobSetRpnT)
	err := c.cc.Invoke(ctx, "/TransformService2.JobManagement/QueryJobSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) SetJobFixedArguments(ctx context.Context, in *C2S_SetJobFixedArgumentsReqT, opts ...grpc.CallOption) (*C2S_SetJobFixedArgumentsRpnT, error) {
	out := new(C2S_SetJobFixedArgumentsRpnT)
	err := c.cc.Invoke(ctx, "/TransformService2.JobManagement/SetJobFixedArguments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobManagementServer is the server API for JobManagement service.
// All implementations must embed UnimplementedJobManagementServer
// for forward compatibility
type JobManagementServer interface {
	AddJobType(context.Context, *C2S_AddJobTypeReqT) (*S2C_AddJobTypeRpnT, error)
	RemoveJobType(context.Context, *C2S_RemoveJobTypeReqT) (*S2C_RemoveJobTypeRpnT, error)
	SetJobType(context.Context, *C2S_SetJobTypeReqT) (*S2C_SetJobTypeRpnT, error)
	GetJobType(context.Context, *C2S_GetJobTypeReqT) (*C2S_GetJobTypeRpnT, error)
	QueryJobType(context.Context, *C2S_QueryJobTypeReqT) (*C2S_QueryJobTypeRpnT, error)
	// Job Set Interfaces
	AddJobSet(context.Context, *C2S_AddJobSetReqT) (*C2S_AddJobSetRpnT, error)
	RemoveJobSet(context.Context, *C2S_RemoveJobSetReqT) (*C2S_RemoveJobSetRpnT, error)
	SetJobSet(context.Context, *C2S_SetJobSetReqT) (*C2S_SetJobSetRpnT, error)
	GetJobSet(context.Context, *C2S_GetJobSetReqT) (*C2S_GetJobSetRpnT, error)
	QueryJobSet(context.Context, *C2S_QueryJobSetReqT) (*C2S_QueryJobSetRpnT, error)
	SetJobFixedArguments(context.Context, *C2S_SetJobFixedArgumentsReqT) (*C2S_SetJobFixedArgumentsRpnT, error)
	mustEmbedUnimplementedJobManagementServer()
}

// UnimplementedJobManagementServer must be embedded to have forward compatible implementations.
type UnimplementedJobManagementServer struct {
}

func (UnimplementedJobManagementServer) AddJobType(context.Context, *C2S_AddJobTypeReqT) (*S2C_AddJobTypeRpnT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddJobType not implemented")
}
func (UnimplementedJobManagementServer) RemoveJobType(context.Context, *C2S_RemoveJobTypeReqT) (*S2C_RemoveJobTypeRpnT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveJobType not implemented")
}
func (UnimplementedJobManagementServer) SetJobType(context.Context, *C2S_SetJobTypeReqT) (*S2C_SetJobTypeRpnT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetJobType not implemented")
}
func (UnimplementedJobManagementServer) GetJobType(context.Context, *C2S_GetJobTypeReqT) (*C2S_GetJobTypeRpnT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobType not implemented")
}
func (UnimplementedJobManagementServer) QueryJobType(context.Context, *C2S_QueryJobTypeReqT) (*C2S_QueryJobTypeRpnT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryJobType not implemented")
}
func (UnimplementedJobManagementServer) AddJobSet(context.Context, *C2S_AddJobSetReqT) (*C2S_AddJobSetRpnT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddJobSet not implemented")
}
func (UnimplementedJobManagementServer) RemoveJobSet(context.Context, *C2S_RemoveJobSetReqT) (*C2S_RemoveJobSetRpnT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveJobSet not implemented")
}
func (UnimplementedJobManagementServer) SetJobSet(context.Context, *C2S_SetJobSetReqT) (*C2S_SetJobSetRpnT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetJobSet not implemented")
}
func (UnimplementedJobManagementServer) GetJobSet(context.Context, *C2S_GetJobSetReqT) (*C2S_GetJobSetRpnT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobSet not implemented")
}
func (UnimplementedJobManagementServer) QueryJobSet(context.Context, *C2S_QueryJobSetReqT) (*C2S_QueryJobSetRpnT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryJobSet not implemented")
}
func (UnimplementedJobManagementServer) SetJobFixedArguments(context.Context, *C2S_SetJobFixedArgumentsReqT) (*C2S_SetJobFixedArgumentsRpnT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetJobFixedArguments not implemented")
}
func (UnimplementedJobManagementServer) mustEmbedUnimplementedJobManagementServer() {}

// UnsafeJobManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobManagementServer will
// result in compilation errors.
type UnsafeJobManagementServer interface {
	mustEmbedUnimplementedJobManagementServer()
}

func RegisterJobManagementServer(s grpc.ServiceRegistrar, srv JobManagementServer) {
	s.RegisterService(&JobManagement_ServiceDesc, srv)
}

func _JobManagement_AddJobType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_AddJobTypeReqT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).AddJobType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransformService2.JobManagement/AddJobType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).AddJobType(ctx, req.(*C2S_AddJobTypeReqT))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_RemoveJobType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_RemoveJobTypeReqT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).RemoveJobType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransformService2.JobManagement/RemoveJobType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).RemoveJobType(ctx, req.(*C2S_RemoveJobTypeReqT))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_SetJobType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_SetJobTypeReqT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).SetJobType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransformService2.JobManagement/SetJobType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).SetJobType(ctx, req.(*C2S_SetJobTypeReqT))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_GetJobType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_GetJobTypeReqT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).GetJobType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransformService2.JobManagement/GetJobType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).GetJobType(ctx, req.(*C2S_GetJobTypeReqT))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_QueryJobType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_QueryJobTypeReqT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).QueryJobType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransformService2.JobManagement/QueryJobType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).QueryJobType(ctx, req.(*C2S_QueryJobTypeReqT))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_AddJobSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_AddJobSetReqT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).AddJobSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransformService2.JobManagement/AddJobSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).AddJobSet(ctx, req.(*C2S_AddJobSetReqT))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_RemoveJobSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_RemoveJobSetReqT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).RemoveJobSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransformService2.JobManagement/RemoveJobSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).RemoveJobSet(ctx, req.(*C2S_RemoveJobSetReqT))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_SetJobSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_SetJobSetReqT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).SetJobSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransformService2.JobManagement/SetJobSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).SetJobSet(ctx, req.(*C2S_SetJobSetReqT))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_GetJobSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_GetJobSetReqT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).GetJobSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransformService2.JobManagement/GetJobSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).GetJobSet(ctx, req.(*C2S_GetJobSetReqT))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_QueryJobSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_QueryJobSetReqT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).QueryJobSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransformService2.JobManagement/QueryJobSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).QueryJobSet(ctx, req.(*C2S_QueryJobSetReqT))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_SetJobFixedArguments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_SetJobFixedArgumentsReqT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).SetJobFixedArguments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransformService2.JobManagement/SetJobFixedArguments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).SetJobFixedArguments(ctx, req.(*C2S_SetJobFixedArgumentsReqT))
	}
	return interceptor(ctx, in, info, handler)
}

// JobManagement_ServiceDesc is the grpc.ServiceDesc for JobManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TransformService2.JobManagement",
	HandlerType: (*JobManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddJobType",
			Handler:    _JobManagement_AddJobType_Handler,
		},
		{
			MethodName: "RemoveJobType",
			Handler:    _JobManagement_RemoveJobType_Handler,
		},
		{
			MethodName: "SetJobType",
			Handler:    _JobManagement_SetJobType_Handler,
		},
		{
			MethodName: "GetJobType",
			Handler:    _JobManagement_GetJobType_Handler,
		},
		{
			MethodName: "QueryJobType",
			Handler:    _JobManagement_QueryJobType_Handler,
		},
		{
			MethodName: "AddJobSet",
			Handler:    _JobManagement_AddJobSet_Handler,
		},
		{
			MethodName: "RemoveJobSet",
			Handler:    _JobManagement_RemoveJobSet_Handler,
		},
		{
			MethodName: "SetJobSet",
			Handler:    _JobManagement_SetJobSet_Handler,
		},
		{
			MethodName: "GetJobSet",
			Handler:    _JobManagement_GetJobSet_Handler,
		},
		{
			MethodName: "QueryJobSet",
			Handler:    _JobManagement_QueryJobSet_Handler,
		},
		{
			MethodName: "SetJobFixedArguments",
			Handler:    _JobManagement_SetJobFixedArguments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "TransformService2.proto",
}

// ResourcePoolManagementClient is the client API for ResourcePoolManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourcePoolManagementClient interface {
	AddResourcePool(ctx context.Context, in *C2S_AddResourcePoolReqT, opts ...grpc.CallOption) (*C2S_AddResourcePoolRpnT, error)
	RemoveResourcePool(ctx context.Context, in *C2S_RemoveResourcePoolReqT, opts ...grpc.CallOption) (*C2S_RemoveResourcePoolRpnT, error)
	SetResourcePool(ctx context.Context, in *C2S_SetResourcePoolReqT, opts ...grpc.CallOption) (*C2S_SetResourcePoolRpnT, error)
	GetResourcePool(ctx context.Context, in *C2S_GetResourcePoolReqT, opts ...grpc.CallOption) (*C2S_GetResourcePoolRpnT, error)
	QueryResourcePool(ctx context.Context, in *C2S_QueryResourcePoolReqT, opts ...grpc.CallOption) (*C2S_QueryResourcePoolRpnT, error)
}

type resourcePoolManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewResourcePoolManagementClient(cc grpc.ClientConnInterface) ResourcePoolManagementClient {
	return &resourcePoolManagementClient{cc}
}

func (c *resourcePoolManagementClient) AddResourcePool(ctx context.Context, in *C2S_AddResourcePoolReqT, opts ...grpc.CallOption) (*C2S_AddResourcePoolRpnT, error) {
	out := new(C2S_AddResourcePoolRpnT)
	err := c.cc.Invoke(ctx, "/TransformService2.ResourcePoolManagement/AddResourcePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcePoolManagementClient) RemoveResourcePool(ctx context.Context, in *C2S_RemoveResourcePoolReqT, opts ...grpc.CallOption) (*C2S_RemoveResourcePoolRpnT, error) {
	out := new(C2S_RemoveResourcePoolRpnT)
	err := c.cc.Invoke(ctx, "/TransformService2.ResourcePoolManagement/RemoveResourcePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcePoolManagementClient) SetResourcePool(ctx context.Context, in *C2S_SetResourcePoolReqT, opts ...grpc.CallOption) (*C2S_SetResourcePoolRpnT, error) {
	out := new(C2S_SetResourcePoolRpnT)
	err := c.cc.Invoke(ctx, "/TransformService2.ResourcePoolManagement/SetResourcePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcePoolManagementClient) GetResourcePool(ctx context.Context, in *C2S_GetResourcePoolReqT, opts ...grpc.CallOption) (*C2S_GetResourcePoolRpnT, error) {
	out := new(C2S_GetResourcePoolRpnT)
	err := c.cc.Invoke(ctx, "/TransformService2.ResourcePoolManagement/GetResourcePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcePoolManagementClient) QueryResourcePool(ctx context.Context, in *C2S_QueryResourcePoolReqT, opts ...grpc.CallOption) (*C2S_QueryResourcePoolRpnT, error) {
	out := new(C2S_QueryResourcePoolRpnT)
	err := c.cc.Invoke(ctx, "/TransformService2.ResourcePoolManagement/QueryResourcePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourcePoolManagementServer is the server API for ResourcePoolManagement service.
// All implementations must embed UnimplementedResourcePoolManagementServer
// for forward compatibility
type ResourcePoolManagementServer interface {
	AddResourcePool(context.Context, *C2S_AddResourcePoolReqT) (*C2S_AddResourcePoolRpnT, error)
	RemoveResourcePool(context.Context, *C2S_RemoveResourcePoolReqT) (*C2S_RemoveResourcePoolRpnT, error)
	SetResourcePool(context.Context, *C2S_SetResourcePoolReqT) (*C2S_SetResourcePoolRpnT, error)
	GetResourcePool(context.Context, *C2S_GetResourcePoolReqT) (*C2S_GetResourcePoolRpnT, error)
	QueryResourcePool(context.Context, *C2S_QueryResourcePoolReqT) (*C2S_QueryResourcePoolRpnT, error)
	mustEmbedUnimplementedResourcePoolManagementServer()
}

// UnimplementedResourcePoolManagementServer must be embedded to have forward compatible implementations.
type UnimplementedResourcePoolManagementServer struct {
}

func (UnimplementedResourcePoolManagementServer) AddResourcePool(context.Context, *C2S_AddResourcePoolReqT) (*C2S_AddResourcePoolRpnT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResourcePool not implemented")
}
func (UnimplementedResourcePoolManagementServer) RemoveResourcePool(context.Context, *C2S_RemoveResourcePoolReqT) (*C2S_RemoveResourcePoolRpnT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveResourcePool not implemented")
}
func (UnimplementedResourcePoolManagementServer) SetResourcePool(context.Context, *C2S_SetResourcePoolReqT) (*C2S_SetResourcePoolRpnT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetResourcePool not implemented")
}
func (UnimplementedResourcePoolManagementServer) GetResourcePool(context.Context, *C2S_GetResourcePoolReqT) (*C2S_GetResourcePoolRpnT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourcePool not implemented")
}
func (UnimplementedResourcePoolManagementServer) QueryResourcePool(context.Context, *C2S_QueryResourcePoolReqT) (*C2S_QueryResourcePoolRpnT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryResourcePool not implemented")
}
func (UnimplementedResourcePoolManagementServer) mustEmbedUnimplementedResourcePoolManagementServer() {
}

// UnsafeResourcePoolManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourcePoolManagementServer will
// result in compilation errors.
type UnsafeResourcePoolManagementServer interface {
	mustEmbedUnimplementedResourcePoolManagementServer()
}

func RegisterResourcePoolManagementServer(s grpc.ServiceRegistrar, srv ResourcePoolManagementServer) {
	s.RegisterService(&ResourcePoolManagement_ServiceDesc, srv)
}

func _ResourcePoolManagement_AddResourcePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_AddResourcePoolReqT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcePoolManagementServer).AddResourcePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransformService2.ResourcePoolManagement/AddResourcePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcePoolManagementServer).AddResourcePool(ctx, req.(*C2S_AddResourcePoolReqT))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourcePoolManagement_RemoveResourcePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_RemoveResourcePoolReqT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcePoolManagementServer).RemoveResourcePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransformService2.ResourcePoolManagement/RemoveResourcePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcePoolManagementServer).RemoveResourcePool(ctx, req.(*C2S_RemoveResourcePoolReqT))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourcePoolManagement_SetResourcePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_SetResourcePoolReqT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcePoolManagementServer).SetResourcePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransformService2.ResourcePoolManagement/SetResourcePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcePoolManagementServer).SetResourcePool(ctx, req.(*C2S_SetResourcePoolReqT))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourcePoolManagement_GetResourcePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_GetResourcePoolReqT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcePoolManagementServer).GetResourcePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransformService2.ResourcePoolManagement/GetResourcePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcePoolManagementServer).GetResourcePool(ctx, req.(*C2S_GetResourcePoolReqT))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourcePoolManagement_QueryResourcePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_QueryResourcePoolReqT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcePoolManagementServer).QueryResourcePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransformService2.ResourcePoolManagement/QueryResourcePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcePoolManagementServer).QueryResourcePool(ctx, req.(*C2S_QueryResourcePoolReqT))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourcePoolManagement_ServiceDesc is the grpc.ServiceDesc for ResourcePoolManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourcePoolManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TransformService2.ResourcePoolManagement",
	HandlerType: (*ResourcePoolManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddResourcePool",
			Handler:    _ResourcePoolManagement_AddResourcePool_Handler,
		},
		{
			MethodName: "RemoveResourcePool",
			Handler:    _ResourcePoolManagement_RemoveResourcePool_Handler,
		},
		{
			MethodName: "SetResourcePool",
			Handler:    _ResourcePoolManagement_SetResourcePool_Handler,
		},
		{
			MethodName: "GetResourcePool",
			Handler:    _ResourcePoolManagement_GetResourcePool_Handler,
		},
		{
			MethodName: "QueryResourcePool",
			Handler:    _ResourcePoolManagement_QueryResourcePool_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "TransformService2.proto",
}
