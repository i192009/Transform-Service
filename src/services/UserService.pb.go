// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.1
// source: UserService.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 用户对应账户信息
type AccountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source   string `protobuf:"bytes,10,opt,name=source,proto3" json:"source,omitempty"`     // 用户对应的账号来源
	SourceId string `protobuf:"bytes,20,opt,name=sourceId,proto3" json:"sourceId,omitempty"` // 账号Id
}

func (x *AccountInfo) Reset() {
	*x = AccountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountInfo) ProtoMessage() {}

func (x *AccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountInfo.ProtoReflect.Descriptor instead.
func (*AccountInfo) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{0}
}

func (x *AccountInfo) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *AccountInfo) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

// 公司信息
type Organization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Company string `protobuf:"bytes,10,opt,name=company,proto3" json:"company,omitempty"` // 公司名称
	Title   string `protobuf:"bytes,20,opt,name=title,proto3" json:"title,omitempty"`     // 头衔
	Name    string `protobuf:"bytes,30,opt,name=name,proto3" json:"name,omitempty"`       // 员工姓名
	Phone   string `protobuf:"bytes,40,opt,name=phone,proto3" json:"phone,omitempty"`     // 联系方式
	Address string `protobuf:"bytes,50,opt,name=address,proto3" json:"address,omitempty"` // 公司地址
}

func (x *Organization) Reset() {
	*x = Organization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organization) ProtoMessage() {}

func (x *Organization) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organization.ProtoReflect.Descriptor instead.
func (*Organization) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{1}
}

func (x *Organization) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *Organization) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Organization) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Organization) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Organization) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// 用户非敏信息
type PlainUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string        `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`                       // 中文名
	EnName       *string       `protobuf:"bytes,20,opt,name=enName,proto3,oneof" json:"enName,omitempty"`             // 英文名
	Gender       *int32        `protobuf:"varint,30,opt,name=gender,proto3,oneof" json:"gender,omitempty"`            // male-男性 female-女性
	Organization *Organization `protobuf:"bytes,40,opt,name=organization,proto3,oneof" json:"organization,omitempty"` // 公司组织
	// 头像
	// 与http请求不同，grpc返回时不会将头像自动转换为obs链接，以防调用方需要对原始文件名进一步存储，存储obs链接将会失效
	Avatar       *string `protobuf:"bytes,50,opt,name=avatar,proto3,oneof" json:"avatar,omitempty"`
	AvatarBig    *string `protobuf:"bytes,51,opt,name=avatarBig,proto3,oneof" json:"avatarBig,omitempty"`
	AvatarMiddle *string `protobuf:"bytes,52,opt,name=avatarMiddle,proto3,oneof" json:"avatarMiddle,omitempty"`
	AvatarThumb  *string `protobuf:"bytes,53,opt,name=avatarThumb,proto3,oneof" json:"avatarThumb,omitempty"`
}

func (x *PlainUserInfo) Reset() {
	*x = PlainUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlainUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlainUserInfo) ProtoMessage() {}

func (x *PlainUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlainUserInfo.ProtoReflect.Descriptor instead.
func (*PlainUserInfo) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{2}
}

func (x *PlainUserInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlainUserInfo) GetEnName() string {
	if x != nil && x.EnName != nil {
		return *x.EnName
	}
	return ""
}

func (x *PlainUserInfo) GetGender() int32 {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return 0
}

func (x *PlainUserInfo) GetOrganization() *Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *PlainUserInfo) GetAvatar() string {
	if x != nil && x.Avatar != nil {
		return *x.Avatar
	}
	return ""
}

func (x *PlainUserInfo) GetAvatarBig() string {
	if x != nil && x.AvatarBig != nil {
		return *x.AvatarBig
	}
	return ""
}

func (x *PlainUserInfo) GetAvatarMiddle() string {
	if x != nil && x.AvatarMiddle != nil {
		return *x.AvatarMiddle
	}
	return ""
}

func (x *PlainUserInfo) GetAvatarThumb() string {
	if x != nil && x.AvatarThumb != nil {
		return *x.AvatarThumb
	}
	return ""
}

// 用户敏感信息
type SensitiveUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone    *string `protobuf:"bytes,41,opt,name=phone,proto3,oneof" json:"phone,omitempty"`       // 联系方式-手机号码. 联系方式修改时需要验证码认证，仅全局用户信息中有，各应用均继承本信息
	Email    *string `protobuf:"bytes,42,opt,name=email,proto3,oneof" json:"email,omitempty"`       // 联系方式-邮箱. 联系方式修改时需要验证码认证，仅全局用户信息中有，各应用均继承本信息
	RealName *string `protobuf:"bytes,43,opt,name=realName,proto3,oneof" json:"realName,omitempty"` // 实名
	IdCard   *string `protobuf:"bytes,44,opt,name=idCard,proto3,oneof" json:"idCard,omitempty"`     // 身份证号
}

func (x *SensitiveUserInfo) Reset() {
	*x = SensitiveUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensitiveUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensitiveUserInfo) ProtoMessage() {}

func (x *SensitiveUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensitiveUserInfo.ProtoReflect.Descriptor instead.
func (*SensitiveUserInfo) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{3}
}

func (x *SensitiveUserInfo) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *SensitiveUserInfo) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *SensitiveUserInfo) GetRealName() string {
	if x != nil && x.RealName != nil {
		return *x.RealName
	}
	return ""
}

func (x *SensitiveUserInfo) GetIdCard() string {
	if x != nil && x.IdCard != nil {
		return *x.IdCard
	}
	return ""
}

// 查询用户列表时返回的最简用户信息
type MicroUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          string         `protobuf:"bytes,10,opt,name=userId,proto3" json:"userId,omitempty"`                          // 用户userId
	EmployeeId      string         `protobuf:"bytes,11,opt,name=employeeId,proto3" json:"employeeId,omitempty"`                  // 如果返回信息中此字段不为0，说明用户在该租户下有自定义信息，且已叠加在内
	OpenId          string         `protobuf:"bytes,12,opt,name=openId,proto3" json:"openId,omitempty"`                          // 如果返回信息中此字段不为0，说明用户在该应用下有自定义信息，且已叠加在内
	UnionId         string         `protobuf:"bytes,13,opt,name=unionId,proto3" json:"unionId,omitempty"`                        // 如果返回信息中此字段不为0，说明用户在该应用下有自定义信息，且已叠加在内
	Name            string         `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`                              // 昵称(中文名）
	Phone           string         `protobuf:"bytes,15,opt,name=phone,proto3" json:"phone,omitempty"`                            // 手机号码
	Email           string         `protobuf:"bytes,16,opt,name=email,proto3" json:"email,omitempty"`                            // 邮箱
	AccountInfos    []*AccountInfo `protobuf:"bytes,17,rep,name=accountInfos,proto3" json:"accountInfos,omitempty"`              // 用户对应账户在账户系统中的信息，主要用于存储第三方账户openId
	CreateTimeStamp *int64         `protobuf:"varint,18,opt,name=createTimeStamp,proto3,oneof" json:"createTimeStamp,omitempty"` // 创建时间，即注册时间
	LoginTimeStamp  *int64         `protobuf:"varint,19,opt,name=loginTimeStamp,proto3,oneof" json:"loginTimeStamp,omitempty"`   // 上次登录时间
}

func (x *MicroUser) Reset() {
	*x = MicroUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MicroUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MicroUser) ProtoMessage() {}

func (x *MicroUser) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MicroUser.ProtoReflect.Descriptor instead.
func (*MicroUser) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{4}
}

func (x *MicroUser) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MicroUser) GetEmployeeId() string {
	if x != nil {
		return x.EmployeeId
	}
	return ""
}

func (x *MicroUser) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *MicroUser) GetUnionId() string {
	if x != nil {
		return x.UnionId
	}
	return ""
}

func (x *MicroUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MicroUser) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *MicroUser) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *MicroUser) GetAccountInfos() []*AccountInfo {
	if x != nil {
		return x.AccountInfos
	}
	return nil
}

func (x *MicroUser) GetCreateTimeStamp() int64 {
	if x != nil && x.CreateTimeStamp != nil {
		return *x.CreateTimeStamp
	}
	return 0
}

func (x *MicroUser) GetLoginTimeStamp() int64 {
	if x != nil && x.LoginTimeStamp != nil {
		return *x.LoginTimeStamp
	}
	return 0
}

// 用户创建参数
type C2S_UserCreateV2_Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source        string             `protobuf:"bytes,10,opt,name=source,proto3" json:"source,omitempty"`               // 账号来源
	SourceId      string             `protobuf:"bytes,20,opt,name=sourceId,proto3" json:"sourceId,omitempty"`           // 账号id
	PlainInfo     *PlainUserInfo     `protobuf:"bytes,30,opt,name=plainInfo,proto3" json:"plainInfo,omitempty"`         // 用户普通信息
	SensitiveInfo *SensitiveUserInfo `protobuf:"bytes,40,opt,name=sensitiveInfo,proto3" json:"sensitiveInfo,omitempty"` // 用户敏感信息
}

func (x *C2S_UserCreateV2_Req) Reset() {
	*x = C2S_UserCreateV2_Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_UserCreateV2_Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_UserCreateV2_Req) ProtoMessage() {}

func (x *C2S_UserCreateV2_Req) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_UserCreateV2_Req.ProtoReflect.Descriptor instead.
func (*C2S_UserCreateV2_Req) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{5}
}

func (x *C2S_UserCreateV2_Req) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *C2S_UserCreateV2_Req) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *C2S_UserCreateV2_Req) GetPlainInfo() *PlainUserInfo {
	if x != nil {
		return x.PlainInfo
	}
	return nil
}

func (x *C2S_UserCreateV2_Req) GetSensitiveInfo() *SensitiveUserInfo {
	if x != nil {
		return x.SensitiveInfo
	}
	return nil
}

// 返回新建用户的uid
type S2C_UserCreateV2_Rpn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,10,opt,name=userId,proto3" json:"userId,omitempty"` // 用户物理身份id
	IsNew  bool   `protobuf:"varint,20,opt,name=isNew,proto3" json:"isNew,omitempty"`  // 是否是新创建用户（新旧用户根据source+sourceId比对），如果是新用户，将返回已有用户信息，并将此设置为false
}

func (x *S2C_UserCreateV2_Rpn) Reset() {
	*x = S2C_UserCreateV2_Rpn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_UserCreateV2_Rpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_UserCreateV2_Rpn) ProtoMessage() {}

func (x *S2C_UserCreateV2_Rpn) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_UserCreateV2_Rpn.ProtoReflect.Descriptor instead.
func (*S2C_UserCreateV2_Rpn) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{6}
}

func (x *S2C_UserCreateV2_Rpn) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *S2C_UserCreateV2_Rpn) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

// 用户创建
type C2S_JumeauxUserCreateV2_Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string  `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	AccountType   int32   `protobuf:"varint,20,opt,name=accountType,proto3" json:"accountType,omitempty"`
	AccountName   string  `protobuf:"bytes,21,opt,name=accountName,proto3" json:"accountName,omitempty"`
	AccountCreate bool    `protobuf:"varint,22,opt,name=accountCreate,proto3" json:"accountCreate,omitempty"`
	AccountPwd    *string `protobuf:"bytes,23,opt,name=accountPwd,proto3,oneof" json:"accountPwd,omitempty"`
}

func (x *C2S_JumeauxUserCreateV2_Req) Reset() {
	*x = C2S_JumeauxUserCreateV2_Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_JumeauxUserCreateV2_Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_JumeauxUserCreateV2_Req) ProtoMessage() {}

func (x *C2S_JumeauxUserCreateV2_Req) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_JumeauxUserCreateV2_Req.ProtoReflect.Descriptor instead.
func (*C2S_JumeauxUserCreateV2_Req) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{7}
}

func (x *C2S_JumeauxUserCreateV2_Req) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *C2S_JumeauxUserCreateV2_Req) GetAccountType() int32 {
	if x != nil {
		return x.AccountType
	}
	return 0
}

func (x *C2S_JumeauxUserCreateV2_Req) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *C2S_JumeauxUserCreateV2_Req) GetAccountCreate() bool {
	if x != nil {
		return x.AccountCreate
	}
	return false
}

func (x *C2S_JumeauxUserCreateV2_Req) GetAccountPwd() string {
	if x != nil && x.AccountPwd != nil {
		return *x.AccountPwd
	}
	return ""
}

// jumeaux用户创建返回值
type S2C_JumeauxUserCreateV2_Rpn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string `protobuf:"bytes,10,opt,name=userId,proto3" json:"userId,omitempty"` // 用户物理身份id
	HasAccount bool   `protobuf:"varint,20,opt,name=hasAccount,proto3" json:"hasAccount,omitempty"`
}

func (x *S2C_JumeauxUserCreateV2_Rpn) Reset() {
	*x = S2C_JumeauxUserCreateV2_Rpn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_JumeauxUserCreateV2_Rpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_JumeauxUserCreateV2_Rpn) ProtoMessage() {}

func (x *S2C_JumeauxUserCreateV2_Rpn) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_JumeauxUserCreateV2_Rpn.ProtoReflect.Descriptor instead.
func (*S2C_JumeauxUserCreateV2_Rpn) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{8}
}

func (x *S2C_JumeauxUserCreateV2_Rpn) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *S2C_JumeauxUserCreateV2_Rpn) GetHasAccount() bool {
	if x != nil {
		return x.HasAccount
	}
	return false
}

// 获取用户信息参数
type C2S_UserInfoGetV2_Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,10,opt,name=id,proto3" json:"id,omitempty"` // 用户id 支持UserId、EmployeeId、UnionId、OpenId
	// 获取信息层级(靠后的层级将包含前序层级信息)
	// 1-全局信息,支持 UserId、EmployeeId、UnionId、OpenId
	// 2-租户层用户信息,支持 EmployeeId、UnionId、OpenId
	// 3-应用层用户信息,支持 UnionId、OpenId
	InfoType int32 `protobuf:"varint,20,opt,name=infoType,proto3" json:"infoType,omitempty"`
	// 返回信息类别控制. 按位控制，不传入时默认为0，仅返回用户是否存在
	// 0x1 - 用户id信息(userId, employeeId, openId, unionId等)
	// 0x2 - 用户所处的租户、应用信息
	// 0x4 - 普通用户信息（用户名等用户画像信息）
	// 0x8 - 敏感用户信息（电话号码、邮箱、实名信息等）
	// 0x10 - 用户辅助信息（用户授权信息、账户信息等）
	// 0x20 - 用户其它信息（创建时间、修改时间等）
	InfoSelector int32 `protobuf:"varint,30,opt,name=infoSelector,proto3" json:"infoSelector,omitempty"`
	// 返回信息转换控制
	// 是否将用户头像信息转换为obs链接,不传入时默认为true
	// true - 返回的头像直接是obs链接，适用于直接向前端返回，链接有过期时间，不能用于直接存储
	// false - 返回的头像是obs存储的key，适用于服务自行存储
	ConvertObs *bool `protobuf:"varint,40,opt,name=convertObs,proto3,oneof" json:"convertObs,omitempty"`
}

func (x *C2S_UserInfoGetV2_Req) Reset() {
	*x = C2S_UserInfoGetV2_Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_UserInfoGetV2_Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_UserInfoGetV2_Req) ProtoMessage() {}

func (x *C2S_UserInfoGetV2_Req) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_UserInfoGetV2_Req.ProtoReflect.Descriptor instead.
func (*C2S_UserInfoGetV2_Req) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{9}
}

func (x *C2S_UserInfoGetV2_Req) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *C2S_UserInfoGetV2_Req) GetInfoType() int32 {
	if x != nil {
		return x.InfoType
	}
	return 0
}

func (x *C2S_UserInfoGetV2_Req) GetInfoSelector() int32 {
	if x != nil {
		return x.InfoSelector
	}
	return 0
}

func (x *C2S_UserInfoGetV2_Req) GetConvertObs() bool {
	if x != nil && x.ConvertObs != nil {
		return *x.ConvertObs
	}
	return false
}

// 用户信息返回
// exist为false时，仅errorMessage、userId字段返回
type S2C_UserInfoGetV2_Rpn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exist        bool   `protobuf:"varint,1,opt,name=exist,proto3" json:"exist,omitempty"`              // 请求用户信息是否存在
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"` // 用户不存在时的错误提示信息
	// 0x1 - 用户id信息
	UserId     string  `protobuf:"bytes,10,opt,name=userId,proto3" json:"userId,omitempty"`               // 用户物理身份id
	EmployeeId *string `protobuf:"bytes,11,opt,name=employeeId,proto3,oneof" json:"employeeId,omitempty"` // 用户租户身份id, 请求id无法识别出租户身份时，无此字段返回
	UnionId    *string `protobuf:"bytes,12,opt,name=unionId,proto3,oneof" json:"unionId,omitempty"`       // 用户应用身份unionId, 请求id无法识别出应用身份时，无此字段返回
	OpenId     *string `protobuf:"bytes,13,opt,name=openId,proto3,oneof" json:"openId,omitempty"`         // 用户应用身份openId, 请求id无法识别出应用身份时，无此字段返回
	// 0x2 - 用户所处的租户、应用信息
	TenantId *string `protobuf:"bytes,20,opt,name=tenantId,proto3,oneof" json:"tenantId,omitempty"` // 从属租户,请求的是全局信息时无返回
	AppId    *int64  `protobuf:"varint,21,opt,name=appId,proto3,oneof" json:"appId,omitempty"`      // 从属应用,请求的是全局信息、租户信息时无返回
	// 0x4 - 普通用户信息（用户名等用户画像信息）
	PlainInfo *PlainUserInfo `protobuf:"bytes,30,opt,name=plainInfo,proto3,oneof" json:"plainInfo,omitempty"`
	// 0x8 - 敏感用户信息
	SensitiveInfo *SensitiveUserInfo                   `protobuf:"bytes,40,opt,name=sensitiveInfo,proto3,oneof" json:"sensitiveInfo,omitempty"`
	AccountInfos  []*S2C_UserInfoGetV2_Rpn_AccountInfo `protobuf:"bytes,51,rep,name=accountInfos,proto3" json:"accountInfos,omitempty"` // 用户对应的账号信息
	// 0x20 - 用户辅助信息
	CreateTime *int64 `protobuf:"varint,61,opt,name=createTime,proto3,oneof" json:"createTime,omitempty"`
	ModifyTime *int64 `protobuf:"varint,62,opt,name=modifyTime,proto3,oneof" json:"modifyTime,omitempty"`
}

func (x *S2C_UserInfoGetV2_Rpn) Reset() {
	*x = S2C_UserInfoGetV2_Rpn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_UserInfoGetV2_Rpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_UserInfoGetV2_Rpn) ProtoMessage() {}

func (x *S2C_UserInfoGetV2_Rpn) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_UserInfoGetV2_Rpn.ProtoReflect.Descriptor instead.
func (*S2C_UserInfoGetV2_Rpn) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{10}
}

func (x *S2C_UserInfoGetV2_Rpn) GetExist() bool {
	if x != nil {
		return x.Exist
	}
	return false
}

func (x *S2C_UserInfoGetV2_Rpn) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *S2C_UserInfoGetV2_Rpn) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *S2C_UserInfoGetV2_Rpn) GetEmployeeId() string {
	if x != nil && x.EmployeeId != nil {
		return *x.EmployeeId
	}
	return ""
}

func (x *S2C_UserInfoGetV2_Rpn) GetUnionId() string {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return ""
}

func (x *S2C_UserInfoGetV2_Rpn) GetOpenId() string {
	if x != nil && x.OpenId != nil {
		return *x.OpenId
	}
	return ""
}

func (x *S2C_UserInfoGetV2_Rpn) GetTenantId() string {
	if x != nil && x.TenantId != nil {
		return *x.TenantId
	}
	return ""
}

func (x *S2C_UserInfoGetV2_Rpn) GetAppId() int64 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *S2C_UserInfoGetV2_Rpn) GetPlainInfo() *PlainUserInfo {
	if x != nil {
		return x.PlainInfo
	}
	return nil
}

func (x *S2C_UserInfoGetV2_Rpn) GetSensitiveInfo() *SensitiveUserInfo {
	if x != nil {
		return x.SensitiveInfo
	}
	return nil
}

func (x *S2C_UserInfoGetV2_Rpn) GetAccountInfos() []*S2C_UserInfoGetV2_Rpn_AccountInfo {
	if x != nil {
		return x.AccountInfos
	}
	return nil
}

func (x *S2C_UserInfoGetV2_Rpn) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *S2C_UserInfoGetV2_Rpn) GetModifyTime() int64 {
	if x != nil && x.ModifyTime != nil {
		return *x.ModifyTime
	}
	return 0
}

type C2S_BatchUserInfoGetV2_Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,10,rep,name=ids,proto3" json:"ids,omitempty"` // 用户id 支持UserId、EmployeeId、UnionId、OpenId，传入必须为同一类型id，且每个id对应不同用户物理身份
	// 获取信息层级(靠后的层级将包含前序层级信息)
	// 1-全局信息,支持 UserId、EmployeeId、UnionId、OpenId
	// 2-租户层用户信息,支持 EmployeeId、UnionId、OpenId
	// 3-应用层用户信息,支持 UnionId、OpenId
	InfoType int32 `protobuf:"varint,20,opt,name=infoType,proto3" json:"infoType,omitempty"`
	// 返回信息类别控制. 按位控制，不传入时默认为0，仅返回用户是否存在
	// 0x1 - 用户id信息(userId, employeeId, openId, unionId等)
	// 0x2 - 用户所处的租户、应用信息
	// 0x4 - 普通用户信息（用户名等用户画像信息）
	// 0x8 - 敏感用户信息（电话号码、邮箱、实名信息等）
	// 0x10 - 用户辅助信息（用户授权信息、账户信息等）
	// 0x20 - 用户其它信息（创建时间、修改时间等）
	InfoSelector int32 `protobuf:"varint,30,opt,name=infoSelector,proto3" json:"infoSelector,omitempty"`
	// 返回信息转换控制
	// 是否将用户头像信息转换为obs链接,不传入时默认为true
	// true - 返回的头像直接是obs链接，适用于直接向前端返回，链接有过期时间，不能用于直接存储
	// false - 返回的头像是obs存储的key，适用于服务自行存储
	ConvertObs *bool `protobuf:"varint,40,opt,name=convertObs,proto3,oneof" json:"convertObs,omitempty"`
}

func (x *C2S_BatchUserInfoGetV2_Req) Reset() {
	*x = C2S_BatchUserInfoGetV2_Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_BatchUserInfoGetV2_Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_BatchUserInfoGetV2_Req) ProtoMessage() {}

func (x *C2S_BatchUserInfoGetV2_Req) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_BatchUserInfoGetV2_Req.ProtoReflect.Descriptor instead.
func (*C2S_BatchUserInfoGetV2_Req) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{11}
}

func (x *C2S_BatchUserInfoGetV2_Req) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *C2S_BatchUserInfoGetV2_Req) GetInfoType() int32 {
	if x != nil {
		return x.InfoType
	}
	return 0
}

func (x *C2S_BatchUserInfoGetV2_Req) GetInfoSelector() int32 {
	if x != nil {
		return x.InfoSelector
	}
	return 0
}

func (x *C2S_BatchUserInfoGetV2_Req) GetConvertObs() bool {
	if x != nil && x.ConvertObs != nil {
		return *x.ConvertObs
	}
	return false
}

type S2C_BatchUserInfoGetV2_Rpn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*S2C_UserInfoGetV2_Rpn `protobuf:"bytes,10,rep,name=users,proto3" json:"users,omitempty"` // 用户信息获取失败时，该用户亦将返回，但exist为false
}

func (x *S2C_BatchUserInfoGetV2_Rpn) Reset() {
	*x = S2C_BatchUserInfoGetV2_Rpn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_BatchUserInfoGetV2_Rpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_BatchUserInfoGetV2_Rpn) ProtoMessage() {}

func (x *S2C_BatchUserInfoGetV2_Rpn) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_BatchUserInfoGetV2_Rpn.ProtoReflect.Descriptor instead.
func (*S2C_BatchUserInfoGetV2_Rpn) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{12}
}

func (x *S2C_BatchUserInfoGetV2_Rpn) GetUsers() []*S2C_UserInfoGetV2_Rpn {
	if x != nil {
		return x.Users
	}
	return nil
}

type C2S_UserInfoUpdateV2_Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,10,opt,name=id,proto3" json:"id,omitempty"` // 用户id 支持UserId、EmployeeId、UnionId、OpenId
	// 更新信息层级(靠后的层级将包含前序层级信息)
	// 1-全局信息,支持 UserId、EmployeeId、UnionId、OpenId
	// 2-租户层用户信息,支持 EmployeeId、UnionId、OpenId
	// 3-应用层用户信息,支持 UnionId、OpenId
	InfoType  int32          `protobuf:"varint,20,opt,name=infoType,proto3" json:"infoType,omitempty"`
	PlainInfo *PlainUserInfo `protobuf:"bytes,30,opt,name=plainInfo,proto3" json:"plainInfo,omitempty"` // 用户非敏信息更新参数
	// 调用方  用户更新时需要同步更新企业，如果是企业调用，不再回调企业
	// 不区分大小写organization
	InvokeService *string `protobuf:"bytes,50,opt,name=invokeService,proto3,oneof" json:"invokeService,omitempty"`
}

func (x *C2S_UserInfoUpdateV2_Req) Reset() {
	*x = C2S_UserInfoUpdateV2_Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_UserInfoUpdateV2_Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_UserInfoUpdateV2_Req) ProtoMessage() {}

func (x *C2S_UserInfoUpdateV2_Req) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_UserInfoUpdateV2_Req.ProtoReflect.Descriptor instead.
func (*C2S_UserInfoUpdateV2_Req) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{13}
}

func (x *C2S_UserInfoUpdateV2_Req) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *C2S_UserInfoUpdateV2_Req) GetInfoType() int32 {
	if x != nil {
		return x.InfoType
	}
	return 0
}

func (x *C2S_UserInfoUpdateV2_Req) GetPlainInfo() *PlainUserInfo {
	if x != nil {
		return x.PlainInfo
	}
	return nil
}

func (x *C2S_UserInfoUpdateV2_Req) GetInvokeService() string {
	if x != nil && x.InvokeService != nil {
		return *x.InvokeService
	}
	return ""
}

type C2S_IdentityCreate_Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string  `protobuf:"bytes,10,opt,name=userId,proto3" json:"userId,omitempty"`                // 用户唯一标识符,必须传入
	TenantId   string  `protobuf:"bytes,20,opt,name=tenantId,proto3" json:"tenantId,omitempty"`            // 租户id,必须传入
	AppId      *string `protobuf:"bytes,30,opt,name=appId,proto3,oneof" json:"appId,omitempty"`            // 应用id,需要生成应用身份时才传入
	AutoCreate *bool   `protobuf:"varint,40,opt,name=autoCreate,proto3,oneof" json:"autoCreate,omitempty"` // 身份不存在时，是否自动创建，默认为true，false时遇到身份不存在，将抛出异常
}

func (x *C2S_IdentityCreate_Req) Reset() {
	*x = C2S_IdentityCreate_Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_IdentityCreate_Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_IdentityCreate_Req) ProtoMessage() {}

func (x *C2S_IdentityCreate_Req) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_IdentityCreate_Req.ProtoReflect.Descriptor instead.
func (*C2S_IdentityCreate_Req) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{14}
}

func (x *C2S_IdentityCreate_Req) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *C2S_IdentityCreate_Req) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *C2S_IdentityCreate_Req) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *C2S_IdentityCreate_Req) GetAutoCreate() bool {
	if x != nil && x.AutoCreate != nil {
		return *x.AutoCreate
	}
	return false
}

type S2C_IdentityCreate_Rpn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string  `protobuf:"bytes,10,opt,name=userId,proto3" json:"userId,omitempty"`         // 用户唯一标识符
	EmployeeId string  `protobuf:"bytes,20,opt,name=employeeId,proto3" json:"employeeId,omitempty"` // 租户身份
	UnionId    *string `protobuf:"bytes,30,opt,name=unionId,proto3,oneof" json:"unionId,omitempty"` // 应用身份，传入appId时才能返回
	OpenId     *string `protobuf:"bytes,40,opt,name=openId,proto3,oneof" json:"openId,omitempty"`   // 应用身份，传入appId时才能返回
}

func (x *S2C_IdentityCreate_Rpn) Reset() {
	*x = S2C_IdentityCreate_Rpn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_IdentityCreate_Rpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_IdentityCreate_Rpn) ProtoMessage() {}

func (x *S2C_IdentityCreate_Rpn) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_IdentityCreate_Rpn.ProtoReflect.Descriptor instead.
func (*S2C_IdentityCreate_Rpn) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{15}
}

func (x *S2C_IdentityCreate_Rpn) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *S2C_IdentityCreate_Rpn) GetEmployeeId() string {
	if x != nil {
		return x.EmployeeId
	}
	return ""
}

func (x *S2C_IdentityCreate_Rpn) GetUnionId() string {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return ""
}

func (x *S2C_IdentityCreate_Rpn) GetOpenId() string {
	if x != nil && x.OpenId != nil {
		return *x.OpenId
	}
	return ""
}

type C2S_IdentitiesBatchGet_Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     []string `protobuf:"bytes,10,rep,name=userId,proto3" json:"userId,omitempty"`          // 用户唯一标识符,必须传入
	TenantId   string   `protobuf:"bytes,20,opt,name=tenantId,proto3" json:"tenantId,omitempty"`      // 租户id,必须传入
	AppId      *string  `protobuf:"bytes,30,opt,name=appId,proto3,oneof" json:"appId,omitempty"`      // 应用id,需要生成应用身份时才传入
	AutoCreate bool     `protobuf:"varint,40,opt,name=autoCreate,proto3" json:"autoCreate,omitempty"` // 如果用户租户身份,应用身份不存在,是否自动创建
}

func (x *C2S_IdentitiesBatchGet_Req) Reset() {
	*x = C2S_IdentitiesBatchGet_Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_IdentitiesBatchGet_Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_IdentitiesBatchGet_Req) ProtoMessage() {}

func (x *C2S_IdentitiesBatchGet_Req) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_IdentitiesBatchGet_Req.ProtoReflect.Descriptor instead.
func (*C2S_IdentitiesBatchGet_Req) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{16}
}

func (x *C2S_IdentitiesBatchGet_Req) GetUserId() []string {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *C2S_IdentitiesBatchGet_Req) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *C2S_IdentitiesBatchGet_Req) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *C2S_IdentitiesBatchGet_Req) GetAutoCreate() bool {
	if x != nil {
		return x.AutoCreate
	}
	return false
}

type S2C_IdentitiesBatchGet_Rpn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identities []*S2C_IdentityCreate_Rpn `protobuf:"bytes,10,rep,name=identities,proto3" json:"identities,omitempty"` // 用户身份
}

func (x *S2C_IdentitiesBatchGet_Rpn) Reset() {
	*x = S2C_IdentitiesBatchGet_Rpn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_IdentitiesBatchGet_Rpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_IdentitiesBatchGet_Rpn) ProtoMessage() {}

func (x *S2C_IdentitiesBatchGet_Rpn) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_IdentitiesBatchGet_Rpn.ProtoReflect.Descriptor instead.
func (*S2C_IdentitiesBatchGet_Rpn) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{17}
}

func (x *S2C_IdentitiesBatchGet_Rpn) GetIdentities() []*S2C_IdentityCreate_Rpn {
	if x != nil {
		return x.Identities
	}
	return nil
}

type C2S_IdentityGetByAccount_Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 控制字段
	AutoCreate bool `protobuf:"varint,1,opt,name=autoCreate,proto3" json:"autoCreate,omitempty"` // 如果用户租户身份,应用身份不存在,是否自动创建，默认为false
	// 必填字段
	AccountSource string `protobuf:"bytes,10,opt,name=accountSource,proto3" json:"accountSource,omitempty"` // 帐号来源. 支持jumeaux, feishu, weixin, dingtalk, vision-china
	AccountId     string `protobuf:"bytes,11,opt,name=accountId,proto3" json:"accountId,omitempty"`         // 帐号id. 在同一来源中帐号id唯一，jumeaux为帐号id，第三方平台为unionId，vision-china为视觉中国提供的userId
	IdentityType  int32  `protobuf:"varint,20,opt,name=identityType,proto3" json:"identityType,omitempty"`  // 请求获取的身份类型. 1-userId, 2-employeeId, 3-unionId, 4-openId，请求靠后的字段时，前序字段亦会返回
	// 选填字段
	TenantId *string `protobuf:"bytes,30,opt,name=tenantId,proto3,oneof" json:"tenantId,omitempty"` // 获取employeeId、unionId、openId时必须传入
	AppId    *string `protobuf:"bytes,40,opt,name=appId,proto3,oneof" json:"appId,omitempty"`       // 获取unionId、openId时必须传入
}

func (x *C2S_IdentityGetByAccount_Req) Reset() {
	*x = C2S_IdentityGetByAccount_Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_IdentityGetByAccount_Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_IdentityGetByAccount_Req) ProtoMessage() {}

func (x *C2S_IdentityGetByAccount_Req) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_IdentityGetByAccount_Req.ProtoReflect.Descriptor instead.
func (*C2S_IdentityGetByAccount_Req) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{18}
}

func (x *C2S_IdentityGetByAccount_Req) GetAutoCreate() bool {
	if x != nil {
		return x.AutoCreate
	}
	return false
}

func (x *C2S_IdentityGetByAccount_Req) GetAccountSource() string {
	if x != nil {
		return x.AccountSource
	}
	return ""
}

func (x *C2S_IdentityGetByAccount_Req) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *C2S_IdentityGetByAccount_Req) GetIdentityType() int32 {
	if x != nil {
		return x.IdentityType
	}
	return 0
}

func (x *C2S_IdentityGetByAccount_Req) GetTenantId() string {
	if x != nil && x.TenantId != nil {
		return *x.TenantId
	}
	return ""
}

func (x *C2S_IdentityGetByAccount_Req) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

type S2C_IdentityGetByAccount_Rpn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exist bool `protobuf:"varint,1,opt,name=exist,proto3" json:"exist,omitempty"` // 请求账户是否存在对应用户，false时下列信息均不返回
	// 以下信息，根据请求的identityType返回，请求靠后字段时，前序字段亦会返回
	UserId     *string `protobuf:"bytes,10,opt,name=userId,proto3,oneof" json:"userId,omitempty"`
	EmployeeId *string `protobuf:"bytes,20,opt,name=employeeId,proto3,oneof" json:"employeeId,omitempty"`
	UnionId    *string `protobuf:"bytes,30,opt,name=unionId,proto3,oneof" json:"unionId,omitempty"`
	OpenId     *string `protobuf:"bytes,40,opt,name=openId,proto3,oneof" json:"openId,omitempty"`
}

func (x *S2C_IdentityGetByAccount_Rpn) Reset() {
	*x = S2C_IdentityGetByAccount_Rpn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_IdentityGetByAccount_Rpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_IdentityGetByAccount_Rpn) ProtoMessage() {}

func (x *S2C_IdentityGetByAccount_Rpn) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_IdentityGetByAccount_Rpn.ProtoReflect.Descriptor instead.
func (*S2C_IdentityGetByAccount_Rpn) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{19}
}

func (x *S2C_IdentityGetByAccount_Rpn) GetExist() bool {
	if x != nil {
		return x.Exist
	}
	return false
}

func (x *S2C_IdentityGetByAccount_Rpn) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *S2C_IdentityGetByAccount_Rpn) GetEmployeeId() string {
	if x != nil && x.EmployeeId != nil {
		return *x.EmployeeId
	}
	return ""
}

func (x *S2C_IdentityGetByAccount_Rpn) GetUnionId() string {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return ""
}

func (x *S2C_IdentityGetByAccount_Rpn) GetOpenId() string {
	if x != nil && x.OpenId != nil {
		return *x.OpenId
	}
	return ""
}

type C2S_UserQueryReqT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 查询条件
	Id                   *string `protobuf:"bytes,10,opt,name=id,proto3,oneof" json:"id,omitempty"`                                      // "模糊查询各类id字段，必须携带id前缀"
	NameIgnoreLevel      *string `protobuf:"bytes,11,opt,name=nameIgnoreLevel,proto3,oneof" json:"nameIgnoreLevel,omitempty"`            // "忽略信息层级的用户名，查询全部用户信息中的用户名，不区分全局、租户、应用层级，任一匹配即可"
	RealName             *string `protobuf:"bytes,12,opt,name=realName,proto3,oneof" json:"realName,omitempty"`                          // "模糊查询实名名字字段"
	UserPhone            *string `protobuf:"bytes,13,opt,name=userPhone,proto3,oneof" json:"userPhone,omitempty"`                        // "模糊查询用户手机字段，即用户联系方式手机"
	UserEmail            *string `protobuf:"bytes,14,opt,name=userEmail,proto3,oneof" json:"userEmail,omitempty"`                        // "模糊查询用户邮箱字段，即用户联系方式邮箱"
	AccountPhone         *string `protobuf:"bytes,20,opt,name=accountPhone,proto3,oneof" json:"accountPhone,omitempty"`                  // "模糊查询账号手机字段，即登录手机号.注意只有在登录时才会为账号生成用户，可能出现有注册了账号但无用户返回情况"
	AccountEmail         *string `protobuf:"bytes,21,opt,name=accountEmail,proto3,oneof" json:"accountEmail,omitempty"`                  // "模糊查询账号邮箱字段，即登录邮箱.注意只有在登录时才会为账号生成用户，可能出现有注册了账号但无用户返回情况"
	GrantTenant          *string `protobuf:"bytes,22,opt,name=grantTenant,proto3,oneof" json:"grantTenant,omitempty"`                    // "仅返回在指定企业下存在身份的用户,不传入表示不限", example = "co_123456"
	GrantApp             *int64  `protobuf:"varint,23,opt,name=grantApp,proto3,oneof" json:"grantApp,omitempty"`                         // "仅返回在指定应用下存在身份的用户,不传入表示不限。传入时，返回信息将叠加指定的应用信息。", example = "1001"
	Source               *string `protobuf:"bytes,24,opt,name=source,proto3,oneof" json:"source,omitempty"`                              // "过滤用户注册来源,现有jumeaux/weixin/feishu/vision-china,不传入表示不限", example = "jumeaux"
	TimImported          *bool   `protobuf:"varint,25,opt,name=timImported,proto3,oneof" json:"timImported,omitempty"`                   // "腾讯云IM导入状态,false-未导入，true-已导入"
	CreateTimeStartStamp *int64  `protobuf:"varint,30,opt,name=createTimeStartStamp,proto3,oneof" json:"createTimeStartStamp,omitempty"` // 注册时间起点时间戳（单位ms）,需为过去时间
	CreateTimeEndStamp   *int64  `protobuf:"varint,31,opt,name=createTimeEndStamp,proto3,oneof" json:"createTimeEndStamp,omitempty"`     // 注册时间终点时间戳（单位ms）,需为过去时间
	LoginTimeInterval    *string `protobuf:"bytes,32,opt,name=loginTimeInterval,proto3,oneof" json:"loginTimeInterval,omitempty"`        // 最近登录时间区间,不传入表示不限,支持ISO-8601持续时间格式PnDTnHnMn.nS，如P1DT3H", example = "P7D"
	// 分页与排序
	PageNum   *int32  `protobuf:"varint,50,opt,name=pageNum,proto3,oneof" json:"pageNum,omitempty"`    // 页数, 从1开始, 传入0表示查询全部, 不传入时默认为1
	PageSize  *int32  `protobuf:"varint,51,opt,name=pageSize,proto3,oneof" json:"pageSize,omitempty"`  // 每页个数，不小于1, 不传入时默认为20
	SortField *string `protobuf:"bytes,52,opt,name=sortField,proto3,oneof" json:"sortField,omitempty"` // 排序字段,支持createTime/modifyTime/id,不传入时默认为id
	SortDir   *string `protobuf:"bytes,53,opt,name=sortDir,proto3,oneof" json:"sortDir,omitempty"`     // 排序方向,只能为升序asc/降序desc,不传入时默认为升序asc
}

func (x *C2S_UserQueryReqT) Reset() {
	*x = C2S_UserQueryReqT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_UserQueryReqT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_UserQueryReqT) ProtoMessage() {}

func (x *C2S_UserQueryReqT) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_UserQueryReqT.ProtoReflect.Descriptor instead.
func (*C2S_UserQueryReqT) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{20}
}

func (x *C2S_UserQueryReqT) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *C2S_UserQueryReqT) GetNameIgnoreLevel() string {
	if x != nil && x.NameIgnoreLevel != nil {
		return *x.NameIgnoreLevel
	}
	return ""
}

func (x *C2S_UserQueryReqT) GetRealName() string {
	if x != nil && x.RealName != nil {
		return *x.RealName
	}
	return ""
}

func (x *C2S_UserQueryReqT) GetUserPhone() string {
	if x != nil && x.UserPhone != nil {
		return *x.UserPhone
	}
	return ""
}

func (x *C2S_UserQueryReqT) GetUserEmail() string {
	if x != nil && x.UserEmail != nil {
		return *x.UserEmail
	}
	return ""
}

func (x *C2S_UserQueryReqT) GetAccountPhone() string {
	if x != nil && x.AccountPhone != nil {
		return *x.AccountPhone
	}
	return ""
}

func (x *C2S_UserQueryReqT) GetAccountEmail() string {
	if x != nil && x.AccountEmail != nil {
		return *x.AccountEmail
	}
	return ""
}

func (x *C2S_UserQueryReqT) GetGrantTenant() string {
	if x != nil && x.GrantTenant != nil {
		return *x.GrantTenant
	}
	return ""
}

func (x *C2S_UserQueryReqT) GetGrantApp() int64 {
	if x != nil && x.GrantApp != nil {
		return *x.GrantApp
	}
	return 0
}

func (x *C2S_UserQueryReqT) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *C2S_UserQueryReqT) GetTimImported() bool {
	if x != nil && x.TimImported != nil {
		return *x.TimImported
	}
	return false
}

func (x *C2S_UserQueryReqT) GetCreateTimeStartStamp() int64 {
	if x != nil && x.CreateTimeStartStamp != nil {
		return *x.CreateTimeStartStamp
	}
	return 0
}

func (x *C2S_UserQueryReqT) GetCreateTimeEndStamp() int64 {
	if x != nil && x.CreateTimeEndStamp != nil {
		return *x.CreateTimeEndStamp
	}
	return 0
}

func (x *C2S_UserQueryReqT) GetLoginTimeInterval() string {
	if x != nil && x.LoginTimeInterval != nil {
		return *x.LoginTimeInterval
	}
	return ""
}

func (x *C2S_UserQueryReqT) GetPageNum() int32 {
	if x != nil && x.PageNum != nil {
		return *x.PageNum
	}
	return 0
}

func (x *C2S_UserQueryReqT) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *C2S_UserQueryReqT) GetSortField() string {
	if x != nil && x.SortField != nil {
		return *x.SortField
	}
	return ""
}

func (x *C2S_UserQueryReqT) GetSortDir() string {
	if x != nil && x.SortDir != nil {
		return *x.SortDir
	}
	return ""
}

type S2C_UserQueryRpnT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum   int32        `protobuf:"varint,1,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	PageSize  int32        `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPage int32        `protobuf:"varint,3,opt,name=totalPage,proto3" json:"totalPage,omitempty"`
	Total     int64        `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	Users     []*MicroUser `protobuf:"bytes,5,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *S2C_UserQueryRpnT) Reset() {
	*x = S2C_UserQueryRpnT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_UserQueryRpnT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_UserQueryRpnT) ProtoMessage() {}

func (x *S2C_UserQueryRpnT) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_UserQueryRpnT.ProtoReflect.Descriptor instead.
func (*S2C_UserQueryRpnT) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{21}
}

func (x *S2C_UserQueryRpnT) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *S2C_UserQueryRpnT) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *S2C_UserQueryRpnT) GetTotalPage() int32 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *S2C_UserQueryRpnT) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *S2C_UserQueryRpnT) GetUsers() []*MicroUser {
	if x != nil {
		return x.Users
	}
	return nil
}

// 用户访问凭证获取请求
type C2S_AccessTokenGetV2_Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,10,opt,name=userId,proto3" json:"userId,omitempty"` // 用户id
	// 登录态数据
	AppId         int64   `protobuf:"varint,20,opt,name=appId,proto3" json:"appId,omitempty"`                // 应用id
	TenantId      *string `protobuf:"bytes,30,opt,name=tenantId,proto3,oneof" json:"tenantId,omitempty"`     // 租户ID，可选，不传入时将使用缓存的租户id，如无缓存，将生成PartialToken，对应的用户信息不完整
	Platform      int32   `protobuf:"varint,40,opt,name=platform,proto3" json:"platform,omitempty"`          // 用户登录使用的平台信息
	AccountSource string  `protobuf:"bytes,50,opt,name=accountSource,proto3" json:"accountSource,omitempty"` // 用户登录的账号来源
	AccountName   string  `protobuf:"bytes,60,opt,name=accountName,proto3" json:"accountName,omitempty"`     // 用户登录的账号名
	// 用户系统行为控制
	Override  bool           `protobuf:"varint,70,opt,name=override,proto3" json:"override,omitempty"`  // 是否使用传入的信息覆盖式更新现有用户基本信息，应仅第三方账户登录时设置为true
	PlainInfo *PlainUserInfo `protobuf:"bytes,80,opt,name=plainInfo,proto3" json:"plainInfo,omitempty"` // 用户更新参数 - 仅允许更新普通用户信息，不允许更新敏感用户信息
}

func (x *C2S_AccessTokenGetV2_Req) Reset() {
	*x = C2S_AccessTokenGetV2_Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_AccessTokenGetV2_Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_AccessTokenGetV2_Req) ProtoMessage() {}

func (x *C2S_AccessTokenGetV2_Req) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_AccessTokenGetV2_Req.ProtoReflect.Descriptor instead.
func (*C2S_AccessTokenGetV2_Req) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{22}
}

func (x *C2S_AccessTokenGetV2_Req) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *C2S_AccessTokenGetV2_Req) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *C2S_AccessTokenGetV2_Req) GetTenantId() string {
	if x != nil && x.TenantId != nil {
		return *x.TenantId
	}
	return ""
}

func (x *C2S_AccessTokenGetV2_Req) GetPlatform() int32 {
	if x != nil {
		return x.Platform
	}
	return 0
}

func (x *C2S_AccessTokenGetV2_Req) GetAccountSource() string {
	if x != nil {
		return x.AccountSource
	}
	return ""
}

func (x *C2S_AccessTokenGetV2_Req) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *C2S_AccessTokenGetV2_Req) GetOverride() bool {
	if x != nil {
		return x.Override
	}
	return false
}

func (x *C2S_AccessTokenGetV2_Req) GetPlainInfo() *PlainUserInfo {
	if x != nil {
		return x.PlainInfo
	}
	return nil
}

// 用户访问凭证获取响应
type S2C_AccessTokenGetV2_Rpn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantIdExists bool   `protobuf:"varint,10,opt,name=tenantIdExists,proto3" json:"tenantIdExists,omitempty"` // 是否识别到有效tenantId
	Token          string `protobuf:"bytes,20,opt,name=token,proto3" json:"token,omitempty"`                    // 用户登录凭证，tenantIdExists=true时对应的是完整用户信息，tenantIdExists=false时对应的是部分用户信息
	// tenantIdExists=false时无下列字段
	OpenId   *string `protobuf:"bytes,30,opt,name=openId,proto3,oneof" json:"openId,omitempty"`     // 用户应用身份openId
	UnionId  *string `protobuf:"bytes,31,opt,name=unionId,proto3,oneof" json:"unionId,omitempty"`   // 用户应用身份unionId
	TenantId *string `protobuf:"bytes,32,opt,name=tenantId,proto3,oneof" json:"tenantId,omitempty"` // 用户登录租户id
}

func (x *S2C_AccessTokenGetV2_Rpn) Reset() {
	*x = S2C_AccessTokenGetV2_Rpn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_AccessTokenGetV2_Rpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_AccessTokenGetV2_Rpn) ProtoMessage() {}

func (x *S2C_AccessTokenGetV2_Rpn) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_AccessTokenGetV2_Rpn.ProtoReflect.Descriptor instead.
func (*S2C_AccessTokenGetV2_Rpn) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{23}
}

func (x *S2C_AccessTokenGetV2_Rpn) GetTenantIdExists() bool {
	if x != nil {
		return x.TenantIdExists
	}
	return false
}

func (x *S2C_AccessTokenGetV2_Rpn) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *S2C_AccessTokenGetV2_Rpn) GetOpenId() string {
	if x != nil && x.OpenId != nil {
		return *x.OpenId
	}
	return ""
}

func (x *S2C_AccessTokenGetV2_Rpn) GetUnionId() string {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return ""
}

func (x *S2C_AccessTokenGetV2_Rpn) GetTenantId() string {
	if x != nil && x.TenantId != nil {
		return *x.TenantId
	}
	return ""
}

// 注销用户访问凭证请求
type C2S_RevokeAccessTokenV2_Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,10,opt,name=userId,proto3" json:"userId,omitempty"`      // 用户物理身份id
	AppId    int64  `protobuf:"varint,20,opt,name=appId,proto3" json:"appId,omitempty"`       // 应用标识符
	Platform int32  `protobuf:"varint,30,opt,name=platform,proto3" json:"platform,omitempty"` // 登录平台 1-pc, 2-mobile, 3-pad
}

func (x *C2S_RevokeAccessTokenV2_Req) Reset() {
	*x = C2S_RevokeAccessTokenV2_Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_RevokeAccessTokenV2_Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_RevokeAccessTokenV2_Req) ProtoMessage() {}

func (x *C2S_RevokeAccessTokenV2_Req) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_RevokeAccessTokenV2_Req.ProtoReflect.Descriptor instead.
func (*C2S_RevokeAccessTokenV2_Req) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{24}
}

func (x *C2S_RevokeAccessTokenV2_Req) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *C2S_RevokeAccessTokenV2_Req) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *C2S_RevokeAccessTokenV2_Req) GetPlatform() int32 {
	if x != nil {
		return x.Platform
	}
	return 0
}

// 注销用户全部访问凭证请求
type C2S_RevokeAllAccessTokenV2_Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,10,opt,name=userId,proto3" json:"userId,omitempty"` // 用户物理身份id
}

func (x *C2S_RevokeAllAccessTokenV2_Req) Reset() {
	*x = C2S_RevokeAllAccessTokenV2_Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_RevokeAllAccessTokenV2_Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_RevokeAllAccessTokenV2_Req) ProtoMessage() {}

func (x *C2S_RevokeAllAccessTokenV2_Req) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_RevokeAllAccessTokenV2_Req.ProtoReflect.Descriptor instead.
func (*C2S_RevokeAllAccessTokenV2_Req) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{25}
}

func (x *C2S_RevokeAllAccessTokenV2_Req) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// 验签请求
type C2S_CheckTokenV2_Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,10,opt,name=id,proto3" json:"id,omitempty"`       // 用户id 支持UserId、EmployeeId、UnionId、OpenId
	AppId string `protobuf:"bytes,20,opt,name=appId,proto3" json:"appId,omitempty"` // 拟登录应用，为了兼容网关传入的数值或字符类型的appId，此处定义为string，在用户系统本地转换兼容
	Token string `protobuf:"bytes,30,opt,name=token,proto3" json:"token,omitempty"` // 用户登录凭证
}

func (x *C2S_CheckTokenV2_Req) Reset() {
	*x = C2S_CheckTokenV2_Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_CheckTokenV2_Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_CheckTokenV2_Req) ProtoMessage() {}

func (x *C2S_CheckTokenV2_Req) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_CheckTokenV2_Req.ProtoReflect.Descriptor instead.
func (*C2S_CheckTokenV2_Req) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{26}
}

func (x *C2S_CheckTokenV2_Req) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *C2S_CheckTokenV2_Req) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *C2S_CheckTokenV2_Req) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// 验签返回
type S2C_CheckTokenV2_Rpn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid   bool   `protobuf:"varint,10,opt,name=isValid,proto3" json:"isValid,omitempty"`           // token是否有效
	FromSso   bool   `protobuf:"varint,11,opt,name=fromSso,proto3" json:"fromSso,omitempty"`           // 是否通过单点登录通过验证
	SsoSource *int64 `protobuf:"varint,12,opt,name=ssoSource,proto3,oneof" json:"ssoSource,omitempty"` // 单点登录验证通过来源，在fromSSO=true时返回
	// 以下信息在token检查通过后返回
	Uid           string `protobuf:"bytes,20,opt,name=uid,proto3" json:"uid,omitempty"`                     // 用户物理身份id
	EmployeeId    string `protobuf:"bytes,30,opt,name=employeeId,proto3" json:"employeeId,omitempty"`       // 用户租户身份id
	UnionId       string `protobuf:"bytes,40,opt,name=unionId,proto3" json:"unionId,omitempty"`             // 用户应用身份unionId
	OpenId        string `protobuf:"bytes,50,opt,name=openId,proto3" json:"openId,omitempty"`               // 用户应用身份openId
	TenantId      string `protobuf:"bytes,60,opt,name=tenantId,proto3" json:"tenantId,omitempty"`           // 登录租户
	AppId         int64  `protobuf:"varint,70,opt,name=appId,proto3" json:"appId,omitempty"`                // 登录应用，用户系统输出的appId均为数值型
	Platform      int32  `protobuf:"varint,80,opt,name=platform,proto3" json:"platform,omitempty"`          // 登录平台(用于区分多终端登录)
	AccountSource string `protobuf:"bytes,90,opt,name=accountSource,proto3" json:"accountSource,omitempty"` // 登录账户来源（一个用户同一时刻仅允许一个账户登录）
	AccountName   string `protobuf:"bytes,100,opt,name=accountName,proto3" json:"accountName,omitempty"`    // 登录账户名（一个用户同一时刻仅允许一个账户登录）
}

func (x *S2C_CheckTokenV2_Rpn) Reset() {
	*x = S2C_CheckTokenV2_Rpn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_CheckTokenV2_Rpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_CheckTokenV2_Rpn) ProtoMessage() {}

func (x *S2C_CheckTokenV2_Rpn) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_CheckTokenV2_Rpn.ProtoReflect.Descriptor instead.
func (*S2C_CheckTokenV2_Rpn) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{27}
}

func (x *S2C_CheckTokenV2_Rpn) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *S2C_CheckTokenV2_Rpn) GetFromSso() bool {
	if x != nil {
		return x.FromSso
	}
	return false
}

func (x *S2C_CheckTokenV2_Rpn) GetSsoSource() int64 {
	if x != nil && x.SsoSource != nil {
		return *x.SsoSource
	}
	return 0
}

func (x *S2C_CheckTokenV2_Rpn) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *S2C_CheckTokenV2_Rpn) GetEmployeeId() string {
	if x != nil {
		return x.EmployeeId
	}
	return ""
}

func (x *S2C_CheckTokenV2_Rpn) GetUnionId() string {
	if x != nil {
		return x.UnionId
	}
	return ""
}

func (x *S2C_CheckTokenV2_Rpn) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *S2C_CheckTokenV2_Rpn) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *S2C_CheckTokenV2_Rpn) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *S2C_CheckTokenV2_Rpn) GetPlatform() int32 {
	if x != nil {
		return x.Platform
	}
	return 0
}

func (x *S2C_CheckTokenV2_Rpn) GetAccountSource() string {
	if x != nil {
		return x.AccountSource
	}
	return ""
}

func (x *S2C_CheckTokenV2_Rpn) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

// 获取用户后台详情请求
type C2S_UserAdminDetailGet_Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,10,opt,name=userId,proto3" json:"userId,omitempty"` // 用户uid
}

func (x *C2S_UserAdminDetailGet_Req) Reset() {
	*x = C2S_UserAdminDetailGet_Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_UserAdminDetailGet_Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_UserAdminDetailGet_Req) ProtoMessage() {}

func (x *C2S_UserAdminDetailGet_Req) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_UserAdminDetailGet_Req.ProtoReflect.Descriptor instead.
func (*C2S_UserAdminDetailGet_Req) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{28}
}

func (x *C2S_UserAdminDetailGet_Req) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// 获取用户后台详情返回
type S2C_UserAdminDetailGet_Rpn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 基础信息
	UserId       string                                      `protobuf:"bytes,10,opt,name=userId,proto3" json:"userId,omitempty"`                // uid
	Name         string                                      `protobuf:"bytes,20,opt,name=name,proto3" json:"name,omitempty"`                    // 全局信息-用户名
	Phone        string                                      `protobuf:"bytes,30,opt,name=phone,proto3" json:"phone,omitempty"`                  // 联系手机
	Email        string                                      `protobuf:"bytes,40,opt,name=email,proto3" json:"email,omitempty"`                  // 联系邮箱
	Organization *Organization                               `protobuf:"bytes,50,opt,name=organization,proto3" json:"organization,omitempty"`    // 公司组织
	CreateTime   int64                                       `protobuf:"varint,60,opt,name=createTime,proto3" json:"createTime,omitempty"`       // 创建时间，时间戳
	ModifyTime   *int64                                      `protobuf:"varint,70,opt,name=modifyTime,proto3,oneof" json:"modifyTime,omitempty"` // 修改时间，时间戳
	AccountInfos []*S2C_UserAdminDetailGet_Rpn_AccountInfo   `protobuf:"bytes,80,rep,name=accountInfos,proto3" json:"accountInfos,omitempty"`    // 用户对应账户在账户系统中的信息，主要用于存储第三方账户openId  // 账户信息
	AppInfos     []*S2C_UserAdminDetailGet_Rpn_AppInfoDto    `protobuf:"bytes,90,rep,name=appInfos,proto3" json:"appInfos,omitempty"`            // 应用信息
	TenantInfos  []*S2C_UserAdminDetailGet_Rpn_TenantInfoDto `protobuf:"bytes,100,rep,name=tenantInfos,proto3" json:"tenantInfos,omitempty"`     // 租户信息
}

func (x *S2C_UserAdminDetailGet_Rpn) Reset() {
	*x = S2C_UserAdminDetailGet_Rpn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_UserAdminDetailGet_Rpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_UserAdminDetailGet_Rpn) ProtoMessage() {}

func (x *S2C_UserAdminDetailGet_Rpn) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_UserAdminDetailGet_Rpn.ProtoReflect.Descriptor instead.
func (*S2C_UserAdminDetailGet_Rpn) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{29}
}

func (x *S2C_UserAdminDetailGet_Rpn) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *S2C_UserAdminDetailGet_Rpn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *S2C_UserAdminDetailGet_Rpn) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *S2C_UserAdminDetailGet_Rpn) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *S2C_UserAdminDetailGet_Rpn) GetOrganization() *Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *S2C_UserAdminDetailGet_Rpn) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *S2C_UserAdminDetailGet_Rpn) GetModifyTime() int64 {
	if x != nil && x.ModifyTime != nil {
		return *x.ModifyTime
	}
	return 0
}

func (x *S2C_UserAdminDetailGet_Rpn) GetAccountInfos() []*S2C_UserAdminDetailGet_Rpn_AccountInfo {
	if x != nil {
		return x.AccountInfos
	}
	return nil
}

func (x *S2C_UserAdminDetailGet_Rpn) GetAppInfos() []*S2C_UserAdminDetailGet_Rpn_AppInfoDto {
	if x != nil {
		return x.AppInfos
	}
	return nil
}

func (x *S2C_UserAdminDetailGet_Rpn) GetTenantInfos() []*S2C_UserAdminDetailGet_Rpn_TenantInfoDto {
	if x != nil {
		return x.TenantInfos
	}
	return nil
}

type C2S_UserAdminUpdate_Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmployeeId string  `protobuf:"bytes,10,opt,name=employeeId,proto3" json:"employeeId,omitempty"`
	Name       *string `protobuf:"bytes,20,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Phone      *string `protobuf:"bytes,30,opt,name=phone,proto3,oneof" json:"phone,omitempty"`
	Email      *string `protobuf:"bytes,40,opt,name=email,proto3,oneof" json:"email,omitempty"`
}

func (x *C2S_UserAdminUpdate_Req) Reset() {
	*x = C2S_UserAdminUpdate_Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_UserAdminUpdate_Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_UserAdminUpdate_Req) ProtoMessage() {}

func (x *C2S_UserAdminUpdate_Req) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_UserAdminUpdate_Req.ProtoReflect.Descriptor instead.
func (*C2S_UserAdminUpdate_Req) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{30}
}

func (x *C2S_UserAdminUpdate_Req) GetEmployeeId() string {
	if x != nil {
		return x.EmployeeId
	}
	return ""
}

func (x *C2S_UserAdminUpdate_Req) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *C2S_UserAdminUpdate_Req) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *C2S_UserAdminUpdate_Req) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

type C2S_NewOpenIdGet_Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldOpenId string `protobuf:"bytes,10,opt,name=oldOpenId,proto3" json:"oldOpenId,omitempty"` // 旧openId
	TenantId  string `protobuf:"bytes,20,opt,name=tenantId,proto3" json:"tenantId,omitempty"`   // 企业id
}

func (x *C2S_NewOpenIdGet_Req) Reset() {
	*x = C2S_NewOpenIdGet_Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_NewOpenIdGet_Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_NewOpenIdGet_Req) ProtoMessage() {}

func (x *C2S_NewOpenIdGet_Req) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_NewOpenIdGet_Req.ProtoReflect.Descriptor instead.
func (*C2S_NewOpenIdGet_Req) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{31}
}

func (x *C2S_NewOpenIdGet_Req) GetOldOpenId() string {
	if x != nil {
		return x.OldOpenId
	}
	return ""
}

func (x *C2S_NewOpenIdGet_Req) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type S2C_NewOpenIdGet_Rpn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string `protobuf:"bytes,10,opt,name=userId,proto3" json:"userId,omitempty"`         // 用户物理身份标识
	EmployeeId string `protobuf:"bytes,20,opt,name=employeeId,proto3" json:"employeeId,omitempty"` // 用户租户身份标识
	UnionId    string `protobuf:"bytes,30,opt,name=unionId,proto3" json:"unionId,omitempty"`       // 用户应用身份OpenId
	OpenId     string `protobuf:"bytes,40,opt,name=openId,proto3" json:"openId,omitempty"`         // 用户应用身份UnionId
}

func (x *S2C_NewOpenIdGet_Rpn) Reset() {
	*x = S2C_NewOpenIdGet_Rpn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_NewOpenIdGet_Rpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_NewOpenIdGet_Rpn) ProtoMessage() {}

func (x *S2C_NewOpenIdGet_Rpn) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_NewOpenIdGet_Rpn.ProtoReflect.Descriptor instead.
func (*S2C_NewOpenIdGet_Rpn) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{32}
}

func (x *S2C_NewOpenIdGet_Rpn) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *S2C_NewOpenIdGet_Rpn) GetEmployeeId() string {
	if x != nil {
		return x.EmployeeId
	}
	return ""
}

func (x *S2C_NewOpenIdGet_Rpn) GetUnionId() string {
	if x != nil {
		return x.UnionId
	}
	return ""
}

func (x *S2C_NewOpenIdGet_Rpn) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

// 用户基本信息创建/更新/返回参数
type BasicInfoMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`           // 中文名
	EnName *string `protobuf:"bytes,3,opt,name=enName,proto3,oneof" json:"enName,omitempty"` // 英文名
	// 头像
	// 与http请求不同，grpc返回时不会将头像自动转换为obs链接，以防调用方需要对原始文件名进一步存储，存储obs链接将会失效
	Avatar       *string                    `protobuf:"bytes,4,opt,name=avatar,proto3,oneof" json:"avatar,omitempty"`
	AvatarBig    *string                    `protobuf:"bytes,5,opt,name=avatarBig,proto3,oneof" json:"avatarBig,omitempty"`
	AvatarMiddle *string                    `protobuf:"bytes,6,opt,name=avatarMiddle,proto3,oneof" json:"avatarMiddle,omitempty"`
	AvatarThumb  *string                    `protobuf:"bytes,7,opt,name=avatarThumb,proto3,oneof" json:"avatarThumb,omitempty"`
	Email        *string                    `protobuf:"bytes,8,opt,name=email,proto3,oneof" json:"email,omitempty"`                // 邮箱
	Phone        *string                    `protobuf:"bytes,9,opt,name=phone,proto3,oneof" json:"phone,omitempty"`                // 电话号码
	Gender       *string                    `protobuf:"bytes,10,opt,name=gender,proto3,oneof" json:"gender,omitempty"`             // male-男性 female-女性
	IdCard       *string                    `protobuf:"bytes,11,opt,name=idCard,proto3,oneof" json:"idCard,omitempty"`             // 身份证号
	RealName     *string                    `protobuf:"bytes,13,opt,name=realName,proto3,oneof" json:"realName,omitempty"`         // 实名
	Organization *BasicInfoMsg_Organization `protobuf:"bytes,12,opt,name=organization,proto3,oneof" json:"organization,omitempty"` // 公司组织
}

func (x *BasicInfoMsg) Reset() {
	*x = BasicInfoMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicInfoMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicInfoMsg) ProtoMessage() {}

func (x *BasicInfoMsg) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicInfoMsg.ProtoReflect.Descriptor instead.
func (*BasicInfoMsg) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{33}
}

func (x *BasicInfoMsg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BasicInfoMsg) GetEnName() string {
	if x != nil && x.EnName != nil {
		return *x.EnName
	}
	return ""
}

func (x *BasicInfoMsg) GetAvatar() string {
	if x != nil && x.Avatar != nil {
		return *x.Avatar
	}
	return ""
}

func (x *BasicInfoMsg) GetAvatarBig() string {
	if x != nil && x.AvatarBig != nil {
		return *x.AvatarBig
	}
	return ""
}

func (x *BasicInfoMsg) GetAvatarMiddle() string {
	if x != nil && x.AvatarMiddle != nil {
		return *x.AvatarMiddle
	}
	return ""
}

func (x *BasicInfoMsg) GetAvatarThumb() string {
	if x != nil && x.AvatarThumb != nil {
		return *x.AvatarThumb
	}
	return ""
}

func (x *BasicInfoMsg) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *BasicInfoMsg) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *BasicInfoMsg) GetGender() string {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return ""
}

func (x *BasicInfoMsg) GetIdCard() string {
	if x != nil && x.IdCard != nil {
		return *x.IdCard
	}
	return ""
}

func (x *BasicInfoMsg) GetRealName() string {
	if x != nil && x.RealName != nil {
		return *x.RealName
	}
	return ""
}

func (x *BasicInfoMsg) GetOrganization() *BasicInfoMsg_Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

// ******************************************
// 用户服务接口数据模型
// *****************************************
type CheckTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 支持两种方式校验token，二者只能选其一，同时传入时优先检查openId
	// 1. 通过uid+appId校验token
	Uid   *string `protobuf:"bytes,10,opt,name=uid,proto3,oneof" json:"uid,omitempty"`
	AppId *string `protobuf:"bytes,11,opt,name=appId,proto3,oneof" json:"appId,omitempty"` // 验签时，必须明确用户请求的应用，以便返回openId信息
	// 2. 通过openId校验token
	OpenId *string `protobuf:"bytes,12,opt,name=openId,proto3,oneof" json:"openId,omitempty"`
	Token  string  `protobuf:"bytes,20,opt,name=token,proto3" json:"token,omitempty"` // 待检查的用户登录凭证
}

func (x *CheckTokenRequest) Reset() {
	*x = CheckTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenRequest) ProtoMessage() {}

func (x *CheckTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenRequest.ProtoReflect.Descriptor instead.
func (*CheckTokenRequest) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{34}
}

func (x *CheckTokenRequest) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

func (x *CheckTokenRequest) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *CheckTokenRequest) GetOpenId() string {
	if x != nil && x.OpenId != nil {
		return *x.OpenId
	}
	return ""
}

func (x *CheckTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type CheckTokenReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid bool `protobuf:"varint,10,opt,name=isValid,proto3" json:"isValid,omitempty"`
	// 以下信息在token检查通过后返回
	Uid           string `protobuf:"bytes,20,opt,name=uid,proto3" json:"uid,omitempty"`                     // 用户uid
	OpenId        string `protobuf:"bytes,21,opt,name=openId,proto3" json:"openId,omitempty"`               // 用户openId
	AppId         string `protobuf:"bytes,22,opt,name=appId,proto3" json:"appId,omitempty"`                 // token对应的登录请求的appId
	Platform      string `protobuf:"bytes,23,opt,name=platform,proto3" json:"platform,omitempty"`           // token对应的登录请求的设备平台(用于区分多终端登录)
	AccountSource string `protobuf:"bytes,24,opt,name=accountSource,proto3" json:"accountSource,omitempty"` // token对应的登录账户来源（一个用户同一时刻仅允许一个账户登录）
	AccountName   string `protobuf:"bytes,25,opt,name=accountName,proto3" json:"accountName,omitempty"`     // token对应的登录账户名（一个用户同一时刻仅允许一个账户登录）
}

func (x *CheckTokenReply) Reset() {
	*x = CheckTokenReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenReply) ProtoMessage() {}

func (x *CheckTokenReply) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenReply.ProtoReflect.Descriptor instead.
func (*CheckTokenReply) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{35}
}

func (x *CheckTokenReply) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckTokenReply) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *CheckTokenReply) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *CheckTokenReply) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *CheckTokenReply) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *CheckTokenReply) GetAccountSource() string {
	if x != nil {
		return x.AccountSource
	}
	return ""
}

func (x *CheckTokenReply) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

type CheckTokenStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrpcStreamId string `protobuf:"bytes,10,opt,name=grpcStreamId,proto3" json:"grpcStreamId,omitempty"` // 流标识id,将原样返回
	// 支持两种方式校验token，二者只能选其一，同时传入时优先检查openId
	// 1. 通过uid+appId校验token
	Uid   *string `protobuf:"bytes,20,opt,name=uid,proto3,oneof" json:"uid,omitempty"`
	AppId *string `protobuf:"bytes,21,opt,name=appId,proto3,oneof" json:"appId,omitempty"` // 验签时，必须明确用户请求的应用，以便返回openId信息
	// 2. 通过openId校验token
	OpenId *string `protobuf:"bytes,22,opt,name=openId,proto3,oneof" json:"openId,omitempty"`
	Token  string  `protobuf:"bytes,30,opt,name=token,proto3" json:"token,omitempty"` // 待检查的用户登录凭证
}

func (x *CheckTokenStreamRequest) Reset() {
	*x = CheckTokenStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenStreamRequest) ProtoMessage() {}

func (x *CheckTokenStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenStreamRequest.ProtoReflect.Descriptor instead.
func (*CheckTokenStreamRequest) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{36}
}

func (x *CheckTokenStreamRequest) GetGrpcStreamId() string {
	if x != nil {
		return x.GrpcStreamId
	}
	return ""
}

func (x *CheckTokenStreamRequest) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

func (x *CheckTokenStreamRequest) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *CheckTokenStreamRequest) GetOpenId() string {
	if x != nil && x.OpenId != nil {
		return *x.OpenId
	}
	return ""
}

func (x *CheckTokenStreamRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type CheckTokenStreamReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrpcStreamId string `protobuf:"bytes,10,opt,name=grpcStreamId,proto3" json:"grpcStreamId,omitempty"` // 流标识id，原样返回
	IsValid      bool   `protobuf:"varint,20,opt,name=isValid,proto3" json:"isValid,omitempty"`
	// 以下信息在token检查通过后返回
	Uid           string `protobuf:"bytes,30,opt,name=uid,proto3" json:"uid,omitempty"`                     // 用户uid
	OpenId        string `protobuf:"bytes,31,opt,name=openId,proto3" json:"openId,omitempty"`               // 用户openId
	AppId         string `protobuf:"bytes,32,opt,name=appId,proto3" json:"appId,omitempty"`                 // token对应的登录请求的appId
	Platform      string `protobuf:"bytes,33,opt,name=platform,proto3" json:"platform,omitempty"`           // token对应的登录请求的设备平台(用于区分多终端登录)
	AccountSource string `protobuf:"bytes,34,opt,name=accountSource,proto3" json:"accountSource,omitempty"` // token对应的登录账户来源（一个用户同一时刻仅允许一个账户登录）
	AccountName   string `protobuf:"bytes,35,opt,name=accountName,proto3" json:"accountName,omitempty"`     // token对应的登录账户名（一个用户同一时刻仅允许一个账户登录）
}

func (x *CheckTokenStreamReply) Reset() {
	*x = CheckTokenStreamReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenStreamReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenStreamReply) ProtoMessage() {}

func (x *CheckTokenStreamReply) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenStreamReply.ProtoReflect.Descriptor instead.
func (*CheckTokenStreamReply) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{37}
}

func (x *CheckTokenStreamReply) GetGrpcStreamId() string {
	if x != nil {
		return x.GrpcStreamId
	}
	return ""
}

func (x *CheckTokenStreamReply) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckTokenStreamReply) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *CheckTokenStreamReply) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *CheckTokenStreamReply) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *CheckTokenStreamReply) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *CheckTokenStreamReply) GetAccountSource() string {
	if x != nil {
		return x.AccountSource
	}
	return ""
}

func (x *CheckTokenStreamReply) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

type GetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户身份标识，二者只能选其一，同时传入时优先采用openId
	// 方式一：使用openId获取用户信息
	OpenId *string `protobuf:"bytes,1,opt,name=openId,proto3,oneof" json:"openId,omitempty"`
	// 方式二：使用userId+appId获取用户信息，传入字段不同可以获取不同层级信息
	Uid   *string `protobuf:"bytes,2,opt,name=uid,proto3,oneof" json:"uid,omitempty"` // tenantId默认使用COMPATIBLE-DEFAULT
	AppId *string `protobuf:"bytes,3,opt,name=appId,proto3,oneof" json:"appId,omitempty"`
	// 选择返回的用户信息，按位控制信息类别，不传入或者传入为0时表示默认全部返回
	// 0x1 - 用户基本信息
	// 0x2 - 应用附加信息
	// 0x4 - 用户对应的账户信息
	// 0x8 - 用户对应的id信息，uid,openId
	InfoSelector int32 `protobuf:"varint,4,opt,name=infoSelector,proto3" json:"infoSelector,omitempty"`
	// 是否将用户头像信息转换为obs链接,不传入时默认为true
	// true - 返回的头像直接是obs链接，适用于直接向前端返回，链接有过期时间，不能用于直接存储
	// false - 返回的头像是obs存储的key，适用于服务自行存储
	ConvertObs *bool `protobuf:"varint,5,opt,name=convertObs,proto3,oneof" json:"convertObs,omitempty"`
}

func (x *GetUserRequest) Reset() {
	*x = GetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRequest) ProtoMessage() {}

func (x *GetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRequest.ProtoReflect.Descriptor instead.
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{38}
}

func (x *GetUserRequest) GetOpenId() string {
	if x != nil && x.OpenId != nil {
		return *x.OpenId
	}
	return ""
}

func (x *GetUserRequest) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

func (x *GetUserRequest) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *GetUserRequest) GetInfoSelector() int32 {
	if x != nil {
		return x.InfoSelector
	}
	return 0
}

func (x *GetUserRequest) GetConvertObs() bool {
	if x != nil && x.ConvertObs != nil {
		return *x.ConvertObs
	}
	return false
}

type CompoundInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicInfo     *BasicInfoMsg                        `protobuf:"bytes,1,opt,name=basicInfo,proto3" json:"basicInfo,omitempty"`
	SpecificInfos []*CompoundInfoReply_SpecificInfoMsg `protobuf:"bytes,2,rep,name=specificInfos,proto3" json:"specificInfos,omitempty"`
	AccountInfos  []*CompoundInfoReply_AccountInfoMsg  `protobuf:"bytes,3,rep,name=accountInfos,proto3" json:"accountInfos,omitempty"` // 用户对应的账号信息
	Uid           *string                              `protobuf:"bytes,4,opt,name=uid,proto3,oneof" json:"uid,omitempty"`             // 用户uid信息,在使用openId查询用户信息时返回
	OpenId        *string                              `protobuf:"bytes,5,opt,name=openId,proto3,oneof" json:"openId,omitempty"`       // 用户openId信息,在使用uid+appId查询用户信息时返回
}

func (x *CompoundInfoReply) Reset() {
	*x = CompoundInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompoundInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundInfoReply) ProtoMessage() {}

func (x *CompoundInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundInfoReply.ProtoReflect.Descriptor instead.
func (*CompoundInfoReply) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{39}
}

func (x *CompoundInfoReply) GetBasicInfo() *BasicInfoMsg {
	if x != nil {
		return x.BasicInfo
	}
	return nil
}

func (x *CompoundInfoReply) GetSpecificInfos() []*CompoundInfoReply_SpecificInfoMsg {
	if x != nil {
		return x.SpecificInfos
	}
	return nil
}

func (x *CompoundInfoReply) GetAccountInfos() []*CompoundInfoReply_AccountInfoMsg {
	if x != nil {
		return x.AccountInfos
	}
	return nil
}

func (x *CompoundInfoReply) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

func (x *CompoundInfoReply) GetOpenId() string {
	if x != nil && x.OpenId != nil {
		return *x.OpenId
	}
	return ""
}

type GetUserBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenIds []string                          `protobuf:"bytes,1,rep,name=openIds,proto3" json:"openIds,omitempty"`
	Users   []*GetUserBatchRequest_AccessUser `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
	// 选择返回的用户信息，按位控制信息类别，不传入或者传入为0时表示默认全部返回
	// 0x1 - 用户基本信息
	// 0x2 - 应用附加信息
	// 0x4 - 用户对应的账户信息
	// 0x8 - 用户对应的id信息，uid,openId
	InfoSelector int32 `protobuf:"varint,3,opt,name=infoSelector,proto3" json:"infoSelector,omitempty"`
	// 是否将用户头像信息转换为obs链接,不传入时默认为true
	// true - 返回的头像直接是obs链接，适用于直接向前端返回，链接有过期时间，不能用于直接存储
	// false - 返回的头像是obs存储的key，适用于服务自行存储
	ConvertObs *bool `protobuf:"varint,4,opt,name=convertObs,proto3,oneof" json:"convertObs,omitempty"`
}

func (x *GetUserBatchRequest) Reset() {
	*x = GetUserBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserBatchRequest) ProtoMessage() {}

func (x *GetUserBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserBatchRequest.ProtoReflect.Descriptor instead.
func (*GetUserBatchRequest) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{40}
}

func (x *GetUserBatchRequest) GetOpenIds() []string {
	if x != nil {
		return x.OpenIds
	}
	return nil
}

func (x *GetUserBatchRequest) GetUsers() []*GetUserBatchRequest_AccessUser {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *GetUserBatchRequest) GetInfoSelector() int32 {
	if x != nil {
		return x.InfoSelector
	}
	return 0
}

func (x *GetUserBatchRequest) GetConvertObs() bool {
	if x != nil && x.ConvertObs != nil {
		return *x.ConvertObs
	}
	return false
}

type CompoundInfoBatchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*CompoundInfoReply `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *CompoundInfoBatchReply) Reset() {
	*x = CompoundInfoBatchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompoundInfoBatchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundInfoBatchReply) ProtoMessage() {}

func (x *CompoundInfoBatchReply) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundInfoBatchReply.ProtoReflect.Descriptor instead.
func (*CompoundInfoBatchReply) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{41}
}

func (x *CompoundInfoBatchReply) GetUsers() []*CompoundInfoReply {
	if x != nil {
		return x.Users
	}
	return nil
}

// 查询用户列表
type GetUserListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
	// 分页
	PageNum  *int32 `protobuf:"varint,2,opt,name=pageNum,proto3,oneof" json:"pageNum,omitempty"`   // 页数，从1开始
	PageSize *int32 `protobuf:"varint,3,opt,name=pageSize,proto3,oneof" json:"pageSize,omitempty"` // 每页个数，不小于1
	// 排序
	SortField *string `protobuf:"bytes,4,opt,name=sortField,proto3,oneof" json:"sortField,omitempty"` // 排序字段,不传入时默认为id
	SortDir   *string `protobuf:"bytes,5,opt,name=sortDir,proto3,oneof" json:"sortDir,omitempty"`     // 排序方向,只能为desc/asc,不传入时默认为asc
	// 模糊查询
	// 同时传入时查询优先级name>phone>email
	Name  *string `protobuf:"bytes,6,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Phone *string `protobuf:"bytes,7,opt,name=phone,proto3,oneof" json:"phone,omitempty"`
	Email *string `protobuf:"bytes,8,opt,name=email,proto3,oneof" json:"email,omitempty"`
	// 过滤条件
	Source *string `protobuf:"bytes,9,opt,name=source,proto3,oneof" json:"source,omitempty"` // 过滤用户来源
}

func (x *GetUserListRequest) Reset() {
	*x = GetUserListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserListRequest) ProtoMessage() {}

func (x *GetUserListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserListRequest.ProtoReflect.Descriptor instead.
func (*GetUserListRequest) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{42}
}

func (x *GetUserListRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *GetUserListRequest) GetPageNum() int32 {
	if x != nil && x.PageNum != nil {
		return *x.PageNum
	}
	return 0
}

func (x *GetUserListRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *GetUserListRequest) GetSortField() string {
	if x != nil && x.SortField != nil {
		return *x.SortField
	}
	return ""
}

func (x *GetUserListRequest) GetSortDir() string {
	if x != nil && x.SortDir != nil {
		return *x.SortDir
	}
	return ""
}

func (x *GetUserListRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GetUserListRequest) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *GetUserListRequest) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *GetUserListRequest) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

type SketchyInfoPageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum   int32                                  `protobuf:"varint,1,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	PageSize  int32                                  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPage int32                                  `protobuf:"varint,3,opt,name=totalPage,proto3" json:"totalPage,omitempty"`
	Total     int64                                  `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	Users     []*SketchyInfoPageReply_SketchyInfoMsg `protobuf:"bytes,5,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *SketchyInfoPageReply) Reset() {
	*x = SketchyInfoPageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SketchyInfoPageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SketchyInfoPageReply) ProtoMessage() {}

func (x *SketchyInfoPageReply) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SketchyInfoPageReply.ProtoReflect.Descriptor instead.
func (*SketchyInfoPageReply) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{43}
}

func (x *SketchyInfoPageReply) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *SketchyInfoPageReply) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SketchyInfoPageReply) GetTotalPage() int32 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *SketchyInfoPageReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SketchyInfoPageReply) GetUsers() []*SketchyInfoPageReply_SketchyInfoMsg {
	if x != nil {
		return x.Users
	}
	return nil
}

// 传入用户创建参数
type CreateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source   string        `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`     // 账号来源
	SourceId string        `protobuf:"bytes,3,opt,name=sourceId,proto3" json:"sourceId,omitempty"` // 账号id
	UserInfo *BasicInfoMsg `protobuf:"bytes,4,opt,name=userInfo,proto3" json:"userInfo,omitempty"` // 用户信息
	// 登录态数据
	NeedToken   bool   `protobuf:"varint,20,opt,name=needToken,proto3" json:"needToken,omitempty"`    // 是否需要返回token，如果为false，以下字段不需传入
	AppId       string `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`              // 应用ID
	Platform    string `protobuf:"bytes,21,opt,name=platform,proto3" json:"platform,omitempty"`       // 用户登录使用的平台信息
	AccountName string `protobuf:"bytes,22,opt,name=accountName,proto3" json:"accountName,omitempty"` // 用户登录的账号名
}

func (x *CreateUserRequest) Reset() {
	*x = CreateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserRequest) ProtoMessage() {}

func (x *CreateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserRequest.ProtoReflect.Descriptor instead.
func (*CreateUserRequest) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{44}
}

func (x *CreateUserRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *CreateUserRequest) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *CreateUserRequest) GetUserInfo() *BasicInfoMsg {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *CreateUserRequest) GetNeedToken() bool {
	if x != nil {
		return x.NeedToken
	}
	return false
}

func (x *CreateUserRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *CreateUserRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *CreateUserRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

// 返回新建用户的uid
type CreateUserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`      // 用户id
	IsNew bool   `protobuf:"varint,3,opt,name=isNew,proto3" json:"isNew,omitempty"` // 是否是新创建用户（如果传入的创建用户参数已经有对应用户(同sourceId/同手机号/同邮箱)，将返回已有用户信息，并将此设置为false
	// 以下字段仅在needToken=true时返回
	OpenId      string `protobuf:"bytes,2,opt,name=openId,proto3" json:"openId,omitempty"`            // 与应用对应的openId
	AccessToken string `protobuf:"bytes,20,opt,name=accessToken,proto3" json:"accessToken,omitempty"` // 用户登录凭证
}

func (x *CreateUserReply) Reset() {
	*x = CreateUserReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserReply) ProtoMessage() {}

func (x *CreateUserReply) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserReply.ProtoReflect.Descriptor instead.
func (*CreateUserReply) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{45}
}

func (x *CreateUserReply) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *CreateUserReply) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

func (x *CreateUserReply) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *CreateUserReply) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

// 获取用户访问凭证
type GetAccessTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      string        `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`            // 用户id
	AppId    string        `protobuf:"bytes,2,opt,name=appId,proto3" json:"appId,omitempty"`        // 应用id
	Override bool          `protobuf:"varint,3,opt,name=override,proto3" json:"override,omitempty"` // 是否使用传入的信息覆盖式更新现有用户基本信息，应仅第三方账户登录时设置为true
	UserInfo *BasicInfoMsg `protobuf:"bytes,4,opt,name=userInfo,proto3" json:"userInfo,omitempty"`  // 传入用户更新参数 - 其中的phone、email字段不允许直接更新，传入无效
	// 登录态数据
	Platform      string `protobuf:"bytes,20,opt,name=platform,proto3" json:"platform,omitempty"`           // 用户登录使用的平台信息
	AccountSource string `protobuf:"bytes,21,opt,name=accountSource,proto3" json:"accountSource,omitempty"` // 用户登录的账号来源
	AccountName   string `protobuf:"bytes,22,opt,name=accountName,proto3" json:"accountName,omitempty"`     // 用户登录的账号名
}

func (x *GetAccessTokenRequest) Reset() {
	*x = GetAccessTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccessTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccessTokenRequest) ProtoMessage() {}

func (x *GetAccessTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccessTokenRequest.ProtoReflect.Descriptor instead.
func (*GetAccessTokenRequest) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{46}
}

func (x *GetAccessTokenRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *GetAccessTokenRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *GetAccessTokenRequest) GetOverride() bool {
	if x != nil {
		return x.Override
	}
	return false
}

func (x *GetAccessTokenRequest) GetUserInfo() *BasicInfoMsg {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *GetAccessTokenRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *GetAccessTokenRequest) GetAccountSource() string {
	if x != nil {
		return x.AccountSource
	}
	return ""
}

func (x *GetAccessTokenRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

// 更新用户（仅登录时使用）后返回用户openId
type GetAccessTokenReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenId      string `protobuf:"bytes,1,opt,name=openId,proto3" json:"openId,omitempty"`           // 返回用户openId
	AccessToken string `protobuf:"bytes,2,opt,name=accessToken,proto3" json:"accessToken,omitempty"` // 用户登录凭证
}

func (x *GetAccessTokenReply) Reset() {
	*x = GetAccessTokenReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccessTokenReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccessTokenReply) ProtoMessage() {}

func (x *GetAccessTokenReply) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccessTokenReply.ProtoReflect.Descriptor instead.
func (*GetAccessTokenReply) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{47}
}

func (x *GetAccessTokenReply) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *GetAccessTokenReply) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type UpdateUserBasicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 通过uid或openId定位用户,优先使用uid
	Uid      string        `protobuf:"bytes,10,opt,name=uid,proto3" json:"uid,omitempty"`           // 用户id
	OpenId   string        `protobuf:"bytes,11,opt,name=openId,proto3" json:"openId,omitempty"`     // 用户oid
	UserInfo *BasicInfoMsg `protobuf:"bytes,20,opt,name=userInfo,proto3" json:"userInfo,omitempty"` // 用户基本信息更新参数
}

func (x *UpdateUserBasicRequest) Reset() {
	*x = UpdateUserBasicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserBasicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserBasicRequest) ProtoMessage() {}

func (x *UpdateUserBasicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserBasicRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserBasicRequest) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{48}
}

func (x *UpdateUserBasicRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *UpdateUserBasicRequest) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *UpdateUserBasicRequest) GetUserInfo() *BasicInfoMsg {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

// 传入用户uid
type GetUserContactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"` // 用户uid
}

func (x *GetUserContactRequest) Reset() {
	*x = GetUserContactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserContactRequest) ProtoMessage() {}

func (x *GetUserContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserContactRequest.ProtoReflect.Descriptor instead.
func (*GetUserContactRequest) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{49}
}

func (x *GetUserContactRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type UserContactReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone *string `protobuf:"bytes,1,opt,name=phone,proto3,oneof" json:"phone,omitempty"`
	Email *string `protobuf:"bytes,2,opt,name=email,proto3,oneof" json:"email,omitempty"`
}

func (x *UserContactReply) Reset() {
	*x = UserContactReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserContactReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserContactReply) ProtoMessage() {}

func (x *UserContactReply) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserContactReply.ProtoReflect.Descriptor instead.
func (*UserContactReply) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{50}
}

func (x *UserContactReply) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *UserContactReply) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

// 注销用户访问凭证请求
type C2S_RevokeAccessToken_Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`           // 登录用户uid
	Platform string `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"` // 登录平台
	AppId    string `protobuf:"bytes,3,opt,name=appId,proto3" json:"appId,omitempty"`       // 登录应用
}

func (x *C2S_RevokeAccessToken_Req) Reset() {
	*x = C2S_RevokeAccessToken_Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_RevokeAccessToken_Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_RevokeAccessToken_Req) ProtoMessage() {}

func (x *C2S_RevokeAccessToken_Req) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_RevokeAccessToken_Req.ProtoReflect.Descriptor instead.
func (*C2S_RevokeAccessToken_Req) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{51}
}

func (x *C2S_RevokeAccessToken_Req) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *C2S_RevokeAccessToken_Req) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *C2S_RevokeAccessToken_Req) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

// 获取头像库请求结构
type C2S_GetAvatars_Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeDefault *bool   `protobuf:"varint,1,opt,name=includeDefault,proto3,oneof" json:"includeDefault,omitempty"` // 是否包含默认头像库，不传入时默认为true
	AppId          string  `protobuf:"bytes,10,opt,name=appId,proto3" json:"appId,omitempty"`                         // 头像库隶属应用
	Group          *string `protobuf:"bytes,11,opt,name=group,proto3,oneof" json:"group,omitempty"`                   // 头像库隶属分组
	Label          *string `protobuf:"bytes,12,opt,name=label,proto3,oneof" json:"label,omitempty"`                   // 头像库隶属标签
}

func (x *C2S_GetAvatars_Req) Reset() {
	*x = C2S_GetAvatars_Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_GetAvatars_Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_GetAvatars_Req) ProtoMessage() {}

func (x *C2S_GetAvatars_Req) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_GetAvatars_Req.ProtoReflect.Descriptor instead.
func (*C2S_GetAvatars_Req) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{52}
}

func (x *C2S_GetAvatars_Req) GetIncludeDefault() bool {
	if x != nil && x.IncludeDefault != nil {
		return *x.IncludeDefault
	}
	return false
}

func (x *C2S_GetAvatars_Req) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *C2S_GetAvatars_Req) GetGroup() string {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return ""
}

func (x *C2S_GetAvatars_Req) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

// 获取头像库返回结构
type S2C_GetAvatars_Rpn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avatars []*S2C_GetAvatars_Rpn_AvatarInfo `protobuf:"bytes,1,rep,name=avatars,proto3" json:"avatars,omitempty"`
}

func (x *S2C_GetAvatars_Rpn) Reset() {
	*x = S2C_GetAvatars_Rpn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_GetAvatars_Rpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_GetAvatars_Rpn) ProtoMessage() {}

func (x *S2C_GetAvatars_Rpn) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_GetAvatars_Rpn.ProtoReflect.Descriptor instead.
func (*S2C_GetAvatars_Rpn) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{53}
}

func (x *S2C_GetAvatars_Rpn) GetAvatars() []*S2C_GetAvatars_Rpn_AvatarInfo {
	if x != nil {
		return x.Avatars
	}
	return nil
}

// 0x10 - 用户其它信息（账户信息等）
type S2C_UserInfoGetV2_Rpn_AccountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source   string `protobuf:"bytes,10,opt,name=source,proto3" json:"source,omitempty"`     // 用户对应的账号来源
	SourceId string `protobuf:"bytes,20,opt,name=sourceId,proto3" json:"sourceId,omitempty"` // 账号Id
}

func (x *S2C_UserInfoGetV2_Rpn_AccountInfo) Reset() {
	*x = S2C_UserInfoGetV2_Rpn_AccountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_UserInfoGetV2_Rpn_AccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_UserInfoGetV2_Rpn_AccountInfo) ProtoMessage() {}

func (x *S2C_UserInfoGetV2_Rpn_AccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_UserInfoGetV2_Rpn_AccountInfo.ProtoReflect.Descriptor instead.
func (*S2C_UserInfoGetV2_Rpn_AccountInfo) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{10, 0}
}

func (x *S2C_UserInfoGetV2_Rpn_AccountInfo) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *S2C_UserInfoGetV2_Rpn_AccountInfo) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

type S2C_UserAdminDetailGet_Rpn_AccountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source   string `protobuf:"bytes,10,opt,name=source,proto3" json:"source,omitempty"`     // 账号注册渠道
	SourceId string `protobuf:"bytes,20,opt,name=sourceId,proto3" json:"sourceId,omitempty"` // 账号在注册渠道中的唯一id
}

func (x *S2C_UserAdminDetailGet_Rpn_AccountInfo) Reset() {
	*x = S2C_UserAdminDetailGet_Rpn_AccountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_UserAdminDetailGet_Rpn_AccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_UserAdminDetailGet_Rpn_AccountInfo) ProtoMessage() {}

func (x *S2C_UserAdminDetailGet_Rpn_AccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_UserAdminDetailGet_Rpn_AccountInfo.ProtoReflect.Descriptor instead.
func (*S2C_UserAdminDetailGet_Rpn_AccountInfo) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{29, 0}
}

func (x *S2C_UserAdminDetailGet_Rpn_AccountInfo) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *S2C_UserAdminDetailGet_Rpn_AccountInfo) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

// 关联信息
type S2C_UserAdminDetailGet_Rpn_AppInfoDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string `protobuf:"bytes,10,opt,name=userId,proto3" json:"userId,omitempty"`         // 用户物理身份id
	EmployeeId string `protobuf:"bytes,20,opt,name=employeeId,proto3" json:"employeeId,omitempty"` // 用户租户身份id
	UnionId    string `protobuf:"bytes,30,opt,name=unionId,proto3" json:"unionId,omitempty"`       // 用户应用身份unionId
	OpenId     string `protobuf:"bytes,40,opt,name=openId,proto3" json:"openId,omitempty"`         // 用户应用身份openId
	TenantId   string `protobuf:"bytes,50,opt,name=tenantId,proto3" json:"tenantId,omitempty"`     // 所属租户
	AppId      int64  `protobuf:"varint,60,opt,name=appId,proto3" json:"appId,omitempty"`          // 所属应用
	IsvId      int64  `protobuf:"varint,70,opt,name=isvId,proto3" json:"isvId,omitempty"`          // 所属应用开发商
	Status     int32  `protobuf:"varint,80,opt,name=status,proto3" json:"status,omitempty"`        // 状态 1-应用授权正常 2-应用授权已撤销 3-租户授权已撤销
	Name       string `protobuf:"bytes,90,opt,name=name,proto3" json:"name,omitempty"`             // 应用下的用户名
}

func (x *S2C_UserAdminDetailGet_Rpn_AppInfoDto) Reset() {
	*x = S2C_UserAdminDetailGet_Rpn_AppInfoDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_UserAdminDetailGet_Rpn_AppInfoDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_UserAdminDetailGet_Rpn_AppInfoDto) ProtoMessage() {}

func (x *S2C_UserAdminDetailGet_Rpn_AppInfoDto) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_UserAdminDetailGet_Rpn_AppInfoDto.ProtoReflect.Descriptor instead.
func (*S2C_UserAdminDetailGet_Rpn_AppInfoDto) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{29, 1}
}

func (x *S2C_UserAdminDetailGet_Rpn_AppInfoDto) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *S2C_UserAdminDetailGet_Rpn_AppInfoDto) GetEmployeeId() string {
	if x != nil {
		return x.EmployeeId
	}
	return ""
}

func (x *S2C_UserAdminDetailGet_Rpn_AppInfoDto) GetUnionId() string {
	if x != nil {
		return x.UnionId
	}
	return ""
}

func (x *S2C_UserAdminDetailGet_Rpn_AppInfoDto) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *S2C_UserAdminDetailGet_Rpn_AppInfoDto) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *S2C_UserAdminDetailGet_Rpn_AppInfoDto) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *S2C_UserAdminDetailGet_Rpn_AppInfoDto) GetIsvId() int64 {
	if x != nil {
		return x.IsvId
	}
	return 0
}

func (x *S2C_UserAdminDetailGet_Rpn_AppInfoDto) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *S2C_UserAdminDetailGet_Rpn_AppInfoDto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type S2C_UserAdminDetailGet_Rpn_TenantInfoDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string `protobuf:"bytes,10,opt,name=userId,proto3" json:"userId,omitempty"`         // 用户物理身份id
	EmployeeId string `protobuf:"bytes,20,opt,name=employeeId,proto3" json:"employeeId,omitempty"` // 用户租户身份id
	TenantId   string `protobuf:"bytes,30,opt,name=tenantId,proto3" json:"tenantId,omitempty"`     // 所属租户
	Name       string `protobuf:"bytes,40,opt,name=name,proto3" json:"name,omitempty"`             // 租户下的用户名
}

func (x *S2C_UserAdminDetailGet_Rpn_TenantInfoDto) Reset() {
	*x = S2C_UserAdminDetailGet_Rpn_TenantInfoDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_UserAdminDetailGet_Rpn_TenantInfoDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_UserAdminDetailGet_Rpn_TenantInfoDto) ProtoMessage() {}

func (x *S2C_UserAdminDetailGet_Rpn_TenantInfoDto) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_UserAdminDetailGet_Rpn_TenantInfoDto.ProtoReflect.Descriptor instead.
func (*S2C_UserAdminDetailGet_Rpn_TenantInfoDto) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{29, 2}
}

func (x *S2C_UserAdminDetailGet_Rpn_TenantInfoDto) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *S2C_UserAdminDetailGet_Rpn_TenantInfoDto) GetEmployeeId() string {
	if x != nil {
		return x.EmployeeId
	}
	return ""
}

func (x *S2C_UserAdminDetailGet_Rpn_TenantInfoDto) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *S2C_UserAdminDetailGet_Rpn_TenantInfoDto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type BasicInfoMsg_Organization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Company string `protobuf:"bytes,1,opt,name=company,proto3" json:"company,omitempty"` // 公司名称
	Title   string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`     // 头衔
	Phone   string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`     // 公司联系方式
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"` // 公司地址
	Name    string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`       // 员工姓名
}

func (x *BasicInfoMsg_Organization) Reset() {
	*x = BasicInfoMsg_Organization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicInfoMsg_Organization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicInfoMsg_Organization) ProtoMessage() {}

func (x *BasicInfoMsg_Organization) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicInfoMsg_Organization.ProtoReflect.Descriptor instead.
func (*BasicInfoMsg_Organization) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{33, 0}
}

func (x *BasicInfoMsg_Organization) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *BasicInfoMsg_Organization) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BasicInfoMsg_Organization) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *BasicInfoMsg_Organization) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *BasicInfoMsg_Organization) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// 应用自定义用户信息
type CompoundInfoReply_SpecificInfoMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 信息类别
	ClassName string `protobuf:"bytes,1,opt,name=className,proto3" json:"className,omitempty"`
	// 用户信息
	Infos *structpb.Struct `protobuf:"bytes,2,opt,name=infos,proto3" json:"infos,omitempty"`
}

func (x *CompoundInfoReply_SpecificInfoMsg) Reset() {
	*x = CompoundInfoReply_SpecificInfoMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompoundInfoReply_SpecificInfoMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundInfoReply_SpecificInfoMsg) ProtoMessage() {}

func (x *CompoundInfoReply_SpecificInfoMsg) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundInfoReply_SpecificInfoMsg.ProtoReflect.Descriptor instead.
func (*CompoundInfoReply_SpecificInfoMsg) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{39, 0}
}

func (x *CompoundInfoReply_SpecificInfoMsg) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *CompoundInfoReply_SpecificInfoMsg) GetInfos() *structpb.Struct {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CompoundInfoReply_AccountInfoMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source   string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`     // 首次创建用户时的账号来源
	SourceId string `protobuf:"bytes,2,opt,name=sourceId,proto3" json:"sourceId,omitempty"` // 账号Id
}

func (x *CompoundInfoReply_AccountInfoMsg) Reset() {
	*x = CompoundInfoReply_AccountInfoMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompoundInfoReply_AccountInfoMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundInfoReply_AccountInfoMsg) ProtoMessage() {}

func (x *CompoundInfoReply_AccountInfoMsg) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundInfoReply_AccountInfoMsg.ProtoReflect.Descriptor instead.
func (*CompoundInfoReply_AccountInfoMsg) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{39, 1}
}

func (x *CompoundInfoReply_AccountInfoMsg) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *CompoundInfoReply_AccountInfoMsg) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

type GetUserBatchRequest_AccessUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AppId string `protobuf:"bytes,2,opt,name=appId,proto3" json:"appId,omitempty"`
}

func (x *GetUserBatchRequest_AccessUser) Reset() {
	*x = GetUserBatchRequest_AccessUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserBatchRequest_AccessUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserBatchRequest_AccessUser) ProtoMessage() {}

func (x *GetUserBatchRequest_AccessUser) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserBatchRequest_AccessUser.ProtoReflect.Descriptor instead.
func (*GetUserBatchRequest_AccessUser) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{40, 0}
}

func (x *GetUserBatchRequest_AccessUser) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *GetUserBatchRequest_AccessUser) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

type SketchyInfoPageReply_SketchyInfoMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenId      string `protobuf:"bytes,1,opt,name=openId,proto3" json:"openId,omitempty"`
	AvatarThumb string `protobuf:"bytes,2,opt,name=avatarThumb,proto3" json:"avatarThumb,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Phone       string `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	Email       string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *SketchyInfoPageReply_SketchyInfoMsg) Reset() {
	*x = SketchyInfoPageReply_SketchyInfoMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SketchyInfoPageReply_SketchyInfoMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SketchyInfoPageReply_SketchyInfoMsg) ProtoMessage() {}

func (x *SketchyInfoPageReply_SketchyInfoMsg) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SketchyInfoPageReply_SketchyInfoMsg.ProtoReflect.Descriptor instead.
func (*SketchyInfoPageReply_SketchyInfoMsg) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{43, 0}
}

func (x *SketchyInfoPageReply_SketchyInfoMsg) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *SketchyInfoPageReply_SketchyInfoMsg) GetAvatarThumb() string {
	if x != nil {
		return x.AvatarThumb
	}
	return ""
}

func (x *SketchyInfoPageReply_SketchyInfoMsg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SketchyInfoPageReply_SketchyInfoMsg) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *SketchyInfoPageReply_SketchyInfoMsg) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type S2C_GetAvatars_Rpn_AvatarInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                   // 头像id
	FileName    string `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"`       // 文件名
	DownloadUrl string `protobuf:"bytes,3,opt,name=downloadUrl,proto3" json:"downloadUrl,omitempty"` // 头像访问链接
}

func (x *S2C_GetAvatars_Rpn_AvatarInfo) Reset() {
	*x = S2C_GetAvatars_Rpn_AvatarInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2C_GetAvatars_Rpn_AvatarInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C_GetAvatars_Rpn_AvatarInfo) ProtoMessage() {}

func (x *S2C_GetAvatars_Rpn_AvatarInfo) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C_GetAvatars_Rpn_AvatarInfo.ProtoReflect.Descriptor instead.
func (*S2C_GetAvatars_Rpn_AvatarInfo) Descriptor() ([]byte, []int) {
	return file_UserService_proto_rawDescGZIP(), []int{53, 0}
}

func (x *S2C_GetAvatars_Rpn_AvatarInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *S2C_GetAvatars_Rpn_AvatarInfo) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *S2C_GetAvatars_Rpn_AvatarInfo) GetDownloadUrl() string {
	if x != nil {
		return x.DownloadUrl
	}
	return ""
}

var File_UserService_proto protoreflect.FileDescriptor

var file_UserService_proto_rawDesc = []byte{
	0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x04, 0x75, 0x73, 0x65, 0x72, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x8b, 0x03, 0x0a,
	0x0d, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0c,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x42, 0x69, 0x67, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x42, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x68, 0x75, 0x6d,
	0x62, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x22, 0xb3, 0x01, 0x0a, 0x11, 0x53,
	0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x19, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x22, 0xef, 0x02, 0x0a, 0x09, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x35, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12,
	0x2d, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0xbc, 0x01, 0x0a, 0x14, 0x43, 0x32, 0x53, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x32, 0x5f, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x31, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x44, 0x0a, 0x14, 0x53, 0x32, 0x43, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x56, 0x32, 0x5f, 0x52, 0x70, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x22, 0xcf, 0x01, 0x0a, 0x1b, 0x43, 0x32, 0x53, 0x5f,
	0x4a, 0x75, 0x6d, 0x65, 0x61, 0x75, 0x78, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x32, 0x5f, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x77, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x77, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x77, 0x64, 0x22, 0x55, 0x0a, 0x1b, 0x53, 0x32, 0x43,
	0x5f, 0x4a, 0x75, 0x6d, 0x65, 0x61, 0x75, 0x78, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x56, 0x32, 0x5f, 0x52, 0x70, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x9b, 0x01, 0x0a, 0x15, 0x43, 0x32, 0x53, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x47, 0x65, 0x74, 0x56, 0x32, 0x5f, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x66, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e,
	0x66, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6e,
	0x66, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x4f, 0x62, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x4f, 0x62, 0x73, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x4f, 0x62, 0x73, 0x22, 0xd7,
	0x05, 0x0a, 0x15, 0x53, 0x32, 0x43, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x47,
	0x65, 0x74, 0x56, 0x32, 0x5f, 0x52, 0x70, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0a, 0x65, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x05, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x42, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x06, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x33, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x53, 0x32, 0x43, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x47, 0x65, 0x74,
	0x56, 0x32, 0x5f, 0x52, 0x70, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x12, 0x23, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x07, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x03, 0x48, 0x08, 0x52, 0x0a, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x41, 0x0a, 0x0b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x70, 0x70, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x1a, 0x43, 0x32, 0x53,
	0x5f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x47, 0x65,
	0x74, 0x56, 0x32, 0x5f, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66,
	0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x66,
	0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6e, 0x66,
	0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x4f, 0x62, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x4f, 0x62, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x4f, 0x62, 0x73, 0x22, 0x4f, 0x0a,
	0x1a, 0x53, 0x32, 0x43, 0x5f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x47, 0x65, 0x74, 0x56, 0x32, 0x5f, 0x52, 0x70, 0x6e, 0x12, 0x31, 0x0a, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x53, 0x32, 0x43, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x47, 0x65,
	0x74, 0x56, 0x32, 0x5f, 0x52, 0x70, 0x6e, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0xb6,
	0x01, 0x0a, 0x18, 0x43, 0x32, 0x53, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x32, 0x5f, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x66, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69,
	0x6e, 0x66, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x0d, 0x69, 0x6e,
	0x76, 0x6f, 0x6b, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x16, 0x43, 0x32, 0x53, 0x5f,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x22,
	0xa3, 0x01, 0x0a, 0x16, 0x53, 0x32, 0x43, 0x5f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x70, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x1a, 0x43, 0x32, 0x53, 0x5f, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x5f, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0x5a, 0x0a,
	0x1a, 0x53, 0x32, 0x43, 0x5f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x5f, 0x52, 0x70, 0x6e, 0x12, 0x3c, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x32, 0x43, 0x5f, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x70, 0x6e, 0x52, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xf9, 0x01, 0x0a, 0x1c, 0x43, 0x32,
	0x53, 0x5f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x65, 0x74, 0x42, 0x79, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75,
	0x74, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x61, 0x75, 0x74, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0xe3, 0x01, 0x0a, 0x1c, 0x53, 0x32, 0x43, 0x5f, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x65, 0x74, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x52, 0x70, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x65, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x49, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x22, 0xd7, 0x07, 0x0a, 0x12,
	0x43, 0x32, 0x53, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x5f, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x49,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x41,
	0x70, 0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x48, 0x08, 0x52, 0x08, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x41, 0x70, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x0b, 0x74, 0x69, 0x6d,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0b, 0x52, 0x14, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x45, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x0c, 0x52, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x11, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09,
	0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x10, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x11, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x88, 0x01, 0x01, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65,
	0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x41, 0x70,
	0x70, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x74, 0x69, 0x6d, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x6f,
	0x72, 0x74, 0x44, 0x69, 0x72, 0x22, 0xa5, 0x01, 0x0a, 0x12, 0x53, 0x32, 0x43, 0x5f, 0x55, 0x73,
	0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x70, 0x6e, 0x5f, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4d, 0x69, 0x63,
	0x72, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0xa9, 0x02,
	0x0a, 0x18, 0x43, 0x32, 0x53, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x47, 0x65, 0x74, 0x56, 0x32, 0x5f, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xd9, 0x01, 0x0a, 0x18, 0x53, 0x32,
	0x43, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x47, 0x65, 0x74,
	0x56, 0x32, 0x5f, 0x52, 0x70, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x1b, 0x43, 0x32, 0x53, 0x5f, 0x52, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x32,
	0x5f, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x38,
	0x0a, 0x1e, 0x43, 0x32, 0x53, 0x5f, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x6c, 0x6c, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x32, 0x5f, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x14, 0x43, 0x32, 0x53, 0x5f,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x32, 0x5f, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xf5, 0x02, 0x0a,
	0x14, 0x53, 0x32, 0x43, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56,
	0x32, 0x5f, 0x52, 0x70, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x73, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x73, 0x6f, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x73, 0x6f,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09,
	0x73, 0x73, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e,
	0x49, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x46, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x24,
	0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x73, 0x6f, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x22, 0x34, 0x0a, 0x1a, 0x43, 0x32, 0x53, 0x5f, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x47, 0x65, 0x74, 0x5f, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x96, 0x07, 0x0a, 0x1a, 0x53,
	0x32, 0x43, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x47, 0x65, 0x74, 0x5f, 0x52, 0x70, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x36, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0a, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x50,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x50,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x32, 0x43, 0x5f,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x47,
	0x65, 0x74, 0x5f, 0x52, 0x70, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x12, 0x47, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x5a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x32, 0x43, 0x5f, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x47, 0x65, 0x74,
	0x5f, 0x52, 0x70, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x74, 0x6f, 0x52,
	0x08, 0x61, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x50, 0x0a, 0x0b, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x32, 0x43, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x47, 0x65, 0x74, 0x5f, 0x52, 0x70, 0x6e,
	0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x74, 0x6f, 0x52, 0x0b,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x1a, 0x41, 0x0a, 0x0b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x1a, 0xea,
	0x01, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x74, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x76,
	0x49, 0x64, 0x18, 0x46, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x73, 0x76, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x50, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x77, 0x0a, 0x0d, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x17, 0x43, 0x32, 0x53, 0x5f, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x12,
	0x1e, 0x0a, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x50, 0x0a, 0x14, 0x43,
	0x32, 0x53, 0x5f, 0x4e, 0x65, 0x77, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x47, 0x65, 0x74, 0x5f,
	0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x6c, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x80, 0x01,
	0x0a, 0x14, 0x53, 0x32, 0x43, 0x5f, 0x4e, 0x65, 0x77, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x47,
	0x65, 0x74, 0x5f, 0x52, 0x70, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e,
	0x49, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64,
	0x22, 0xbc, 0x05, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x2e, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x0a, 0x52, 0x0c, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x1a, 0x82, 0x01,
	0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x42, 0x69, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x69, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x95, 0x01, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75,
	0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x70, 0x70, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x22, 0xcf, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49,
	0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x17, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x72, 0x70, 0x63, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x72, 0x70,
	0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f,
	0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x6f,
	0x70, 0x65, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x22, 0xf9, 0x01, 0x0a, 0x15,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x72, 0x70, 0x63, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x72, 0x70,
	0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x70,
	0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x70,
	0x65, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x66,
	0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x4f, 0x62, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x4f, 0x62, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x75, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x70, 0x70, 0x49, 0x64, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x4f, 0x62, 0x73, 0x22, 0xcd,
	0x03, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x30, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x09, 0x62, 0x61, 0x73,
	0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x4d, 0x73, 0x67, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x1a, 0x5e, 0x0a, 0x0f, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x1a, 0x44, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x75, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x22, 0xf9,
	0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x73,
	0x12, 0x3a, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x69, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x4f, 0x62, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x4f,
	0x62, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x34, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x4f, 0x62, 0x73, 0x22, 0x47, 0x0a, 0x16, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x22, 0xf3, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x6f, 0x72, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x44, 0x69,
	0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xce, 0x02, 0x0a, 0x14, 0x53, 0x6b,
	0x65, 0x74, 0x63, 0x68, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x8a, 0x01,
	0x0a, 0x0e, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xe9, 0x01, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x73, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x73, 0x4e, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4e, 0x65,
	0x77, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xef, 0x01, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4f, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x72,
	0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70,
	0x65, 0x6e, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x29, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x5c, 0x0a,
	0x10, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x5f, 0x0a, 0x19, 0x43,
	0x32, 0x53, 0x5f, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0xb4, 0x01, 0x0a,
	0x12, 0x43, 0x32, 0x53, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0e, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x22, 0xaf, 0x01, 0x0a, 0x12, 0x53, 0x32, 0x43, 0x5f, 0x47, 0x65, 0x74, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x73, 0x5f, 0x52, 0x70, 0x6e, 0x12, 0x3d, 0x0a, 0x07, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x53, 0x32, 0x43, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x73, 0x5f, 0x52, 0x70, 0x6e, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x73, 0x1a, 0x5a, 0x0a, 0x0a, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x55, 0x72, 0x6c, 0x32, 0xb5, 0x03, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3a, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x45, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x73, 0x12, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43,
	0x32, 0x53, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x73, 0x5f, 0x52, 0x65,
	0x71, 0x1a, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x32, 0x43, 0x5f, 0x47, 0x65, 0x74,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x73, 0x5f, 0x52, 0x70, 0x6e, 0x22, 0x00, 0x32, 0x82, 0x03,
	0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x49,
	0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x12, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1b, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x4e, 0x0a, 0x11, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43,
	0x32, 0x53, 0x5f, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x32, 0xf6, 0x05, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x56, 0x32, 0x12, 0x46, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x32, 0x5f, 0x52, 0x65, 0x71, 0x1a, 0x1a,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x32, 0x43, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x56, 0x32, 0x5f, 0x52, 0x70, 0x6e, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x75, 0x6d, 0x65, 0x61, 0x75, 0x78, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x21, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x4a, 0x75, 0x6d,
	0x65, 0x61, 0x75, 0x78, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x32,
	0x5f, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x32, 0x43, 0x5f,
	0x4a, 0x75, 0x6d, 0x65, 0x61, 0x75, 0x78, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x32, 0x5f, 0x52, 0x70, 0x6e, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x43, 0x32, 0x53, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x47, 0x65, 0x74, 0x56,
	0x32, 0x5f, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x32, 0x43,
	0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x47, 0x65, 0x74, 0x56, 0x32, 0x5f, 0x52,
	0x70, 0x6e, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x43, 0x32, 0x53, 0x5f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x47, 0x65, 0x74, 0x56, 0x32, 0x5f, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x53, 0x32, 0x43, 0x5f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x47, 0x65, 0x74, 0x56, 0x32, 0x5f, 0x52, 0x70, 0x6e, 0x22, 0x00, 0x12, 0x4a,
	0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x32, 0x5f, 0x52, 0x65, 0x71,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x53, 0x32, 0x43, 0x5f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x70, 0x6e, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x12, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x20, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x5f, 0x52,
	0x65, 0x71, 0x1a, 0x20, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x32, 0x43, 0x5f, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x5f, 0x52, 0x70, 0x6e, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x47, 0x65, 0x74, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x52,
	0x65, 0x71, 0x1a, 0x22, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x32, 0x43, 0x5f, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x65, 0x74, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x52, 0x70, 0x6e, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x32, 0x53,
	0x5f, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x5f, 0x74, 0x1a,
	0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x32, 0x43, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x70, 0x6e, 0x5f, 0x74, 0x22, 0x00, 0x32, 0xd4, 0x02, 0x0a, 0x0c,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x47, 0x65, 0x74, 0x56, 0x32, 0x5f, 0x52, 0x65, 0x71, 0x1a, 0x1e,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x32, 0x43, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x47, 0x65, 0x74, 0x56, 0x32, 0x5f, 0x52, 0x70, 0x6e, 0x22, 0x00,
	0x12, 0x50, 0x0a, 0x11, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x32, 0x53,
	0x5f, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x56, 0x32, 0x5f, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x14, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x6c, 0x6c, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x6c, 0x6c, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x32, 0x5f, 0x52, 0x65, 0x71,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0a, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x43, 0x32, 0x53, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x32,
	0x5f, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x32, 0x43, 0x5f,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x32, 0x5f, 0x52, 0x70, 0x6e,
	0x22, 0x00, 0x32, 0xba, 0x01, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x43, 0x32, 0x53, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x47, 0x65, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x53, 0x32, 0x43, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x47, 0x65, 0x74, 0x5f, 0x52, 0x70, 0x6e, 0x22, 0x00, 0x12, 0x4f,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x32,
	0x53, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32,
	0x60, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x77, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43,
	0x32, 0x53, 0x5f, 0x4e, 0x65, 0x77, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x47, 0x65, 0x74, 0x5f,
	0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x32, 0x43, 0x5f, 0x4e,
	0x65, 0x77, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x47, 0x65, 0x74, 0x5f, 0x52, 0x70, 0x6e, 0x22,
	0x00, 0x42, 0x3c, 0x0a, 0x19, 0x63, 0x6e, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x6a, 0x75,
	0x6d, 0x65, 0x61, 0x75, 0x78, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6c, 0x69, 0x62, 0x42, 0x10,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x0b, 0x2e, 0x2f, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_UserService_proto_rawDescOnce sync.Once
	file_UserService_proto_rawDescData = file_UserService_proto_rawDesc
)

func file_UserService_proto_rawDescGZIP() []byte {
	file_UserService_proto_rawDescOnce.Do(func() {
		file_UserService_proto_rawDescData = protoimpl.X.CompressGZIP(file_UserService_proto_rawDescData)
	})
	return file_UserService_proto_rawDescData
}

var file_UserService_proto_msgTypes = make([]protoimpl.MessageInfo, 64)
var file_UserService_proto_goTypes = []interface{}{
	(*AccountInfo)(nil),                              // 0: user.AccountInfo
	(*Organization)(nil),                             // 1: user.Organization
	(*PlainUserInfo)(nil),                            // 2: user.PlainUserInfo
	(*SensitiveUserInfo)(nil),                        // 3: user.SensitiveUserInfo
	(*MicroUser)(nil),                                // 4: user.MicroUser
	(*C2S_UserCreateV2_Req)(nil),                     // 5: user.C2S_UserCreateV2_Req
	(*S2C_UserCreateV2_Rpn)(nil),                     // 6: user.S2C_UserCreateV2_Rpn
	(*C2S_JumeauxUserCreateV2_Req)(nil),              // 7: user.C2S_JumeauxUserCreateV2_Req
	(*S2C_JumeauxUserCreateV2_Rpn)(nil),              // 8: user.S2C_JumeauxUserCreateV2_Rpn
	(*C2S_UserInfoGetV2_Req)(nil),                    // 9: user.C2S_UserInfoGetV2_Req
	(*S2C_UserInfoGetV2_Rpn)(nil),                    // 10: user.S2C_UserInfoGetV2_Rpn
	(*C2S_BatchUserInfoGetV2_Req)(nil),               // 11: user.C2S_BatchUserInfoGetV2_Req
	(*S2C_BatchUserInfoGetV2_Rpn)(nil),               // 12: user.S2C_BatchUserInfoGetV2_Rpn
	(*C2S_UserInfoUpdateV2_Req)(nil),                 // 13: user.C2S_UserInfoUpdateV2_Req
	(*C2S_IdentityCreate_Req)(nil),                   // 14: user.C2S_IdentityCreate_Req
	(*S2C_IdentityCreate_Rpn)(nil),                   // 15: user.S2C_IdentityCreate_Rpn
	(*C2S_IdentitiesBatchGet_Req)(nil),               // 16: user.C2S_IdentitiesBatchGet_Req
	(*S2C_IdentitiesBatchGet_Rpn)(nil),               // 17: user.S2C_IdentitiesBatchGet_Rpn
	(*C2S_IdentityGetByAccount_Req)(nil),             // 18: user.C2S_IdentityGetByAccount_Req
	(*S2C_IdentityGetByAccount_Rpn)(nil),             // 19: user.S2C_IdentityGetByAccount_Rpn
	(*C2S_UserQueryReqT)(nil),                        // 20: user.C2S_UserQueryReq_t
	(*S2C_UserQueryRpnT)(nil),                        // 21: user.S2C_UserQueryRpn_t
	(*C2S_AccessTokenGetV2_Req)(nil),                 // 22: user.C2S_AccessTokenGetV2_Req
	(*S2C_AccessTokenGetV2_Rpn)(nil),                 // 23: user.S2C_AccessTokenGetV2_Rpn
	(*C2S_RevokeAccessTokenV2_Req)(nil),              // 24: user.C2S_RevokeAccessTokenV2_Req
	(*C2S_RevokeAllAccessTokenV2_Req)(nil),           // 25: user.C2S_RevokeAllAccessTokenV2_Req
	(*C2S_CheckTokenV2_Req)(nil),                     // 26: user.C2S_CheckTokenV2_Req
	(*S2C_CheckTokenV2_Rpn)(nil),                     // 27: user.S2C_CheckTokenV2_Rpn
	(*C2S_UserAdminDetailGet_Req)(nil),               // 28: user.C2S_UserAdminDetailGet_Req
	(*S2C_UserAdminDetailGet_Rpn)(nil),               // 29: user.S2C_UserAdminDetailGet_Rpn
	(*C2S_UserAdminUpdate_Req)(nil),                  // 30: user.C2S_UserAdminUpdate_Req
	(*C2S_NewOpenIdGet_Req)(nil),                     // 31: user.C2S_NewOpenIdGet_Req
	(*S2C_NewOpenIdGet_Rpn)(nil),                     // 32: user.S2C_NewOpenIdGet_Rpn
	(*BasicInfoMsg)(nil),                             // 33: user.BasicInfoMsg
	(*CheckTokenRequest)(nil),                        // 34: user.CheckTokenRequest
	(*CheckTokenReply)(nil),                          // 35: user.CheckTokenReply
	(*CheckTokenStreamRequest)(nil),                  // 36: user.CheckTokenStreamRequest
	(*CheckTokenStreamReply)(nil),                    // 37: user.CheckTokenStreamReply
	(*GetUserRequest)(nil),                           // 38: user.GetUserRequest
	(*CompoundInfoReply)(nil),                        // 39: user.CompoundInfoReply
	(*GetUserBatchRequest)(nil),                      // 40: user.GetUserBatchRequest
	(*CompoundInfoBatchReply)(nil),                   // 41: user.CompoundInfoBatchReply
	(*GetUserListRequest)(nil),                       // 42: user.GetUserListRequest
	(*SketchyInfoPageReply)(nil),                     // 43: user.SketchyInfoPageReply
	(*CreateUserRequest)(nil),                        // 44: user.CreateUserRequest
	(*CreateUserReply)(nil),                          // 45: user.CreateUserReply
	(*GetAccessTokenRequest)(nil),                    // 46: user.GetAccessTokenRequest
	(*GetAccessTokenReply)(nil),                      // 47: user.GetAccessTokenReply
	(*UpdateUserBasicRequest)(nil),                   // 48: user.UpdateUserBasicRequest
	(*GetUserContactRequest)(nil),                    // 49: user.GetUserContactRequest
	(*UserContactReply)(nil),                         // 50: user.UserContactReply
	(*C2S_RevokeAccessToken_Req)(nil),                // 51: user.C2S_RevokeAccessToken_Req
	(*C2S_GetAvatars_Req)(nil),                       // 52: user.C2S_GetAvatars_Req
	(*S2C_GetAvatars_Rpn)(nil),                       // 53: user.S2C_GetAvatars_Rpn
	(*S2C_UserInfoGetV2_Rpn_AccountInfo)(nil),        // 54: user.S2C_UserInfoGetV2_Rpn.AccountInfo
	(*S2C_UserAdminDetailGet_Rpn_AccountInfo)(nil),   // 55: user.S2C_UserAdminDetailGet_Rpn.AccountInfo
	(*S2C_UserAdminDetailGet_Rpn_AppInfoDto)(nil),    // 56: user.S2C_UserAdminDetailGet_Rpn.AppInfoDto
	(*S2C_UserAdminDetailGet_Rpn_TenantInfoDto)(nil), // 57: user.S2C_UserAdminDetailGet_Rpn.TenantInfoDto
	(*BasicInfoMsg_Organization)(nil),                // 58: user.BasicInfoMsg.Organization
	(*CompoundInfoReply_SpecificInfoMsg)(nil),        // 59: user.CompoundInfoReply.SpecificInfoMsg
	(*CompoundInfoReply_AccountInfoMsg)(nil),         // 60: user.CompoundInfoReply.AccountInfoMsg
	(*GetUserBatchRequest_AccessUser)(nil),           // 61: user.GetUserBatchRequest.AccessUser
	(*SketchyInfoPageReply_SketchyInfoMsg)(nil),      // 62: user.SketchyInfoPageReply.SketchyInfoMsg
	(*S2C_GetAvatars_Rpn_AvatarInfo)(nil),            // 63: user.S2C_GetAvatars_Rpn.AvatarInfo
	(*structpb.Struct)(nil),                          // 64: google.protobuf.Struct
	(*emptypb.Empty)(nil),                            // 65: google.protobuf.Empty
}
var file_UserService_proto_depIdxs = []int32{
	1,  // 0: user.PlainUserInfo.organization:type_name -> user.Organization
	0,  // 1: user.MicroUser.accountInfos:type_name -> user.AccountInfo
	2,  // 2: user.C2S_UserCreateV2_Req.plainInfo:type_name -> user.PlainUserInfo
	3,  // 3: user.C2S_UserCreateV2_Req.sensitiveInfo:type_name -> user.SensitiveUserInfo
	2,  // 4: user.S2C_UserInfoGetV2_Rpn.plainInfo:type_name -> user.PlainUserInfo
	3,  // 5: user.S2C_UserInfoGetV2_Rpn.sensitiveInfo:type_name -> user.SensitiveUserInfo
	54, // 6: user.S2C_UserInfoGetV2_Rpn.accountInfos:type_name -> user.S2C_UserInfoGetV2_Rpn.AccountInfo
	10, // 7: user.S2C_BatchUserInfoGetV2_Rpn.users:type_name -> user.S2C_UserInfoGetV2_Rpn
	2,  // 8: user.C2S_UserInfoUpdateV2_Req.plainInfo:type_name -> user.PlainUserInfo
	15, // 9: user.S2C_IdentitiesBatchGet_Rpn.identities:type_name -> user.S2C_IdentityCreate_Rpn
	4,  // 10: user.S2C_UserQueryRpn_t.users:type_name -> user.MicroUser
	2,  // 11: user.C2S_AccessTokenGetV2_Req.plainInfo:type_name -> user.PlainUserInfo
	1,  // 12: user.S2C_UserAdminDetailGet_Rpn.organization:type_name -> user.Organization
	55, // 13: user.S2C_UserAdminDetailGet_Rpn.accountInfos:type_name -> user.S2C_UserAdminDetailGet_Rpn.AccountInfo
	56, // 14: user.S2C_UserAdminDetailGet_Rpn.appInfos:type_name -> user.S2C_UserAdminDetailGet_Rpn.AppInfoDto
	57, // 15: user.S2C_UserAdminDetailGet_Rpn.tenantInfos:type_name -> user.S2C_UserAdminDetailGet_Rpn.TenantInfoDto
	58, // 16: user.BasicInfoMsg.organization:type_name -> user.BasicInfoMsg.Organization
	33, // 17: user.CompoundInfoReply.basicInfo:type_name -> user.BasicInfoMsg
	59, // 18: user.CompoundInfoReply.specificInfos:type_name -> user.CompoundInfoReply.SpecificInfoMsg
	60, // 19: user.CompoundInfoReply.accountInfos:type_name -> user.CompoundInfoReply.AccountInfoMsg
	61, // 20: user.GetUserBatchRequest.users:type_name -> user.GetUserBatchRequest.AccessUser
	39, // 21: user.CompoundInfoBatchReply.users:type_name -> user.CompoundInfoReply
	62, // 22: user.SketchyInfoPageReply.users:type_name -> user.SketchyInfoPageReply.SketchyInfoMsg
	33, // 23: user.CreateUserRequest.userInfo:type_name -> user.BasicInfoMsg
	33, // 24: user.GetAccessTokenRequest.userInfo:type_name -> user.BasicInfoMsg
	33, // 25: user.UpdateUserBasicRequest.userInfo:type_name -> user.BasicInfoMsg
	63, // 26: user.S2C_GetAvatars_Rpn.avatars:type_name -> user.S2C_GetAvatars_Rpn.AvatarInfo
	64, // 27: user.CompoundInfoReply.SpecificInfoMsg.infos:type_name -> google.protobuf.Struct
	34, // 28: user.UserService.CheckToken:input_type -> user.CheckTokenRequest
	36, // 29: user.UserService.CheckTokenStream:input_type -> user.CheckTokenStreamRequest
	38, // 30: user.UserService.GetUser:input_type -> user.GetUserRequest
	40, // 31: user.UserService.GetUserBatch:input_type -> user.GetUserBatchRequest
	42, // 32: user.UserService.GetUserList:input_type -> user.GetUserListRequest
	52, // 33: user.UserService.GetAvatars:input_type -> user.C2S_GetAvatars_Req
	44, // 34: user.UserBasicService.CreateUser:input_type -> user.CreateUserRequest
	46, // 35: user.UserBasicService.GetAccessToken:input_type -> user.GetAccessTokenRequest
	48, // 36: user.UserBasicService.UpdateUserBasic:input_type -> user.UpdateUserBasicRequest
	49, // 37: user.UserBasicService.GetUserContact:input_type -> user.GetUserContactRequest
	51, // 38: user.UserBasicService.RevokeAccessToken:input_type -> user.C2S_RevokeAccessToken_Req
	5,  // 39: user.UserServiceV2.CreateUser:input_type -> user.C2S_UserCreateV2_Req
	7,  // 40: user.UserServiceV2.CreateJumeauxUser:input_type -> user.C2S_JumeauxUserCreateV2_Req
	9,  // 41: user.UserServiceV2.GetUserInfo:input_type -> user.C2S_UserInfoGetV2_Req
	11, // 42: user.UserServiceV2.BatchGetUserInfo:input_type -> user.C2S_BatchUserInfoGetV2_Req
	13, // 43: user.UserServiceV2.UpdateUserInfo:input_type -> user.C2S_UserInfoUpdateV2_Req
	14, // 44: user.UserServiceV2.CreateIdentity:input_type -> user.C2S_IdentityCreate_Req
	16, // 45: user.UserServiceV2.BatchGetIdentities:input_type -> user.C2S_IdentitiesBatchGet_Req
	18, // 46: user.UserServiceV2.GetIdentityByAccount:input_type -> user.C2S_IdentityGetByAccount_Req
	20, // 47: user.UserServiceV2.QueryUser:input_type -> user.C2S_UserQueryReq_t
	22, // 48: user.TokenService.GetAccessToken:input_type -> user.C2S_AccessTokenGetV2_Req
	24, // 49: user.TokenService.RevokeAccessToken:input_type -> user.C2S_RevokeAccessTokenV2_Req
	25, // 50: user.TokenService.RevokeAllAccessToken:input_type -> user.C2S_RevokeAllAccessTokenV2_Req
	26, // 51: user.TokenService.CheckToken:input_type -> user.C2S_CheckTokenV2_Req
	28, // 52: user.UserAdminService.GetUserDetail:input_type -> user.C2S_UserAdminDetailGet_Req
	30, // 53: user.UserAdminService.UpdateTenantUserInfo:input_type -> user.C2S_UserAdminUpdate_Req
	31, // 54: user.CompatibilityService.GetNewOpenId:input_type -> user.C2S_NewOpenIdGet_Req
	35, // 55: user.UserService.CheckToken:output_type -> user.CheckTokenReply
	37, // 56: user.UserService.CheckTokenStream:output_type -> user.CheckTokenStreamReply
	39, // 57: user.UserService.GetUser:output_type -> user.CompoundInfoReply
	41, // 58: user.UserService.GetUserBatch:output_type -> user.CompoundInfoBatchReply
	43, // 59: user.UserService.GetUserList:output_type -> user.SketchyInfoPageReply
	53, // 60: user.UserService.GetAvatars:output_type -> user.S2C_GetAvatars_Rpn
	45, // 61: user.UserBasicService.CreateUser:output_type -> user.CreateUserReply
	47, // 62: user.UserBasicService.GetAccessToken:output_type -> user.GetAccessTokenReply
	65, // 63: user.UserBasicService.UpdateUserBasic:output_type -> google.protobuf.Empty
	50, // 64: user.UserBasicService.GetUserContact:output_type -> user.UserContactReply
	65, // 65: user.UserBasicService.RevokeAccessToken:output_type -> google.protobuf.Empty
	6,  // 66: user.UserServiceV2.CreateUser:output_type -> user.S2C_UserCreateV2_Rpn
	8,  // 67: user.UserServiceV2.CreateJumeauxUser:output_type -> user.S2C_JumeauxUserCreateV2_Rpn
	10, // 68: user.UserServiceV2.GetUserInfo:output_type -> user.S2C_UserInfoGetV2_Rpn
	12, // 69: user.UserServiceV2.BatchGetUserInfo:output_type -> user.S2C_BatchUserInfoGetV2_Rpn
	65, // 70: user.UserServiceV2.UpdateUserInfo:output_type -> google.protobuf.Empty
	15, // 71: user.UserServiceV2.CreateIdentity:output_type -> user.S2C_IdentityCreate_Rpn
	17, // 72: user.UserServiceV2.BatchGetIdentities:output_type -> user.S2C_IdentitiesBatchGet_Rpn
	19, // 73: user.UserServiceV2.GetIdentityByAccount:output_type -> user.S2C_IdentityGetByAccount_Rpn
	21, // 74: user.UserServiceV2.QueryUser:output_type -> user.S2C_UserQueryRpn_t
	23, // 75: user.TokenService.GetAccessToken:output_type -> user.S2C_AccessTokenGetV2_Rpn
	65, // 76: user.TokenService.RevokeAccessToken:output_type -> google.protobuf.Empty
	65, // 77: user.TokenService.RevokeAllAccessToken:output_type -> google.protobuf.Empty
	27, // 78: user.TokenService.CheckToken:output_type -> user.S2C_CheckTokenV2_Rpn
	29, // 79: user.UserAdminService.GetUserDetail:output_type -> user.S2C_UserAdminDetailGet_Rpn
	65, // 80: user.UserAdminService.UpdateTenantUserInfo:output_type -> google.protobuf.Empty
	32, // 81: user.CompatibilityService.GetNewOpenId:output_type -> user.S2C_NewOpenIdGet_Rpn
	55, // [55:82] is the sub-list for method output_type
	28, // [28:55] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_UserService_proto_init() }
func file_UserService_proto_init() {
	if File_UserService_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_UserService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlainUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SensitiveUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MicroUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_UserCreateV2_Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_UserCreateV2_Rpn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_JumeauxUserCreateV2_Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_JumeauxUserCreateV2_Rpn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_UserInfoGetV2_Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_UserInfoGetV2_Rpn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_BatchUserInfoGetV2_Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_BatchUserInfoGetV2_Rpn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_UserInfoUpdateV2_Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_IdentityCreate_Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_IdentityCreate_Rpn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_IdentitiesBatchGet_Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_IdentitiesBatchGet_Rpn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_IdentityGetByAccount_Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_IdentityGetByAccount_Rpn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_UserQueryReqT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_UserQueryRpnT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_AccessTokenGetV2_Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_AccessTokenGetV2_Rpn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_RevokeAccessTokenV2_Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_RevokeAllAccessTokenV2_Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_CheckTokenV2_Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_CheckTokenV2_Rpn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_UserAdminDetailGet_Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_UserAdminDetailGet_Rpn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_UserAdminUpdate_Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_NewOpenIdGet_Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_NewOpenIdGet_Rpn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicInfoMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenStreamReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompoundInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompoundInfoBatchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SketchyInfoPageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccessTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccessTokenReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserBasicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserContactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserContactReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_RevokeAccessToken_Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_GetAvatars_Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_GetAvatars_Rpn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_UserInfoGetV2_Rpn_AccountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_UserAdminDetailGet_Rpn_AccountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_UserAdminDetailGet_Rpn_AppInfoDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_UserAdminDetailGet_Rpn_TenantInfoDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicInfoMsg_Organization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompoundInfoReply_SpecificInfoMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompoundInfoReply_AccountInfoMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserBatchRequest_AccessUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SketchyInfoPageReply_SketchyInfoMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2C_GetAvatars_Rpn_AvatarInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_UserService_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_UserService_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_UserService_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_UserService_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_UserService_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_UserService_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_UserService_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_UserService_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_UserService_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_UserService_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_UserService_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_UserService_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_UserService_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_UserService_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_UserService_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_UserService_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_UserService_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_UserService_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_UserService_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_UserService_proto_msgTypes[33].OneofWrappers = []interface{}{}
	file_UserService_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_UserService_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_UserService_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_UserService_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_UserService_proto_msgTypes[40].OneofWrappers = []interface{}{}
	file_UserService_proto_msgTypes[42].OneofWrappers = []interface{}{}
	file_UserService_proto_msgTypes[50].OneofWrappers = []interface{}{}
	file_UserService_proto_msgTypes[52].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_UserService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   64,
			NumExtensions: 0,
			NumServices:   6,
		},
		GoTypes:           file_UserService_proto_goTypes,
		DependencyIndexes: file_UserService_proto_depIdxs,
		MessageInfos:      file_UserService_proto_msgTypes,
	}.Build()
	File_UserService_proto = out.File
	file_UserService_proto_rawDesc = nil
	file_UserService_proto_goTypes = nil
	file_UserService_proto_depIdxs = nil
}
