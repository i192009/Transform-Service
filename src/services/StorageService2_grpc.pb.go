// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: StorageService2.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageServiceClient is the client API for StorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageServiceClient interface {
	// 创建文件元数据
	CreateMetadata(ctx context.Context, in *C2S_CreateMetadataReqT, opts ...grpc.CallOption) (*C2S_CreateMetadataRpnT, error)
	// 删除文件元数据
	DeleteMetadata(ctx context.Context, in *C2S_DeleteMetadataReqT, opts ...grpc.CallOption) (*C2S_DeleteMetadataRpnT, error)
	// 根据自定义过滤条件删除文件元数据
	DeleteMetadataByCustomFilter(ctx context.Context, in *C2S_DeleteMetadataByCustomFilterReqT, opts ...grpc.CallOption) (*C2S_DeleteMetadataByCustomFilterRpnT, error)
	// 获取上传文件的url
	GetUploadFileUrl(ctx context.Context, in *C2S_GetUploadFileUrlReqT, opts ...grpc.CallOption) (*C2S_GetUploadFileUrlRpnT, error)
	// 获取下载文件的url
	GetDownloadFileUrl(ctx context.Context, in *C2S_GetDownloadFileUrlReqT, opts ...grpc.CallOption) (*C2S_GetDownloadFileUrlRpnT, error)
	// 批量删除对象
	DeleteObjects(ctx context.Context, in *C2S_DeleteObjectsReqT, opts ...grpc.CallOption) (*C2S_DeleteObjectsRpnT, error)
	// 拷贝对象
	CopyObject(ctx context.Context, in *C2S_CopyObjectReqT, opts ...grpc.CallOption) (*C2S_CopyObjectRpnT, error)
	// 预处理
	PreHandle(ctx context.Context, in *C2S_PreHandleReqT, opts ...grpc.CallOption) (*C2S_PreHandleRpnT, error)
	// 根据token处理
	HandleByToken(ctx context.Context, in *C2S_HandleByTokenReqT, opts ...grpc.CallOption) (*C2S_HandleByTokenRpnT, error)
	// 获得包含根路径的key
	GetObjectKeyWithRootPath(ctx context.Context, in *C2S_GetObjectKeyWithRootPathReqT, opts ...grpc.CallOption) (*C2S_GetObjectKeyWithRootPathRpnT, error)
	// 检查对象是否存在
	CheckObjectExist(ctx context.Context, in *C2S_CheckObjectExistReqT, opts ...grpc.CallOption) (*C2S_CheckObjectExistRpnT, error)
	// 获取对象的元数据, 注意: 这个元数据指的是obs/ceph的元数据, 并非子虔的文件元数据
	GetStorageMetadata(ctx context.Context, in *C2S_GetStorageMetadataReqT, opts ...grpc.CallOption) (*C2S_GetStorageMetadataRpnT, error)
}

type storageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageServiceClient(cc grpc.ClientConnInterface) StorageServiceClient {
	return &storageServiceClient{cc}
}

func (c *storageServiceClient) CreateMetadata(ctx context.Context, in *C2S_CreateMetadataReqT, opts ...grpc.CallOption) (*C2S_CreateMetadataRpnT, error) {
	out := new(C2S_CreateMetadataRpnT)
	err := c.cc.Invoke(ctx, "/storage2.StorageService/CreateMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) DeleteMetadata(ctx context.Context, in *C2S_DeleteMetadataReqT, opts ...grpc.CallOption) (*C2S_DeleteMetadataRpnT, error) {
	out := new(C2S_DeleteMetadataRpnT)
	err := c.cc.Invoke(ctx, "/storage2.StorageService/DeleteMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) DeleteMetadataByCustomFilter(ctx context.Context, in *C2S_DeleteMetadataByCustomFilterReqT, opts ...grpc.CallOption) (*C2S_DeleteMetadataByCustomFilterRpnT, error) {
	out := new(C2S_DeleteMetadataByCustomFilterRpnT)
	err := c.cc.Invoke(ctx, "/storage2.StorageService/DeleteMetadataByCustomFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetUploadFileUrl(ctx context.Context, in *C2S_GetUploadFileUrlReqT, opts ...grpc.CallOption) (*C2S_GetUploadFileUrlRpnT, error) {
	out := new(C2S_GetUploadFileUrlRpnT)
	err := c.cc.Invoke(ctx, "/storage2.StorageService/GetUploadFileUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetDownloadFileUrl(ctx context.Context, in *C2S_GetDownloadFileUrlReqT, opts ...grpc.CallOption) (*C2S_GetDownloadFileUrlRpnT, error) {
	out := new(C2S_GetDownloadFileUrlRpnT)
	err := c.cc.Invoke(ctx, "/storage2.StorageService/GetDownloadFileUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) DeleteObjects(ctx context.Context, in *C2S_DeleteObjectsReqT, opts ...grpc.CallOption) (*C2S_DeleteObjectsRpnT, error) {
	out := new(C2S_DeleteObjectsRpnT)
	err := c.cc.Invoke(ctx, "/storage2.StorageService/DeleteObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) CopyObject(ctx context.Context, in *C2S_CopyObjectReqT, opts ...grpc.CallOption) (*C2S_CopyObjectRpnT, error) {
	out := new(C2S_CopyObjectRpnT)
	err := c.cc.Invoke(ctx, "/storage2.StorageService/CopyObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) PreHandle(ctx context.Context, in *C2S_PreHandleReqT, opts ...grpc.CallOption) (*C2S_PreHandleRpnT, error) {
	out := new(C2S_PreHandleRpnT)
	err := c.cc.Invoke(ctx, "/storage2.StorageService/PreHandle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) HandleByToken(ctx context.Context, in *C2S_HandleByTokenReqT, opts ...grpc.CallOption) (*C2S_HandleByTokenRpnT, error) {
	out := new(C2S_HandleByTokenRpnT)
	err := c.cc.Invoke(ctx, "/storage2.StorageService/HandleByToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetObjectKeyWithRootPath(ctx context.Context, in *C2S_GetObjectKeyWithRootPathReqT, opts ...grpc.CallOption) (*C2S_GetObjectKeyWithRootPathRpnT, error) {
	out := new(C2S_GetObjectKeyWithRootPathRpnT)
	err := c.cc.Invoke(ctx, "/storage2.StorageService/GetObjectKeyWithRootPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) CheckObjectExist(ctx context.Context, in *C2S_CheckObjectExistReqT, opts ...grpc.CallOption) (*C2S_CheckObjectExistRpnT, error) {
	out := new(C2S_CheckObjectExistRpnT)
	err := c.cc.Invoke(ctx, "/storage2.StorageService/CheckObjectExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetStorageMetadata(ctx context.Context, in *C2S_GetStorageMetadataReqT, opts ...grpc.CallOption) (*C2S_GetStorageMetadataRpnT, error) {
	out := new(C2S_GetStorageMetadataRpnT)
	err := c.cc.Invoke(ctx, "/storage2.StorageService/GetStorageMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServiceServer is the server API for StorageService service.
// All implementations must embed UnimplementedStorageServiceServer
// for forward compatibility
type StorageServiceServer interface {
	// 创建文件元数据
	CreateMetadata(context.Context, *C2S_CreateMetadataReqT) (*C2S_CreateMetadataRpnT, error)
	// 删除文件元数据
	DeleteMetadata(context.Context, *C2S_DeleteMetadataReqT) (*C2S_DeleteMetadataRpnT, error)
	// 根据自定义过滤条件删除文件元数据
	DeleteMetadataByCustomFilter(context.Context, *C2S_DeleteMetadataByCustomFilterReqT) (*C2S_DeleteMetadataByCustomFilterRpnT, error)
	// 获取上传文件的url
	GetUploadFileUrl(context.Context, *C2S_GetUploadFileUrlReqT) (*C2S_GetUploadFileUrlRpnT, error)
	// 获取下载文件的url
	GetDownloadFileUrl(context.Context, *C2S_GetDownloadFileUrlReqT) (*C2S_GetDownloadFileUrlRpnT, error)
	// 批量删除对象
	DeleteObjects(context.Context, *C2S_DeleteObjectsReqT) (*C2S_DeleteObjectsRpnT, error)
	// 拷贝对象
	CopyObject(context.Context, *C2S_CopyObjectReqT) (*C2S_CopyObjectRpnT, error)
	// 预处理
	PreHandle(context.Context, *C2S_PreHandleReqT) (*C2S_PreHandleRpnT, error)
	// 根据token处理
	HandleByToken(context.Context, *C2S_HandleByTokenReqT) (*C2S_HandleByTokenRpnT, error)
	// 获得包含根路径的key
	GetObjectKeyWithRootPath(context.Context, *C2S_GetObjectKeyWithRootPathReqT) (*C2S_GetObjectKeyWithRootPathRpnT, error)
	// 检查对象是否存在
	CheckObjectExist(context.Context, *C2S_CheckObjectExistReqT) (*C2S_CheckObjectExistRpnT, error)
	// 获取对象的元数据, 注意: 这个元数据指的是obs/ceph的元数据, 并非子虔的文件元数据
	GetStorageMetadata(context.Context, *C2S_GetStorageMetadataReqT) (*C2S_GetStorageMetadataRpnT, error)
	mustEmbedUnimplementedStorageServiceServer()
}

// UnimplementedStorageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStorageServiceServer struct {
}

func (UnimplementedStorageServiceServer) CreateMetadata(context.Context, *C2S_CreateMetadataReqT) (*C2S_CreateMetadataRpnT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMetadata not implemented")
}
func (UnimplementedStorageServiceServer) DeleteMetadata(context.Context, *C2S_DeleteMetadataReqT) (*C2S_DeleteMetadataRpnT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMetadata not implemented")
}
func (UnimplementedStorageServiceServer) DeleteMetadataByCustomFilter(context.Context, *C2S_DeleteMetadataByCustomFilterReqT) (*C2S_DeleteMetadataByCustomFilterRpnT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMetadataByCustomFilter not implemented")
}
func (UnimplementedStorageServiceServer) GetUploadFileUrl(context.Context, *C2S_GetUploadFileUrlReqT) (*C2S_GetUploadFileUrlRpnT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUploadFileUrl not implemented")
}
func (UnimplementedStorageServiceServer) GetDownloadFileUrl(context.Context, *C2S_GetDownloadFileUrlReqT) (*C2S_GetDownloadFileUrlRpnT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDownloadFileUrl not implemented")
}
func (UnimplementedStorageServiceServer) DeleteObjects(context.Context, *C2S_DeleteObjectsReqT) (*C2S_DeleteObjectsRpnT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObjects not implemented")
}
func (UnimplementedStorageServiceServer) CopyObject(context.Context, *C2S_CopyObjectReqT) (*C2S_CopyObjectRpnT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyObject not implemented")
}
func (UnimplementedStorageServiceServer) PreHandle(context.Context, *C2S_PreHandleReqT) (*C2S_PreHandleRpnT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreHandle not implemented")
}
func (UnimplementedStorageServiceServer) HandleByToken(context.Context, *C2S_HandleByTokenReqT) (*C2S_HandleByTokenRpnT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleByToken not implemented")
}
func (UnimplementedStorageServiceServer) GetObjectKeyWithRootPath(context.Context, *C2S_GetObjectKeyWithRootPathReqT) (*C2S_GetObjectKeyWithRootPathRpnT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectKeyWithRootPath not implemented")
}
func (UnimplementedStorageServiceServer) CheckObjectExist(context.Context, *C2S_CheckObjectExistReqT) (*C2S_CheckObjectExistRpnT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckObjectExist not implemented")
}
func (UnimplementedStorageServiceServer) GetStorageMetadata(context.Context, *C2S_GetStorageMetadataReqT) (*C2S_GetStorageMetadataRpnT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageMetadata not implemented")
}
func (UnimplementedStorageServiceServer) mustEmbedUnimplementedStorageServiceServer() {}

// UnsafeStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServiceServer will
// result in compilation errors.
type UnsafeStorageServiceServer interface {
	mustEmbedUnimplementedStorageServiceServer()
}

func RegisterStorageServiceServer(s grpc.ServiceRegistrar, srv StorageServiceServer) {
	s.RegisterService(&StorageService_ServiceDesc, srv)
}

func _StorageService_CreateMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_CreateMetadataReqT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).CreateMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage2.StorageService/CreateMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).CreateMetadata(ctx, req.(*C2S_CreateMetadataReqT))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_DeleteMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_DeleteMetadataReqT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).DeleteMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage2.StorageService/DeleteMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).DeleteMetadata(ctx, req.(*C2S_DeleteMetadataReqT))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_DeleteMetadataByCustomFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_DeleteMetadataByCustomFilterReqT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).DeleteMetadataByCustomFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage2.StorageService/DeleteMetadataByCustomFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).DeleteMetadataByCustomFilter(ctx, req.(*C2S_DeleteMetadataByCustomFilterReqT))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetUploadFileUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_GetUploadFileUrlReqT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetUploadFileUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage2.StorageService/GetUploadFileUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetUploadFileUrl(ctx, req.(*C2S_GetUploadFileUrlReqT))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetDownloadFileUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_GetDownloadFileUrlReqT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetDownloadFileUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage2.StorageService/GetDownloadFileUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetDownloadFileUrl(ctx, req.(*C2S_GetDownloadFileUrlReqT))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_DeleteObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_DeleteObjectsReqT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).DeleteObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage2.StorageService/DeleteObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).DeleteObjects(ctx, req.(*C2S_DeleteObjectsReqT))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_CopyObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_CopyObjectReqT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).CopyObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage2.StorageService/CopyObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).CopyObject(ctx, req.(*C2S_CopyObjectReqT))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_PreHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_PreHandleReqT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).PreHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage2.StorageService/PreHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).PreHandle(ctx, req.(*C2S_PreHandleReqT))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_HandleByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_HandleByTokenReqT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).HandleByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage2.StorageService/HandleByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).HandleByToken(ctx, req.(*C2S_HandleByTokenReqT))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetObjectKeyWithRootPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_GetObjectKeyWithRootPathReqT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetObjectKeyWithRootPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage2.StorageService/GetObjectKeyWithRootPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetObjectKeyWithRootPath(ctx, req.(*C2S_GetObjectKeyWithRootPathReqT))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_CheckObjectExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_CheckObjectExistReqT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).CheckObjectExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage2.StorageService/CheckObjectExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).CheckObjectExist(ctx, req.(*C2S_CheckObjectExistReqT))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetStorageMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_GetStorageMetadataReqT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetStorageMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage2.StorageService/GetStorageMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetStorageMetadata(ctx, req.(*C2S_GetStorageMetadataReqT))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageService_ServiceDesc is the grpc.ServiceDesc for StorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storage2.StorageService",
	HandlerType: (*StorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMetadata",
			Handler:    _StorageService_CreateMetadata_Handler,
		},
		{
			MethodName: "DeleteMetadata",
			Handler:    _StorageService_DeleteMetadata_Handler,
		},
		{
			MethodName: "DeleteMetadataByCustomFilter",
			Handler:    _StorageService_DeleteMetadataByCustomFilter_Handler,
		},
		{
			MethodName: "GetUploadFileUrl",
			Handler:    _StorageService_GetUploadFileUrl_Handler,
		},
		{
			MethodName: "GetDownloadFileUrl",
			Handler:    _StorageService_GetDownloadFileUrl_Handler,
		},
		{
			MethodName: "DeleteObjects",
			Handler:    _StorageService_DeleteObjects_Handler,
		},
		{
			MethodName: "CopyObject",
			Handler:    _StorageService_CopyObject_Handler,
		},
		{
			MethodName: "PreHandle",
			Handler:    _StorageService_PreHandle_Handler,
		},
		{
			MethodName: "HandleByToken",
			Handler:    _StorageService_HandleByToken_Handler,
		},
		{
			MethodName: "GetObjectKeyWithRootPath",
			Handler:    _StorageService_GetObjectKeyWithRootPath_Handler,
		},
		{
			MethodName: "CheckObjectExist",
			Handler:    _StorageService_CheckObjectExist_Handler,
		},
		{
			MethodName: "GetStorageMetadata",
			Handler:    _StorageService_GetStorageMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "StorageService2.proto",
}
