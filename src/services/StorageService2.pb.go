// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.1
// source: StorageService2.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type C2S_CreateMetadataReqT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetaId       string `protobuf:"bytes,1,opt,name=metaId,proto3" json:"metaId,omitempty"`               // 元数据id, 当元数据id已存在时, 会执行升级版本操作
	AppId        string `protobuf:"bytes,7,opt,name=appId,proto3" json:"appId,omitempty"`                 // 文件归属的appId
	OpenId       string `protobuf:"bytes,13,opt,name=openId,proto3" json:"openId,omitempty"`              // 文件归属的用户的openId
	ScopeId      int32  `protobuf:"varint,19,opt,name=scopeId,proto3" json:"scopeId,omitempty"`           // 文件所使用的scopeId
	Key          string `protobuf:"bytes,25,opt,name=key,proto3" json:"key,omitempty"`                    // 文件归属在存储系统中的key
	Name         string `protobuf:"bytes,31,opt,name=name,proto3" json:"name,omitempty"`                  // 文件名称
	Type         string `protobuf:"bytes,37,opt,name=type,proto3" json:"type,omitempty"`                  // 数据类型
	Remark       string `protobuf:"bytes,43,opt,name=remark,proto3" json:"remark,omitempty"`              // 备注
	UserData     string `protobuf:"bytes,49,opt,name=userData,proto3" json:"userData,omitempty"`          // 对应的接入系统的数据
	SpaceSize    int64  `protobuf:"varint,55,opt,name=spaceSize,proto3" json:"spaceSize,omitempty"`       // 文件大小
	InstanceId   string `protobuf:"bytes,61,opt,name=instanceId,proto3" json:"instanceId,omitempty"`      // 文件归属的应用实例id
	CompanyId    string `protobuf:"bytes,67,opt,name=companyId,proto3" json:"companyId,omitempty"`        // 文件归属的企业id
	UserId       string `protobuf:"bytes,73,opt,name=userId,proto3" json:"userId,omitempty"`              // 文件归属的用户的Id
	EmployeeId   string `protobuf:"bytes,79,opt,name=employeeId,proto3" json:"employeeId,omitempty"`      // 文件归属的用户的employeeId
	UnionId      string `protobuf:"bytes,85,opt,name=unionId,proto3" json:"unionId,omitempty"`            // 文件归属的用户的unionId
	CapacityType int32  `protobuf:"varint,91,opt,name=capacityType,proto3" json:"capacityType,omitempty"` // 计入容量的类型, 0或空: 不计入容量, 1: 计入容量, 2: 被覆盖
}

func (x *C2S_CreateMetadataReqT) Reset() {
	*x = C2S_CreateMetadataReqT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StorageService2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_CreateMetadataReqT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_CreateMetadataReqT) ProtoMessage() {}

func (x *C2S_CreateMetadataReqT) ProtoReflect() protoreflect.Message {
	mi := &file_StorageService2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_CreateMetadataReqT.ProtoReflect.Descriptor instead.
func (*C2S_CreateMetadataReqT) Descriptor() ([]byte, []int) {
	return file_StorageService2_proto_rawDescGZIP(), []int{0}
}

func (x *C2S_CreateMetadataReqT) GetMetaId() string {
	if x != nil {
		return x.MetaId
	}
	return ""
}

func (x *C2S_CreateMetadataReqT) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *C2S_CreateMetadataReqT) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *C2S_CreateMetadataReqT) GetScopeId() int32 {
	if x != nil {
		return x.ScopeId
	}
	return 0
}

func (x *C2S_CreateMetadataReqT) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *C2S_CreateMetadataReqT) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *C2S_CreateMetadataReqT) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *C2S_CreateMetadataReqT) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *C2S_CreateMetadataReqT) GetUserData() string {
	if x != nil {
		return x.UserData
	}
	return ""
}

func (x *C2S_CreateMetadataReqT) GetSpaceSize() int64 {
	if x != nil {
		return x.SpaceSize
	}
	return 0
}

func (x *C2S_CreateMetadataReqT) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *C2S_CreateMetadataReqT) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *C2S_CreateMetadataReqT) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *C2S_CreateMetadataReqT) GetEmployeeId() string {
	if x != nil {
		return x.EmployeeId
	}
	return ""
}

func (x *C2S_CreateMetadataReqT) GetUnionId() string {
	if x != nil {
		return x.UnionId
	}
	return ""
}

func (x *C2S_CreateMetadataReqT) GetCapacityType() int32 {
	if x != nil {
		return x.CapacityType
	}
	return 0
}

type C2S_CreateMetadataRpnT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetaId  string `protobuf:"bytes,10,opt,name=metaId,proto3" json:"metaId,omitempty"`
	Version *int32 `protobuf:"varint,20,opt,name=version,proto3,oneof" json:"version,omitempty"`
}

func (x *C2S_CreateMetadataRpnT) Reset() {
	*x = C2S_CreateMetadataRpnT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StorageService2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_CreateMetadataRpnT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_CreateMetadataRpnT) ProtoMessage() {}

func (x *C2S_CreateMetadataRpnT) ProtoReflect() protoreflect.Message {
	mi := &file_StorageService2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_CreateMetadataRpnT.ProtoReflect.Descriptor instead.
func (*C2S_CreateMetadataRpnT) Descriptor() ([]byte, []int) {
	return file_StorageService2_proto_rawDescGZIP(), []int{1}
}

func (x *C2S_CreateMetadataRpnT) GetMetaId() string {
	if x != nil {
		return x.MetaId
	}
	return ""
}

func (x *C2S_CreateMetadataRpnT) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

type C2S_GetUploadFileUrlReqT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScopeId                  int32                       `protobuf:"varint,10,opt,name=scopeId,proto3" json:"scopeId,omitempty"`                                  // 资源id
	Expires                  int64                       `protobuf:"varint,20,opt,name=expires,proto3" json:"expires,omitempty"`                                  // 超时时间
	RequestUploadUrlFileInfo []*RequestUploadUrlFileInfo `protobuf:"bytes,30,rep,name=requestUploadUrlFileInfo,proto3" json:"requestUploadUrlFileInfo,omitempty"` // 文件列表
	InvokeUserInfo           *InvokeUser                 `protobuf:"bytes,40,opt,name=invokeUserInfo,proto3,oneof" json:"invokeUserInfo,omitempty"`               // 调用者信息
	UseInnerEndpoint         *bool                       `protobuf:"varint,50,opt,name=useInnerEndpoint,proto3,oneof" json:"useInnerEndpoint,omitempty"`          // 是否使用内网地址
}

func (x *C2S_GetUploadFileUrlReqT) Reset() {
	*x = C2S_GetUploadFileUrlReqT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StorageService2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_GetUploadFileUrlReqT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_GetUploadFileUrlReqT) ProtoMessage() {}

func (x *C2S_GetUploadFileUrlReqT) ProtoReflect() protoreflect.Message {
	mi := &file_StorageService2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_GetUploadFileUrlReqT.ProtoReflect.Descriptor instead.
func (*C2S_GetUploadFileUrlReqT) Descriptor() ([]byte, []int) {
	return file_StorageService2_proto_rawDescGZIP(), []int{2}
}

func (x *C2S_GetUploadFileUrlReqT) GetScopeId() int32 {
	if x != nil {
		return x.ScopeId
	}
	return 0
}

func (x *C2S_GetUploadFileUrlReqT) GetExpires() int64 {
	if x != nil {
		return x.Expires
	}
	return 0
}

func (x *C2S_GetUploadFileUrlReqT) GetRequestUploadUrlFileInfo() []*RequestUploadUrlFileInfo {
	if x != nil {
		return x.RequestUploadUrlFileInfo
	}
	return nil
}

func (x *C2S_GetUploadFileUrlReqT) GetInvokeUserInfo() *InvokeUser {
	if x != nil {
		return x.InvokeUserInfo
	}
	return nil
}

func (x *C2S_GetUploadFileUrlReqT) GetUseInnerEndpoint() bool {
	if x != nil && x.UseInnerEndpoint != nil {
		return *x.UseInnerEndpoint
	}
	return false
}

type C2S_GetUploadFileUrlRpnT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *structpb.Struct `protobuf:"bytes,5,opt,name=response,proto3" json:"response,omitempty"` //返回值示例: {"上传时设置的文件的key" : "上传文件的url"}
}

func (x *C2S_GetUploadFileUrlRpnT) Reset() {
	*x = C2S_GetUploadFileUrlRpnT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StorageService2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_GetUploadFileUrlRpnT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_GetUploadFileUrlRpnT) ProtoMessage() {}

func (x *C2S_GetUploadFileUrlRpnT) ProtoReflect() protoreflect.Message {
	mi := &file_StorageService2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_GetUploadFileUrlRpnT.ProtoReflect.Descriptor instead.
func (*C2S_GetUploadFileUrlRpnT) Descriptor() ([]byte, []int) {
	return file_StorageService2_proto_rawDescGZIP(), []int{3}
}

func (x *C2S_GetUploadFileUrlRpnT) GetResponse() *structpb.Struct {
	if x != nil {
		return x.Response
	}
	return nil
}

type RequestUploadUrlFileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key           string           `protobuf:"bytes,10,opt,name=key,proto3" json:"key,omitempty"`                           // 文件key
	Size          int64            `protobuf:"varint,20,opt,name=size,proto3" json:"size,omitempty"`                        // 文件大小
	ContentType   *string          `protobuf:"bytes,30,opt,name=contentType,proto3,oneof" json:"contentType,omitempty"`     // 文件类型
	CheckCapacity bool             `protobuf:"varint,40,opt,name=checkCapacity,proto3" json:"checkCapacity,omitempty"`      // 是否检查容量, 通过token获得上传链接时, 不支持校验容量
	CustomSetting *structpb.Struct `protobuf:"bytes,50,opt,name=customSetting,proto3,oneof" json:"customSetting,omitempty"` // 自定义设置, 会设置到返回url的参与签名的header中, <string,string>类型
}

func (x *RequestUploadUrlFileInfo) Reset() {
	*x = RequestUploadUrlFileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StorageService2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestUploadUrlFileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestUploadUrlFileInfo) ProtoMessage() {}

func (x *RequestUploadUrlFileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_StorageService2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestUploadUrlFileInfo.ProtoReflect.Descriptor instead.
func (*RequestUploadUrlFileInfo) Descriptor() ([]byte, []int) {
	return file_StorageService2_proto_rawDescGZIP(), []int{4}
}

func (x *RequestUploadUrlFileInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RequestUploadUrlFileInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *RequestUploadUrlFileInfo) GetContentType() string {
	if x != nil && x.ContentType != nil {
		return *x.ContentType
	}
	return ""
}

func (x *RequestUploadUrlFileInfo) GetCheckCapacity() bool {
	if x != nil {
		return x.CheckCapacity
	}
	return false
}

func (x *RequestUploadUrlFileInfo) GetCustomSetting() *structpb.Struct {
	if x != nil {
		return x.CustomSetting
	}
	return nil
}

type C2S_DeleteMetadataReqT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metas          []*C2S_CreateMetadataRpnT `protobuf:"bytes,10,rep,name=metas,proto3" json:"metas,omitempty"`                   // 元数据列表
	ScopeId        int32                     `protobuf:"varint,20,opt,name=scopeId,proto3" json:"scopeId,omitempty"`              // 文件所使用的scopeId
	InvokeUserInfo *InvokeUser               `protobuf:"bytes,30,opt,name=invokeUserInfo,proto3" json:"invokeUserInfo,omitempty"` // 调用者信息
}

func (x *C2S_DeleteMetadataReqT) Reset() {
	*x = C2S_DeleteMetadataReqT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StorageService2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_DeleteMetadataReqT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_DeleteMetadataReqT) ProtoMessage() {}

func (x *C2S_DeleteMetadataReqT) ProtoReflect() protoreflect.Message {
	mi := &file_StorageService2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_DeleteMetadataReqT.ProtoReflect.Descriptor instead.
func (*C2S_DeleteMetadataReqT) Descriptor() ([]byte, []int) {
	return file_StorageService2_proto_rawDescGZIP(), []int{5}
}

func (x *C2S_DeleteMetadataReqT) GetMetas() []*C2S_CreateMetadataRpnT {
	if x != nil {
		return x.Metas
	}
	return nil
}

func (x *C2S_DeleteMetadataReqT) GetScopeId() int32 {
	if x != nil {
		return x.ScopeId
	}
	return 0
}

func (x *C2S_DeleteMetadataReqT) GetInvokeUserInfo() *InvokeUser {
	if x != nil {
		return x.InvokeUserInfo
	}
	return nil
}

type C2S_DeleteMetadataRpnT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *C2S_DeleteMetadataRpnT) Reset() {
	*x = C2S_DeleteMetadataRpnT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StorageService2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_DeleteMetadataRpnT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_DeleteMetadataRpnT) ProtoMessage() {}

func (x *C2S_DeleteMetadataRpnT) ProtoReflect() protoreflect.Message {
	mi := &file_StorageService2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_DeleteMetadataRpnT.ProtoReflect.Descriptor instead.
func (*C2S_DeleteMetadataRpnT) Descriptor() ([]byte, []int) {
	return file_StorageService2_proto_rawDescGZIP(), []int{6}
}

type C2S_DeleteMetadataByCustomFilterReqT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomFilter   string      `protobuf:"bytes,10,opt,name=customFilter,proto3" json:"customFilter,omitempty"`     // 自定义过滤条件, json格式字符串, 会把过滤条件对应到的元数据进行逻辑删除
	ScopeId        int32       `protobuf:"varint,20,opt,name=scopeId,proto3" json:"scopeId,omitempty"`              // 文件所使用的scopeId
	Operate        string      `protobuf:"bytes,30,opt,name=operate,proto3" json:"operate,omitempty"`               // 元数据的操作模式
	InvokeUserInfo *InvokeUser `protobuf:"bytes,40,opt,name=invokeUserInfo,proto3" json:"invokeUserInfo,omitempty"` // 调用者信息
}

func (x *C2S_DeleteMetadataByCustomFilterReqT) Reset() {
	*x = C2S_DeleteMetadataByCustomFilterReqT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StorageService2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_DeleteMetadataByCustomFilterReqT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_DeleteMetadataByCustomFilterReqT) ProtoMessage() {}

func (x *C2S_DeleteMetadataByCustomFilterReqT) ProtoReflect() protoreflect.Message {
	mi := &file_StorageService2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_DeleteMetadataByCustomFilterReqT.ProtoReflect.Descriptor instead.
func (*C2S_DeleteMetadataByCustomFilterReqT) Descriptor() ([]byte, []int) {
	return file_StorageService2_proto_rawDescGZIP(), []int{7}
}

func (x *C2S_DeleteMetadataByCustomFilterReqT) GetCustomFilter() string {
	if x != nil {
		return x.CustomFilter
	}
	return ""
}

func (x *C2S_DeleteMetadataByCustomFilterReqT) GetScopeId() int32 {
	if x != nil {
		return x.ScopeId
	}
	return 0
}

func (x *C2S_DeleteMetadataByCustomFilterReqT) GetOperate() string {
	if x != nil {
		return x.Operate
	}
	return ""
}

func (x *C2S_DeleteMetadataByCustomFilterReqT) GetInvokeUserInfo() *InvokeUser {
	if x != nil {
		return x.InvokeUserInfo
	}
	return nil
}

type C2S_DeleteMetadataByCustomFilterRpnT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *C2S_DeleteMetadataByCustomFilterRpnT) Reset() {
	*x = C2S_DeleteMetadataByCustomFilterRpnT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StorageService2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_DeleteMetadataByCustomFilterRpnT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_DeleteMetadataByCustomFilterRpnT) ProtoMessage() {}

func (x *C2S_DeleteMetadataByCustomFilterRpnT) ProtoReflect() protoreflect.Message {
	mi := &file_StorageService2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_DeleteMetadataByCustomFilterRpnT.ProtoReflect.Descriptor instead.
func (*C2S_DeleteMetadataByCustomFilterRpnT) Descriptor() ([]byte, []int) {
	return file_StorageService2_proto_rawDescGZIP(), []int{8}
}

// 调用者信息
type InvokeUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid            string `protobuf:"bytes,10,opt,name=uid,proto3" json:"uid,omitempty"`                       //
	AppId          string `protobuf:"bytes,20,opt,name=appId,proto3" json:"appId,omitempty"`                   //
	Platform       int32  `protobuf:"varint,30,opt,name=platform,proto3" json:"platform,omitempty"`            //
	AccountSource  string `protobuf:"bytes,40,opt,name=accountSource,proto3" json:"accountSource,omitempty"`   //
	AccountName    string `protobuf:"bytes,50,opt,name=accountName,proto3" json:"accountName,omitempty"`       //
	OrganizationId string `protobuf:"bytes,60,opt,name=organizationId,proto3" json:"organizationId,omitempty"` //
	EmployeeId     string `protobuf:"bytes,70,opt,name=employeeId,proto3" json:"employeeId,omitempty"`         //
	UnionId        string `protobuf:"bytes,80,opt,name=unionId,proto3" json:"unionId,omitempty"`               //
	OpenId         string `protobuf:"bytes,90,opt,name=openId,proto3" json:"openId,omitempty"`                 //
	InstanceId     string `protobuf:"bytes,95,opt,name=instanceId,proto3" json:"instanceId,omitempty"`         //
}

func (x *InvokeUser) Reset() {
	*x = InvokeUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StorageService2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeUser) ProtoMessage() {}

func (x *InvokeUser) ProtoReflect() protoreflect.Message {
	mi := &file_StorageService2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeUser.ProtoReflect.Descriptor instead.
func (*InvokeUser) Descriptor() ([]byte, []int) {
	return file_StorageService2_proto_rawDescGZIP(), []int{9}
}

func (x *InvokeUser) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *InvokeUser) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *InvokeUser) GetPlatform() int32 {
	if x != nil {
		return x.Platform
	}
	return 0
}

func (x *InvokeUser) GetAccountSource() string {
	if x != nil {
		return x.AccountSource
	}
	return ""
}

func (x *InvokeUser) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *InvokeUser) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *InvokeUser) GetEmployeeId() string {
	if x != nil {
		return x.EmployeeId
	}
	return ""
}

func (x *InvokeUser) GetUnionId() string {
	if x != nil {
		return x.UnionId
	}
	return ""
}

func (x *InvokeUser) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *InvokeUser) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type C2S_DeleteObjectsReqT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScopeId        int32             `protobuf:"varint,10,opt,name=scopeId,proto3" json:"scopeId,omitempty"`              // 所使用的scopeId, 注意, objectIdentity中的scopeId在这个方法中不起作用
	ObjectIdentity []*ObjectIdentity `protobuf:"bytes,20,rep,name=objectIdentity,proto3" json:"objectIdentity,omitempty"` // 对象标识
}

func (x *C2S_DeleteObjectsReqT) Reset() {
	*x = C2S_DeleteObjectsReqT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StorageService2_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_DeleteObjectsReqT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_DeleteObjectsReqT) ProtoMessage() {}

func (x *C2S_DeleteObjectsReqT) ProtoReflect() protoreflect.Message {
	mi := &file_StorageService2_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_DeleteObjectsReqT.ProtoReflect.Descriptor instead.
func (*C2S_DeleteObjectsReqT) Descriptor() ([]byte, []int) {
	return file_StorageService2_proto_rawDescGZIP(), []int{10}
}

func (x *C2S_DeleteObjectsReqT) GetScopeId() int32 {
	if x != nil {
		return x.ScopeId
	}
	return 0
}

func (x *C2S_DeleteObjectsReqT) GetObjectIdentity() []*ObjectIdentity {
	if x != nil {
		return x.ObjectIdentity
	}
	return nil
}

type C2S_DeleteObjectsRpnT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeleteObjectsResult []*DeleteObjectsResult `protobuf:"bytes,10,rep,name=deleteObjectsResult,proto3" json:"deleteObjectsResult,omitempty"`
}

func (x *C2S_DeleteObjectsRpnT) Reset() {
	*x = C2S_DeleteObjectsRpnT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StorageService2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_DeleteObjectsRpnT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_DeleteObjectsRpnT) ProtoMessage() {}

func (x *C2S_DeleteObjectsRpnT) ProtoReflect() protoreflect.Message {
	mi := &file_StorageService2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_DeleteObjectsRpnT.ProtoReflect.Descriptor instead.
func (*C2S_DeleteObjectsRpnT) Descriptor() ([]byte, []int) {
	return file_StorageService2_proto_rawDescGZIP(), []int{11}
}

func (x *C2S_DeleteObjectsRpnT) GetDeleteObjectsResult() []*DeleteObjectsResult {
	if x != nil {
		return x.DeleteObjectsResult
	}
	return nil
}

type DeleteObjectsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectKey           string  `protobuf:"bytes,10,opt,name=objectKey,proto3" json:"objectKey,omitempty"`                           // 操作的对象的key
	Version             string  `protobuf:"bytes,20,opt,name=version,proto3" json:"version,omitempty"`                               // 对象的版本
	DeleteMarker        bool    `protobuf:"varint,30,opt,name=deleteMarker,proto3" json:"deleteMarker,omitempty"`                    // 标识对象是否标记删除, 多版本状态下不会真正删除文件, 而是标记文件为删除状态
	DeleteMarkerVersion *string `protobuf:"bytes,40,opt,name=deleteMarkerVersion,proto3,oneof" json:"deleteMarkerVersion,omitempty"` //
}

func (x *DeleteObjectsResult) Reset() {
	*x = DeleteObjectsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StorageService2_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteObjectsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteObjectsResult) ProtoMessage() {}

func (x *DeleteObjectsResult) ProtoReflect() protoreflect.Message {
	mi := &file_StorageService2_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteObjectsResult.ProtoReflect.Descriptor instead.
func (*DeleteObjectsResult) Descriptor() ([]byte, []int) {
	return file_StorageService2_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteObjectsResult) GetObjectKey() string {
	if x != nil {
		return x.ObjectKey
	}
	return ""
}

func (x *DeleteObjectsResult) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DeleteObjectsResult) GetDeleteMarker() bool {
	if x != nil {
		return x.DeleteMarker
	}
	return false
}

func (x *DeleteObjectsResult) GetDeleteMarkerVersion() string {
	if x != nil && x.DeleteMarkerVersion != nil {
		return *x.DeleteMarkerVersion
	}
	return ""
}

type ObjectIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string  `protobuf:"bytes,10,opt,name=key,proto3" json:"key,omitempty"`               // 对象存储的路径
	Version *string `protobuf:"bytes,20,opt,name=version,proto3,oneof" json:"version,omitempty"` // 对象版本, 当桶的多版本状态是开启时，不指定版本删除对象将产生一个带唯一版本号的删除标记，并不删除对象；当桶的多版本状态是Suspended时，不指定版本删除将删除版本号为null的对象，并将产生一个版本号为null的删除标记, 如果要删除指定版本的对象，请求可携带versionId消息参数。
	ScopeId int32   `protobuf:"varint,30,opt,name=scopeId,proto3" json:"scopeId,omitempty"`      // 所使用的scopeId
}

func (x *ObjectIdentity) Reset() {
	*x = ObjectIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StorageService2_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectIdentity) ProtoMessage() {}

func (x *ObjectIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_StorageService2_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectIdentity.ProtoReflect.Descriptor instead.
func (*ObjectIdentity) Descriptor() ([]byte, []int) {
	return file_StorageService2_proto_rawDescGZIP(), []int{13}
}

func (x *ObjectIdentity) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ObjectIdentity) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *ObjectIdentity) GetScopeId() int32 {
	if x != nil {
		return x.ScopeId
	}
	return 0
}

type C2S_PreHandleReqT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectIdentity     []*ObjectIdentity `protobuf:"bytes,10,rep,name=objectIdentity,proto3" json:"objectIdentity,omitempty"`                // 对象标识
	ExpireTimeInSecond *int32            `protobuf:"varint,20,opt,name=expireTimeInSecond,proto3,oneof" json:"expireTimeInSecond,omitempty"` // token过期时间, 单位: 秒, 默认值: 60
	AllowHandleType    int32             `protobuf:"varint,30,opt,name=allowHandleType,proto3" json:"allowHandleType,omitempty"`             // 允许的操作类型,由高位到低位分别表示: 允许生成上传连接;允许生成下载链接;允许复制;允许删除
	CustomProperties   *structpb.Struct  `protobuf:"bytes,40,opt,name=customProperties,proto3,oneof" json:"customProperties,omitempty"`      // 自定义属性, 在调用HandleByToken时会返回, 用于业务方自行处理某些特殊的业务逻辑 <String, Object>类型
	MaxNumOfUse        *int32            `protobuf:"varint,50,opt,name=maxNumOfUse,proto3,oneof" json:"maxNumOfUse,omitempty"`               // 最大使用次数, 默认值: 1, 小于1时, 不做使用次数限制
	UploadUrlPrefix    *string           `protobuf:"bytes,60,opt,name=uploadUrlPrefix,proto3,oneof" json:"uploadUrlPrefix,omitempty"`        // 上传文件的前缀, 前后无斜杠, 当allowHandleType中包含0b1000时, 可以设置该值
	UploadScopeId      *int32            `protobuf:"varint,70,opt,name=uploadScopeId,proto3,oneof" json:"uploadScopeId,omitempty"`           // 上传文件的scopeId, 当allowHandleType中包含0b1000时, 必须设置该值
}

func (x *C2S_PreHandleReqT) Reset() {
	*x = C2S_PreHandleReqT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StorageService2_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_PreHandleReqT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_PreHandleReqT) ProtoMessage() {}

func (x *C2S_PreHandleReqT) ProtoReflect() protoreflect.Message {
	mi := &file_StorageService2_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_PreHandleReqT.ProtoReflect.Descriptor instead.
func (*C2S_PreHandleReqT) Descriptor() ([]byte, []int) {
	return file_StorageService2_proto_rawDescGZIP(), []int{14}
}

func (x *C2S_PreHandleReqT) GetObjectIdentity() []*ObjectIdentity {
	if x != nil {
		return x.ObjectIdentity
	}
	return nil
}

func (x *C2S_PreHandleReqT) GetExpireTimeInSecond() int32 {
	if x != nil && x.ExpireTimeInSecond != nil {
		return *x.ExpireTimeInSecond
	}
	return 0
}

func (x *C2S_PreHandleReqT) GetAllowHandleType() int32 {
	if x != nil {
		return x.AllowHandleType
	}
	return 0
}

func (x *C2S_PreHandleReqT) GetCustomProperties() *structpb.Struct {
	if x != nil {
		return x.CustomProperties
	}
	return nil
}

func (x *C2S_PreHandleReqT) GetMaxNumOfUse() int32 {
	if x != nil && x.MaxNumOfUse != nil {
		return *x.MaxNumOfUse
	}
	return 0
}

func (x *C2S_PreHandleReqT) GetUploadUrlPrefix() string {
	if x != nil && x.UploadUrlPrefix != nil {
		return *x.UploadUrlPrefix
	}
	return ""
}

func (x *C2S_PreHandleReqT) GetUploadScopeId() int32 {
	if x != nil && x.UploadScopeId != nil {
		return *x.UploadScopeId
	}
	return 0
}

type C2S_PreHandleRpnT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,10,opt,name=token,proto3" json:"token,omitempty"` // token
}

func (x *C2S_PreHandleRpnT) Reset() {
	*x = C2S_PreHandleRpnT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StorageService2_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_PreHandleRpnT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_PreHandleRpnT) ProtoMessage() {}

func (x *C2S_PreHandleRpnT) ProtoReflect() protoreflect.Message {
	mi := &file_StorageService2_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_PreHandleRpnT.ProtoReflect.Descriptor instead.
func (*C2S_PreHandleRpnT) Descriptor() ([]byte, []int) {
	return file_StorageService2_proto_rawDescGZIP(), []int{15}
}

func (x *C2S_PreHandleRpnT) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type C2S_HandleByTokenReqT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token            string                      `protobuf:"bytes,10,opt,name=token,proto3" json:"token,omitempty"`                              // token
	ScopeId          *int32                      `protobuf:"varint,20,opt,name=scopeId,proto3,oneof" json:"scopeId,omitempty"`                   // 目标的scope, 拷贝等操作时必须传入
	KeyPrefix        *string                     `protobuf:"bytes,30,opt,name=keyPrefix,proto3,oneof" json:"keyPrefix,omitempty"`                // 目标路径的key前缀, 如: 文件拷贝到的目标路径采用keyPrefix + 原文件路径, 前后无斜杠
	HandleType       int32                       `protobuf:"varint,40,opt,name=handleType,proto3" json:"handleType,omitempty"`                   // 操作类型,由高位到低位分别表示: 生成上传连接;生成下载链接;允许复制;允许删除
	UploadFileInfo   []*RequestUploadUrlFileInfo `protobuf:"bytes,50,rep,name=uploadFileInfo,proto3" json:"uploadFileInfo,omitempty"`            // 上传文件信息, 当handleType中包含0b1000时, 必须设置该值
	UseInnerEndpoint *bool                       `protobuf:"varint,60,opt,name=useInnerEndpoint,proto3,oneof" json:"useInnerEndpoint,omitempty"` // 是否使用内网地址, 当handleType中包含0b100或0b1000时, 可以设置该值
}

func (x *C2S_HandleByTokenReqT) Reset() {
	*x = C2S_HandleByTokenReqT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StorageService2_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_HandleByTokenReqT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_HandleByTokenReqT) ProtoMessage() {}

func (x *C2S_HandleByTokenReqT) ProtoReflect() protoreflect.Message {
	mi := &file_StorageService2_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_HandleByTokenReqT.ProtoReflect.Descriptor instead.
func (*C2S_HandleByTokenReqT) Descriptor() ([]byte, []int) {
	return file_StorageService2_proto_rawDescGZIP(), []int{16}
}

func (x *C2S_HandleByTokenReqT) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *C2S_HandleByTokenReqT) GetScopeId() int32 {
	if x != nil && x.ScopeId != nil {
		return *x.ScopeId
	}
	return 0
}

func (x *C2S_HandleByTokenReqT) GetKeyPrefix() string {
	if x != nil && x.KeyPrefix != nil {
		return *x.KeyPrefix
	}
	return ""
}

func (x *C2S_HandleByTokenReqT) GetHandleType() int32 {
	if x != nil {
		return x.HandleType
	}
	return 0
}

func (x *C2S_HandleByTokenReqT) GetUploadFileInfo() []*RequestUploadUrlFileInfo {
	if x != nil {
		return x.UploadFileInfo
	}
	return nil
}

func (x *C2S_HandleByTokenReqT) GetUseInnerEndpoint() bool {
	if x != nil && x.UseInnerEndpoint != nil {
		return *x.UseInnerEndpoint
	}
	return false
}

type C2S_HandleByTokenRpnT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HandleInfo  *C2S_PreHandleReqT `protobuf:"bytes,10,opt,name=handleInfo,proto3" json:"handleInfo,omitempty"`         // 操作的文件列表
	DownloadUrl *structpb.Struct   `protobuf:"bytes,20,opt,name=downloadUrl,proto3,oneof" json:"downloadUrl,omitempty"` // 当handleType为0b100时, 会返回这个数据, 内容是文件的key和对应下载地址的映射, <string,string>类型
	UploadUrl   *structpb.Struct   `protobuf:"bytes,30,opt,name=uploadUrl,proto3,oneof" json:"uploadUrl,omitempty"`     // 当handleType为0b1000时, 会返回这个数据, 内容是uploadFileKey和对应上传地址的映射, <string,string>类型
}

func (x *C2S_HandleByTokenRpnT) Reset() {
	*x = C2S_HandleByTokenRpnT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StorageService2_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_HandleByTokenRpnT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_HandleByTokenRpnT) ProtoMessage() {}

func (x *C2S_HandleByTokenRpnT) ProtoReflect() protoreflect.Message {
	mi := &file_StorageService2_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_HandleByTokenRpnT.ProtoReflect.Descriptor instead.
func (*C2S_HandleByTokenRpnT) Descriptor() ([]byte, []int) {
	return file_StorageService2_proto_rawDescGZIP(), []int{17}
}

func (x *C2S_HandleByTokenRpnT) GetHandleInfo() *C2S_PreHandleReqT {
	if x != nil {
		return x.HandleInfo
	}
	return nil
}

func (x *C2S_HandleByTokenRpnT) GetDownloadUrl() *structpb.Struct {
	if x != nil {
		return x.DownloadUrl
	}
	return nil
}

func (x *C2S_HandleByTokenRpnT) GetUploadUrl() *structpb.Struct {
	if x != nil {
		return x.UploadUrl
	}
	return nil
}

type C2S_GetObjectKeyWithRootPathReqT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectKey string `protobuf:"bytes,10,opt,name=objectKey,proto3" json:"objectKey,omitempty"`
	ScopeId   int32  `protobuf:"varint,20,opt,name=scopeId,proto3" json:"scopeId,omitempty"`
}

func (x *C2S_GetObjectKeyWithRootPathReqT) Reset() {
	*x = C2S_GetObjectKeyWithRootPathReqT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StorageService2_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_GetObjectKeyWithRootPathReqT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_GetObjectKeyWithRootPathReqT) ProtoMessage() {}

func (x *C2S_GetObjectKeyWithRootPathReqT) ProtoReflect() protoreflect.Message {
	mi := &file_StorageService2_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_GetObjectKeyWithRootPathReqT.ProtoReflect.Descriptor instead.
func (*C2S_GetObjectKeyWithRootPathReqT) Descriptor() ([]byte, []int) {
	return file_StorageService2_proto_rawDescGZIP(), []int{18}
}

func (x *C2S_GetObjectKeyWithRootPathReqT) GetObjectKey() string {
	if x != nil {
		return x.ObjectKey
	}
	return ""
}

func (x *C2S_GetObjectKeyWithRootPathReqT) GetScopeId() int32 {
	if x != nil {
		return x.ScopeId
	}
	return 0
}

type C2S_GetObjectKeyWithRootPathRpnT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectKey string `protobuf:"bytes,10,opt,name=objectKey,proto3" json:"objectKey,omitempty"`
}

func (x *C2S_GetObjectKeyWithRootPathRpnT) Reset() {
	*x = C2S_GetObjectKeyWithRootPathRpnT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StorageService2_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_GetObjectKeyWithRootPathRpnT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_GetObjectKeyWithRootPathRpnT) ProtoMessage() {}

func (x *C2S_GetObjectKeyWithRootPathRpnT) ProtoReflect() protoreflect.Message {
	mi := &file_StorageService2_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_GetObjectKeyWithRootPathRpnT.ProtoReflect.Descriptor instead.
func (*C2S_GetObjectKeyWithRootPathRpnT) Descriptor() ([]byte, []int) {
	return file_StorageService2_proto_rawDescGZIP(), []int{19}
}

func (x *C2S_GetObjectKeyWithRootPathRpnT) GetObjectKey() string {
	if x != nil {
		return x.ObjectKey
	}
	return ""
}

type C2S_CopyObjectReqT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceKey     string `protobuf:"bytes,10,opt,name=sourceKey,proto3" json:"sourceKey,omitempty"`          // 源对象的key
	SourceScopeId int32  `protobuf:"varint,20,opt,name=sourceScopeId,proto3" json:"sourceScopeId,omitempty"` // 源对象的scopeId
	TargetKey     string `protobuf:"bytes,30,opt,name=targetKey,proto3" json:"targetKey,omitempty"`          // 目标对象的key
	TargetScopeId int32  `protobuf:"varint,40,opt,name=targetScopeId,proto3" json:"targetScopeId,omitempty"` // 目标对象的scopeId
}

func (x *C2S_CopyObjectReqT) Reset() {
	*x = C2S_CopyObjectReqT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StorageService2_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_CopyObjectReqT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_CopyObjectReqT) ProtoMessage() {}

func (x *C2S_CopyObjectReqT) ProtoReflect() protoreflect.Message {
	mi := &file_StorageService2_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_CopyObjectReqT.ProtoReflect.Descriptor instead.
func (*C2S_CopyObjectReqT) Descriptor() ([]byte, []int) {
	return file_StorageService2_proto_rawDescGZIP(), []int{20}
}

func (x *C2S_CopyObjectReqT) GetSourceKey() string {
	if x != nil {
		return x.SourceKey
	}
	return ""
}

func (x *C2S_CopyObjectReqT) GetSourceScopeId() int32 {
	if x != nil {
		return x.SourceScopeId
	}
	return 0
}

func (x *C2S_CopyObjectReqT) GetTargetKey() string {
	if x != nil {
		return x.TargetKey
	}
	return ""
}

func (x *C2S_CopyObjectReqT) GetTargetScopeId() int32 {
	if x != nil {
		return x.TargetScopeId
	}
	return 0
}

type C2S_CopyObjectRpnT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *C2S_CopyObjectRpnT) Reset() {
	*x = C2S_CopyObjectRpnT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StorageService2_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_CopyObjectRpnT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_CopyObjectRpnT) ProtoMessage() {}

func (x *C2S_CopyObjectRpnT) ProtoReflect() protoreflect.Message {
	mi := &file_StorageService2_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_CopyObjectRpnT.ProtoReflect.Descriptor instead.
func (*C2S_CopyObjectRpnT) Descriptor() ([]byte, []int) {
	return file_StorageService2_proto_rawDescGZIP(), []int{21}
}

type C2S_GetDownloadFileUrlReqT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectIdentity     []*ObjectIdentity `protobuf:"bytes,10,rep,name=objectIdentity,proto3" json:"objectIdentity,omitempty"`                // 对象标识
	UseInnerEndpoint   *bool             `protobuf:"varint,12,opt,name=useInnerEndpoint,proto3,oneof" json:"useInnerEndpoint,omitempty"`     // 是否使用内网地址
	ExpireTimeInSecond *int64            `protobuf:"varint,30,opt,name=expireTimeInSecond,proto3,oneof" json:"expireTimeInSecond,omitempty"` // 过期时间, 单位秒
}

func (x *C2S_GetDownloadFileUrlReqT) Reset() {
	*x = C2S_GetDownloadFileUrlReqT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StorageService2_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_GetDownloadFileUrlReqT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_GetDownloadFileUrlReqT) ProtoMessage() {}

func (x *C2S_GetDownloadFileUrlReqT) ProtoReflect() protoreflect.Message {
	mi := &file_StorageService2_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_GetDownloadFileUrlReqT.ProtoReflect.Descriptor instead.
func (*C2S_GetDownloadFileUrlReqT) Descriptor() ([]byte, []int) {
	return file_StorageService2_proto_rawDescGZIP(), []int{22}
}

func (x *C2S_GetDownloadFileUrlReqT) GetObjectIdentity() []*ObjectIdentity {
	if x != nil {
		return x.ObjectIdentity
	}
	return nil
}

func (x *C2S_GetDownloadFileUrlReqT) GetUseInnerEndpoint() bool {
	if x != nil && x.UseInnerEndpoint != nil {
		return *x.UseInnerEndpoint
	}
	return false
}

func (x *C2S_GetDownloadFileUrlReqT) GetExpireTimeInSecond() int64 {
	if x != nil && x.ExpireTimeInSecond != nil {
		return *x.ExpireTimeInSecond
	}
	return 0
}

type C2S_GetDownloadFileUrlRpnT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *structpb.Struct `protobuf:"bytes,5,opt,name=response,proto3" json:"response,omitempty"` //返回值示例: {"请求时设置的文件的key" : "下载文件的url"}
}

func (x *C2S_GetDownloadFileUrlRpnT) Reset() {
	*x = C2S_GetDownloadFileUrlRpnT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StorageService2_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_GetDownloadFileUrlRpnT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_GetDownloadFileUrlRpnT) ProtoMessage() {}

func (x *C2S_GetDownloadFileUrlRpnT) ProtoReflect() protoreflect.Message {
	mi := &file_StorageService2_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_GetDownloadFileUrlRpnT.ProtoReflect.Descriptor instead.
func (*C2S_GetDownloadFileUrlRpnT) Descriptor() ([]byte, []int) {
	return file_StorageService2_proto_rawDescGZIP(), []int{23}
}

func (x *C2S_GetDownloadFileUrlRpnT) GetResponse() *structpb.Struct {
	if x != nil {
		return x.Response
	}
	return nil
}

type C2S_CheckObjectExistReqT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectIdentity []*ObjectIdentity `protobuf:"bytes,10,rep,name=objectIdentity,proto3" json:"objectIdentity,omitempty"` // 对象标识
}

func (x *C2S_CheckObjectExistReqT) Reset() {
	*x = C2S_CheckObjectExistReqT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StorageService2_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_CheckObjectExistReqT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_CheckObjectExistReqT) ProtoMessage() {}

func (x *C2S_CheckObjectExistReqT) ProtoReflect() protoreflect.Message {
	mi := &file_StorageService2_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_CheckObjectExistReqT.ProtoReflect.Descriptor instead.
func (*C2S_CheckObjectExistReqT) Descriptor() ([]byte, []int) {
	return file_StorageService2_proto_rawDescGZIP(), []int{24}
}

func (x *C2S_CheckObjectExistReqT) GetObjectIdentity() []*ObjectIdentity {
	if x != nil {
		return x.ObjectIdentity
	}
	return nil
}

type C2S_CheckObjectExistRpnT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *structpb.Struct `protobuf:"bytes,5,opt,name=response,proto3" json:"response,omitempty"` //返回值示例: {"请求时设置的文件的key" : true/false}
}

func (x *C2S_CheckObjectExistRpnT) Reset() {
	*x = C2S_CheckObjectExistRpnT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StorageService2_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_CheckObjectExistRpnT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_CheckObjectExistRpnT) ProtoMessage() {}

func (x *C2S_CheckObjectExistRpnT) ProtoReflect() protoreflect.Message {
	mi := &file_StorageService2_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_CheckObjectExistRpnT.ProtoReflect.Descriptor instead.
func (*C2S_CheckObjectExistRpnT) Descriptor() ([]byte, []int) {
	return file_StorageService2_proto_rawDescGZIP(), []int{25}
}

func (x *C2S_CheckObjectExistRpnT) GetResponse() *structpb.Struct {
	if x != nil {
		return x.Response
	}
	return nil
}

type C2S_GetStorageMetadataReqT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectIdentity *ObjectIdentity `protobuf:"bytes,10,opt,name=objectIdentity,proto3" json:"objectIdentity,omitempty"` // 对象标识
}

func (x *C2S_GetStorageMetadataReqT) Reset() {
	*x = C2S_GetStorageMetadataReqT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StorageService2_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_GetStorageMetadataReqT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_GetStorageMetadataReqT) ProtoMessage() {}

func (x *C2S_GetStorageMetadataReqT) ProtoReflect() protoreflect.Message {
	mi := &file_StorageService2_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_GetStorageMetadataReqT.ProtoReflect.Descriptor instead.
func (*C2S_GetStorageMetadataReqT) Descriptor() ([]byte, []int) {
	return file_StorageService2_proto_rawDescGZIP(), []int{26}
}

func (x *C2S_GetStorageMetadataReqT) GetObjectIdentity() *ObjectIdentity {
	if x != nil {
		return x.ObjectIdentity
	}
	return nil
}

type C2S_GetStorageMetadataRpnT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastModified       *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=lastModified,proto3" json:"lastModified,omitempty"`             // 最后修改时间
	ContentLength      int64                  `protobuf:"varint,20,opt,name=contentLength,proto3" json:"contentLength,omitempty"`          // 内容长度
	ContentType        string                 `protobuf:"bytes,30,opt,name=contentType,proto3" json:"contentType,omitempty"`               // 内容类型
	ContentLanguage    string                 `protobuf:"bytes,40,opt,name=contentLanguage,proto3" json:"contentLanguage,omitempty"`       // 内容语言
	ContentEncoding    string                 `protobuf:"bytes,50,opt,name=contentEncoding,proto3" json:"contentEncoding,omitempty"`       // 内容编码
	CacheControl       string                 `protobuf:"bytes,60,opt,name=cacheControl,proto3" json:"cacheControl,omitempty"`             // 缓存控制
	ContentMd5         string                 `protobuf:"bytes,70,opt,name=contentMd5,proto3" json:"contentMd5,omitempty"`                 // 内容MD5
	ContentDisposition string                 `protobuf:"bytes,80,opt,name=contentDisposition,proto3" json:"contentDisposition,omitempty"` // 内容描述
	Etag               string                 `protobuf:"bytes,90,opt,name=etag,proto3" json:"etag,omitempty"`                             // 内容的etag
}

func (x *C2S_GetStorageMetadataRpnT) Reset() {
	*x = C2S_GetStorageMetadataRpnT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_StorageService2_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_GetStorageMetadataRpnT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_GetStorageMetadataRpnT) ProtoMessage() {}

func (x *C2S_GetStorageMetadataRpnT) ProtoReflect() protoreflect.Message {
	mi := &file_StorageService2_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_GetStorageMetadataRpnT.ProtoReflect.Descriptor instead.
func (*C2S_GetStorageMetadataRpnT) Descriptor() ([]byte, []int) {
	return file_StorageService2_proto_rawDescGZIP(), []int{27}
}

func (x *C2S_GetStorageMetadataRpnT) GetLastModified() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *C2S_GetStorageMetadataRpnT) GetContentLength() int64 {
	if x != nil {
		return x.ContentLength
	}
	return 0
}

func (x *C2S_GetStorageMetadataRpnT) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *C2S_GetStorageMetadataRpnT) GetContentLanguage() string {
	if x != nil {
		return x.ContentLanguage
	}
	return ""
}

func (x *C2S_GetStorageMetadataRpnT) GetContentEncoding() string {
	if x != nil {
		return x.ContentEncoding
	}
	return ""
}

func (x *C2S_GetStorageMetadataRpnT) GetCacheControl() string {
	if x != nil {
		return x.CacheControl
	}
	return ""
}

func (x *C2S_GetStorageMetadataRpnT) GetContentMd5() string {
	if x != nil {
		return x.ContentMd5
	}
	return ""
}

func (x *C2S_GetStorageMetadataRpnT) GetContentDisposition() string {
	if x != nil {
		return x.ContentDisposition
	}
	return ""
}

func (x *C2S_GetStorageMetadataRpnT) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

var File_StorageService2_proto protoreflect.FileDescriptor

var file_StorageService2_proto_rawDesc = []byte{
	0x0a, 0x15, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x32, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb9, 0x03, 0x0a, 0x17, 0x43, 0x32, 0x53, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x5f, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x61, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70,
	0x65, 0x6e, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x18, 0x4f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x55, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5c, 0x0a, 0x17,
	0x43, 0x32, 0x53, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x70, 0x6e, 0x5f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x61, 0x49,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x61, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xcb, 0x02, 0x0a, 0x19, 0x43,
	0x32, 0x53, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x5f, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x18,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x18, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x55, 0x72, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0e,
	0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2e,
	0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x6e,
	0x76, 0x6f, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x10, 0x75, 0x73, 0x65,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x6e, 0x65, 0x72,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x50, 0x0a, 0x19, 0x43, 0x32, 0x53, 0x5f,
	0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c,
	0x52, 0x70, 0x6e, 0x5f, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x18, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x25, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x0d, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0d, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x22, 0xaa, 0x01, 0x0a, 0x17, 0x43, 0x32, 0x53, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x5f, 0x74, 0x12, 0x37, 0x0a, 0x05,
	0x6d, 0x65, 0x74, 0x61, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x70, 0x6e, 0x5f, 0x74, 0x52, 0x05,
	0x6d, 0x65, 0x74, 0x61, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12,
	0x3c, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x32, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0e, 0x69,
	0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x19, 0x0a,
	0x17, 0x43, 0x32, 0x53, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x70, 0x6e, 0x5f, 0x74, 0x22, 0xbd, 0x01, 0x0a, 0x25, 0x43, 0x32, 0x53,
	0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x5f, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x69, 0x6e,
	0x76, 0x6f, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x49, 0x6e,
	0x76, 0x6f, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x27, 0x0a, 0x25, 0x43, 0x32, 0x53, 0x5f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x79,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x70, 0x6e, 0x5f,
	0x74, 0x22, 0xb2, 0x02, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x49, 0x64, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x16, 0x43, 0x32, 0x53, 0x5f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x5f, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x69, 0x0a, 0x16,
	0x43, 0x32, 0x53, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x52, 0x70, 0x6e, 0x5f, 0x74, 0x12, 0x4f, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x13, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x13, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x67, 0x0a, 0x0e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1d,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xe2, 0x03, 0x0a, 0x12, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x65, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x5f, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x12,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x12, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01,
	0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x4f,
	0x66, 0x55, 0x73, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x61,
	0x78, 0x4e, 0x75, 0x6d, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55,
	0x72, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x04, 0x52, 0x0d, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x4f, 0x66, 0x55,
	0x73, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x22, 0x2a, 0x0a, 0x12, 0x43, 0x32, 0x53, 0x5f,
	0x50, 0x72, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x70, 0x6e, 0x5f, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xbc, 0x02, 0x0a, 0x16, 0x43, 0x32, 0x53, 0x5f, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x5f, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x32, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52,
	0x10, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x22, 0xf0, 0x01, 0x0a, 0x16, 0x43, 0x32, 0x53, 0x5f, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x70, 0x6e, 0x5f, 0x74, 0x12, 0x3c,
	0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x43, 0x32,
	0x53, 0x5f, 0x50, 0x72, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x5f, 0x74,
	0x52, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0b,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x09,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x09, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x22, 0x5b, 0x0a, 0x21, 0x43, 0x32, 0x53, 0x5f, 0x47, 0x65,
	0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x57, 0x69, 0x74, 0x68, 0x52, 0x6f,
	0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x5f, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x21, 0x43, 0x32, 0x53, 0x5f, 0x47, 0x65, 0x74, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x57, 0x69, 0x74, 0x68, 0x52, 0x6f, 0x6f, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x70, 0x6e, 0x5f, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x9d, 0x01, 0x0a, 0x13, 0x43, 0x32, 0x53, 0x5f, 0x43,
	0x6f, 0x70, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x5f, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49,
	0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x43, 0x32, 0x53, 0x5f, 0x43, 0x6f,
	0x70, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x70, 0x6e, 0x5f, 0x74, 0x22, 0xf1, 0x01,
	0x0a, 0x1b, 0x43, 0x32, 0x53, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x5f, 0x74, 0x12, 0x40, 0x0a,
	0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x2f, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x10, 0x75, 0x73, 0x65,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x12,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x6e,
	0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x22, 0x52, 0x0a, 0x1b, 0x43, 0x32, 0x53, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x70, 0x6e, 0x5f, 0x74,
	0x12, 0x33, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5d, 0x0a, 0x19, 0x43, 0x32, 0x53, 0x5f, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x5f, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x22, 0x50, 0x0a, 0x19, 0x43, 0x32, 0x53, 0x5f, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x70, 0x6e, 0x5f,
	0x74, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f, 0x0a, 0x1b, 0x43, 0x32, 0x53, 0x5f, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x5f, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x81, 0x03, 0x0a, 0x1b, 0x43, 0x32, 0x53, 0x5f,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x70, 0x6e, 0x5f, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x4d, 0x64, 0x35, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x4d, 0x64, 0x35, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x50, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18,
	0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x32, 0x94, 0x09, 0x0a, 0x0e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58,
	0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x21, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x43, 0x32, 0x53, 0x5f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x5f, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x43,
	0x32, 0x53, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x70, 0x6e, 0x5f, 0x74, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x5f, 0x74, 0x1a, 0x21, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x70, 0x6e, 0x5f, 0x74,
	0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x43,
	0x32, 0x53, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x5f, 0x74, 0x1a, 0x2f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2e,
	0x43, 0x32, 0x53, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x70, 0x6e, 0x5f, 0x74, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x5f, 0x74,
	0x1a, 0x23, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x43, 0x32, 0x53, 0x5f,
	0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c,
	0x52, 0x70, 0x6e, 0x5f, 0x74, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x47, 0x65, 0x74,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x52,
	0x65, 0x71, 0x5f, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2e,
	0x43, 0x32, 0x53, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x70, 0x6e, 0x5f, 0x74, 0x22, 0x00, 0x12, 0x55, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x20,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x5f, 0x74,
	0x1a, 0x20, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x43, 0x32, 0x53, 0x5f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x70, 0x6e,
	0x5f, 0x74, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0a, 0x43, 0x6f, 0x70, 0x79, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x1d, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x43, 0x32,
	0x53, 0x5f, 0x43, 0x6f, 0x70, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x5f,
	0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x43, 0x32, 0x53,
	0x5f, 0x43, 0x6f, 0x70, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x70, 0x6e, 0x5f, 0x74,
	0x22, 0x00, 0x12, 0x49, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12,
	0x1c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x50,
	0x72, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x5f, 0x74, 0x1a, 0x1c, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x65,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x70, 0x6e, 0x5f, 0x74, 0x22, 0x00, 0x12, 0x55, 0x0a,
	0x0d, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x5f, 0x74,
	0x1a, 0x20, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x43, 0x32, 0x53, 0x5f,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x70, 0x6e,
	0x5f, 0x74, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4b, 0x65, 0x79, 0x57, 0x69, 0x74, 0x68, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x2b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x43, 0x32, 0x53, 0x5f,
	0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x57, 0x69, 0x74, 0x68,
	0x52, 0x6f, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x5f, 0x74, 0x1a, 0x2b, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x47, 0x65, 0x74,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x57, 0x69, 0x74, 0x68, 0x52, 0x6f, 0x6f,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x70, 0x6e, 0x5f, 0x74, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x10,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x12, 0x23, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x43, 0x32, 0x53, 0x5f,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x5f, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32,
	0x2e, 0x43, 0x32, 0x53, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x70, 0x6e, 0x5f, 0x74, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x25, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x43, 0x32,
	0x53, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x5f, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x32, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x70, 0x6e, 0x5f, 0x74,
	0x22, 0x00, 0x42, 0x3b, 0x0a, 0x15, 0x63, 0x6e, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2e, 0x6c, 0x69, 0x62, 0x42, 0x13, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x0b, 0x2e, 0x2f, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_StorageService2_proto_rawDescOnce sync.Once
	file_StorageService2_proto_rawDescData = file_StorageService2_proto_rawDesc
)

func file_StorageService2_proto_rawDescGZIP() []byte {
	file_StorageService2_proto_rawDescOnce.Do(func() {
		file_StorageService2_proto_rawDescData = protoimpl.X.CompressGZIP(file_StorageService2_proto_rawDescData)
	})
	return file_StorageService2_proto_rawDescData
}

var file_StorageService2_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_StorageService2_proto_goTypes = []interface{}{
	(*C2S_CreateMetadataReqT)(nil),               // 0: storage2.C2S_CreateMetadataReq_t
	(*C2S_CreateMetadataRpnT)(nil),               // 1: storage2.C2S_CreateMetadataRpn_t
	(*C2S_GetUploadFileUrlReqT)(nil),             // 2: storage2.C2S_GetUploadFileUrlReq_t
	(*C2S_GetUploadFileUrlRpnT)(nil),             // 3: storage2.C2S_GetUploadFileUrlRpn_t
	(*RequestUploadUrlFileInfo)(nil),             // 4: storage2.RequestUploadUrlFileInfo
	(*C2S_DeleteMetadataReqT)(nil),               // 5: storage2.C2S_DeleteMetadataReq_t
	(*C2S_DeleteMetadataRpnT)(nil),               // 6: storage2.C2S_DeleteMetadataRpn_t
	(*C2S_DeleteMetadataByCustomFilterReqT)(nil), // 7: storage2.C2S_DeleteMetadataByCustomFilterReq_t
	(*C2S_DeleteMetadataByCustomFilterRpnT)(nil), // 8: storage2.C2S_DeleteMetadataByCustomFilterRpn_t
	(*InvokeUser)(nil),                           // 9: storage2.InvokeUser
	(*C2S_DeleteObjectsReqT)(nil),                // 10: storage2.C2S_DeleteObjectsReq_t
	(*C2S_DeleteObjectsRpnT)(nil),                // 11: storage2.C2S_DeleteObjectsRpn_t
	(*DeleteObjectsResult)(nil),                  // 12: storage2.DeleteObjectsResult
	(*ObjectIdentity)(nil),                       // 13: storage2.ObjectIdentity
	(*C2S_PreHandleReqT)(nil),                    // 14: storage2.C2S_PreHandleReq_t
	(*C2S_PreHandleRpnT)(nil),                    // 15: storage2.C2S_PreHandleRpn_t
	(*C2S_HandleByTokenReqT)(nil),                // 16: storage2.C2S_HandleByTokenReq_t
	(*C2S_HandleByTokenRpnT)(nil),                // 17: storage2.C2S_HandleByTokenRpn_t
	(*C2S_GetObjectKeyWithRootPathReqT)(nil),     // 18: storage2.C2S_GetObjectKeyWithRootPathReq_t
	(*C2S_GetObjectKeyWithRootPathRpnT)(nil),     // 19: storage2.C2S_GetObjectKeyWithRootPathRpn_t
	(*C2S_CopyObjectReqT)(nil),                   // 20: storage2.C2S_CopyObjectReq_t
	(*C2S_CopyObjectRpnT)(nil),                   // 21: storage2.C2S_CopyObjectRpn_t
	(*C2S_GetDownloadFileUrlReqT)(nil),           // 22: storage2.C2S_GetDownloadFileUrlReq_t
	(*C2S_GetDownloadFileUrlRpnT)(nil),           // 23: storage2.C2S_GetDownloadFileUrlRpn_t
	(*C2S_CheckObjectExistReqT)(nil),             // 24: storage2.C2S_CheckObjectExistReq_t
	(*C2S_CheckObjectExistRpnT)(nil),             // 25: storage2.C2S_CheckObjectExistRpn_t
	(*C2S_GetStorageMetadataReqT)(nil),           // 26: storage2.C2S_GetStorageMetadataReq_t
	(*C2S_GetStorageMetadataRpnT)(nil),           // 27: storage2.C2S_GetStorageMetadataRpn_t
	(*structpb.Struct)(nil),                      // 28: google.protobuf.Struct
	(*timestamppb.Timestamp)(nil),                // 29: google.protobuf.Timestamp
}
var file_StorageService2_proto_depIdxs = []int32{
	4,  // 0: storage2.C2S_GetUploadFileUrlReq_t.requestUploadUrlFileInfo:type_name -> storage2.RequestUploadUrlFileInfo
	9,  // 1: storage2.C2S_GetUploadFileUrlReq_t.invokeUserInfo:type_name -> storage2.InvokeUser
	28, // 2: storage2.C2S_GetUploadFileUrlRpn_t.response:type_name -> google.protobuf.Struct
	28, // 3: storage2.RequestUploadUrlFileInfo.customSetting:type_name -> google.protobuf.Struct
	1,  // 4: storage2.C2S_DeleteMetadataReq_t.metas:type_name -> storage2.C2S_CreateMetadataRpn_t
	9,  // 5: storage2.C2S_DeleteMetadataReq_t.invokeUserInfo:type_name -> storage2.InvokeUser
	9,  // 6: storage2.C2S_DeleteMetadataByCustomFilterReq_t.invokeUserInfo:type_name -> storage2.InvokeUser
	13, // 7: storage2.C2S_DeleteObjectsReq_t.objectIdentity:type_name -> storage2.ObjectIdentity
	12, // 8: storage2.C2S_DeleteObjectsRpn_t.deleteObjectsResult:type_name -> storage2.DeleteObjectsResult
	13, // 9: storage2.C2S_PreHandleReq_t.objectIdentity:type_name -> storage2.ObjectIdentity
	28, // 10: storage2.C2S_PreHandleReq_t.customProperties:type_name -> google.protobuf.Struct
	4,  // 11: storage2.C2S_HandleByTokenReq_t.uploadFileInfo:type_name -> storage2.RequestUploadUrlFileInfo
	14, // 12: storage2.C2S_HandleByTokenRpn_t.handleInfo:type_name -> storage2.C2S_PreHandleReq_t
	28, // 13: storage2.C2S_HandleByTokenRpn_t.downloadUrl:type_name -> google.protobuf.Struct
	28, // 14: storage2.C2S_HandleByTokenRpn_t.uploadUrl:type_name -> google.protobuf.Struct
	13, // 15: storage2.C2S_GetDownloadFileUrlReq_t.objectIdentity:type_name -> storage2.ObjectIdentity
	28, // 16: storage2.C2S_GetDownloadFileUrlRpn_t.response:type_name -> google.protobuf.Struct
	13, // 17: storage2.C2S_CheckObjectExistReq_t.objectIdentity:type_name -> storage2.ObjectIdentity
	28, // 18: storage2.C2S_CheckObjectExistRpn_t.response:type_name -> google.protobuf.Struct
	13, // 19: storage2.C2S_GetStorageMetadataReq_t.objectIdentity:type_name -> storage2.ObjectIdentity
	29, // 20: storage2.C2S_GetStorageMetadataRpn_t.lastModified:type_name -> google.protobuf.Timestamp
	0,  // 21: storage2.StorageService.CreateMetadata:input_type -> storage2.C2S_CreateMetadataReq_t
	5,  // 22: storage2.StorageService.DeleteMetadata:input_type -> storage2.C2S_DeleteMetadataReq_t
	7,  // 23: storage2.StorageService.DeleteMetadataByCustomFilter:input_type -> storage2.C2S_DeleteMetadataByCustomFilterReq_t
	2,  // 24: storage2.StorageService.GetUploadFileUrl:input_type -> storage2.C2S_GetUploadFileUrlReq_t
	22, // 25: storage2.StorageService.GetDownloadFileUrl:input_type -> storage2.C2S_GetDownloadFileUrlReq_t
	10, // 26: storage2.StorageService.DeleteObjects:input_type -> storage2.C2S_DeleteObjectsReq_t
	20, // 27: storage2.StorageService.CopyObject:input_type -> storage2.C2S_CopyObjectReq_t
	14, // 28: storage2.StorageService.PreHandle:input_type -> storage2.C2S_PreHandleReq_t
	16, // 29: storage2.StorageService.HandleByToken:input_type -> storage2.C2S_HandleByTokenReq_t
	18, // 30: storage2.StorageService.GetObjectKeyWithRootPath:input_type -> storage2.C2S_GetObjectKeyWithRootPathReq_t
	24, // 31: storage2.StorageService.CheckObjectExist:input_type -> storage2.C2S_CheckObjectExistReq_t
	26, // 32: storage2.StorageService.GetStorageMetadata:input_type -> storage2.C2S_GetStorageMetadataReq_t
	1,  // 33: storage2.StorageService.CreateMetadata:output_type -> storage2.C2S_CreateMetadataRpn_t
	6,  // 34: storage2.StorageService.DeleteMetadata:output_type -> storage2.C2S_DeleteMetadataRpn_t
	8,  // 35: storage2.StorageService.DeleteMetadataByCustomFilter:output_type -> storage2.C2S_DeleteMetadataByCustomFilterRpn_t
	3,  // 36: storage2.StorageService.GetUploadFileUrl:output_type -> storage2.C2S_GetUploadFileUrlRpn_t
	23, // 37: storage2.StorageService.GetDownloadFileUrl:output_type -> storage2.C2S_GetDownloadFileUrlRpn_t
	11, // 38: storage2.StorageService.DeleteObjects:output_type -> storage2.C2S_DeleteObjectsRpn_t
	21, // 39: storage2.StorageService.CopyObject:output_type -> storage2.C2S_CopyObjectRpn_t
	15, // 40: storage2.StorageService.PreHandle:output_type -> storage2.C2S_PreHandleRpn_t
	17, // 41: storage2.StorageService.HandleByToken:output_type -> storage2.C2S_HandleByTokenRpn_t
	19, // 42: storage2.StorageService.GetObjectKeyWithRootPath:output_type -> storage2.C2S_GetObjectKeyWithRootPathRpn_t
	25, // 43: storage2.StorageService.CheckObjectExist:output_type -> storage2.C2S_CheckObjectExistRpn_t
	27, // 44: storage2.StorageService.GetStorageMetadata:output_type -> storage2.C2S_GetStorageMetadataRpn_t
	33, // [33:45] is the sub-list for method output_type
	21, // [21:33] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_StorageService2_proto_init() }
func file_StorageService2_proto_init() {
	if File_StorageService2_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_StorageService2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_CreateMetadataReqT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StorageService2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_CreateMetadataRpnT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StorageService2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_GetUploadFileUrlReqT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StorageService2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_GetUploadFileUrlRpnT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StorageService2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestUploadUrlFileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StorageService2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_DeleteMetadataReqT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StorageService2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_DeleteMetadataRpnT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StorageService2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_DeleteMetadataByCustomFilterReqT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StorageService2_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_DeleteMetadataByCustomFilterRpnT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StorageService2_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvokeUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StorageService2_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_DeleteObjectsReqT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StorageService2_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_DeleteObjectsRpnT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StorageService2_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteObjectsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StorageService2_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StorageService2_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_PreHandleReqT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StorageService2_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_PreHandleRpnT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StorageService2_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_HandleByTokenReqT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StorageService2_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_HandleByTokenRpnT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StorageService2_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_GetObjectKeyWithRootPathReqT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StorageService2_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_GetObjectKeyWithRootPathRpnT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StorageService2_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_CopyObjectReqT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StorageService2_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_CopyObjectRpnT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StorageService2_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_GetDownloadFileUrlReqT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StorageService2_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_GetDownloadFileUrlRpnT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StorageService2_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_CheckObjectExistReqT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StorageService2_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_CheckObjectExistRpnT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StorageService2_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_GetStorageMetadataReqT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_StorageService2_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_GetStorageMetadataRpnT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_StorageService2_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_StorageService2_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_StorageService2_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_StorageService2_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_StorageService2_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_StorageService2_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_StorageService2_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_StorageService2_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_StorageService2_proto_msgTypes[22].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_StorageService2_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_StorageService2_proto_goTypes,
		DependencyIndexes: file_StorageService2_proto_depIdxs,
		MessageInfos:      file_StorageService2_proto_msgTypes,
	}.Build()
	File_StorageService2_proto = out.File
	file_StorageService2_proto_rawDesc = nil
	file_StorageService2_proto_goTypes = nil
	file_StorageService2_proto_depIdxs = nil
}
